{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50],"program":"/home/raz/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","enumset","/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/enumset-0.3.12/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=5dc44d090f0c3ce0","-C","extra-filename=-5dc44d090f0c3ce0","--out-dir","/home/raz/code_projects/rust_projects/rust_projects1/gas_rust_cursive_1/target/rls/debug/deps","-L","dependency=/home/raz/code_projects/rust_projects/rust_projects1/gas_rust_cursive_1/target/rls/debug/deps","--extern","num_traits=/home/raz/code_projects/rust_projects/rust_projects1/gas_rust_cursive_1/target/rls/debug/deps/libnum_traits-14ca847b33cd4972.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/raz/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,114,97,122,47,99,111,100,101,95,112,114,111,106,101,99,116,115,47,114,117,115,116,95,112,114,111,106,101,99,116,115,47,114,117,115,116,95,112,114,111,106,101,99,116,115,49,47,103,97,115,95,114,117,115,116,95,99,117,114,115,105,118,101,95,49,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,101,110,117,109,115,101,116,45,53,100,99,52,52,100,48,57,48,102,48,99,51,99,101,48,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"enumset","disambiguator":[13554142787017562255,10977801560903246221]},"crate_root":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/enumset-0.3.12/src","external_crates":[{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/enumset-0.3.12/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[2236793368080327098,16997060216224533012]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/enumset-0.3.12/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[5478884211089383000,4806429128766551161]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/enumset-0.3.12/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[14530788838283107744,6003929644675802685]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/enumset-0.3.12/src/lib.rs","num":4,"id":{"name":"num_traits","disambiguator":[16070116358590812406,2299982329820632278]}}],"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":31177,"line_start":1,"line_end":862,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":31177,"line_start":1,"line_end":862,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/enumset-0.3.12/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":34},{"krate":0,"index":176},{"krate":0,"index":212},{"krate":0,"index":208},{"krate":0,"index":196},{"krate":0,"index":192},{"krate":0,"index":186},{"krate":0,"index":182},{"krate":0,"index":178},{"krate":0,"index":36},{"krate":0,"index":94},{"krate":0,"index":102},{"krate":0,"index":108},{"krate":0,"index":114},{"krate":0,"index":120},{"krate":0,"index":126},{"krate":0,"index":130},{"krate":0,"index":134},{"krate":0,"index":138},{"krate":0,"index":142},{"krate":0,"index":148},{"krate":0,"index":152},{"krate":0,"index":156},{"krate":0,"index":214},{"krate":0,"index":254},{"krate":0,"index":250},{"krate":0,"index":238},{"krate":0,"index":234},{"krate":0,"index":228},{"krate":0,"index":224},{"krate":0,"index":220},{"krate":0,"index":216},{"krate":0,"index":160},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174}],"decl_id":null,"docs":" A library for defining enums that can be used in compact bit sets. It supports enums up to 128\n variants, and has a macro to use these sets in constants.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23,"byte_end":29,"line_start":1,"line_end":1,"column_start":24,"column_end":30}},{"value":"forbid(missing_docs)","span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":124,"byte_end":148,"line_start":3,"line_end":3,"column_start":1,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":24},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3273,"byte_end":3284,"line_start":112,"line_end":112,"column_start":18,"column_end":29},"name":"EnumSetType","qualname":"::EnumSetType","value":"EnumSetType: Copy + Ord + Eq + Hash","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32}],"decl_id":null,"docs":" The trait used to define enum types.\n This is **NOT** public API and may change at any time.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":26},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3321,"byte_end":3325,"line_start":113,"line_end":113,"column_start":10,"column_end":14},"name":"Repr","qualname":"::EnumSetType::Repr","value":"type Repr: PrimInt + ToPrimitive + FromPrimitive + WrappingSub + CheckedShl + Debug + Hash;","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":28},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3418,"byte_end":3431,"line_start":114,"line_end":114,"column_start":11,"column_end":24},"name":"VARIANT_COUNT","qualname":"::EnumSetType::VARIANT_COUNT","value":"u8","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3445,"byte_end":3457,"line_start":116,"line_end":116,"column_start":8,"column_end":20},"name":"enum_into_u8","qualname":"::EnumSetType::enum_into_u8","value":"fn (self) -> u8","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3485,"byte_end":3497,"line_start":117,"line_end":117,"column_start":15,"column_end":27},"name":"enum_from_u8","qualname":"::EnumSetType::enum_from_u8","value":"fn (val: u8) -> Self","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":34},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3651,"byte_end":3670,"line_start":123,"line_end":123,"column_start":12,"column_end":31},"name":"EnumSetSameTypeHack","qualname":"::EnumSetSameTypeHack","value":"EnumSetSameTypeHack { unified, enum_set }","parent":null,"children":[{"krate":0,"index":23},{"krate":0,"index":25}],"decl_id":null,"docs":" A struct used to type check [`enum_set!`].\n This is **NOT** public API and may change at any time.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":23},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3711,"byte_end":3718,"line_start":124,"line_end":124,"column_start":9,"column_end":16},"name":"unified","qualname":"::EnumSetSameTypeHack::unified","value":"&'a [T]","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":25},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3737,"byte_end":3745,"line_start":125,"line_end":125,"column_start":9,"column_end":17},"name":"enum_set","qualname":"::EnumSetSameTypeHack::enum_set","value":"EnumSet<T>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":176},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3945,"byte_end":3952,"line_start":131,"line_end":131,"column_start":12,"column_end":19},"name":"EnumSet","qualname":"::EnumSet","value":"EnumSet { __enumset_underlying }","parent":null,"children":[{"krate":0,"index":75}],"decl_id":null,"docs":" An efficient set type for enums created with the [`enum_set_type!`](./macro.enum_set_type.html)\n macro.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3934,"byte_end":4149,"line_start":131,"line_end":136,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3934,"byte_end":4149,"line_start":131,"line_end":136,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":75},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4118,"byte_end":4138,"line_start":135,"line_end":135,"column_start":9,"column_end":29},"name":"__enumset_underlying","qualname":"::EnumSet::__enumset_underlying","value":"<T as EnumSetType>::Repr","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" This is public due to the [`enum_set!`] macro.\n This is **NOT** public API and may change at any time.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4817,"byte_end":4820,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"new","qualname":"<EnumSet<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4958,"byte_end":4962,"line_start":162,"line_end":162,"column_start":12,"column_end":16},"name":"only","qualname":"<EnumSet<T>>::only","value":"fn (t: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a set containing a single value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5098,"byte_end":5103,"line_start":167,"line_end":167,"column_start":12,"column_end":17},"name":"empty","qualname":"<EnumSet<T>>::empty","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5194,"byte_end":5197,"line_start":171,"line_end":171,"column_start":12,"column_end":15},"name":"all","qualname":"<EnumSet<T>>::all","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a set with all bits set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5472,"byte_end":5481,"line_start":177,"line_end":177,"column_start":12,"column_end":21},"name":"bit_width","qualname":"<EnumSet<T>>::bit_width","value":"fn () -> u8","parent":null,"children":[],"decl_id":null,"docs":" Total number of bits this enumset uses. Note that the actual amount of space used is\n rounded up to the next highest integer type (`u8`, `u16`, `u32`, `u64`, or `u128`).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5582,"byte_end":5589,"line_start":182,"line_end":182,"column_start":12,"column_end":19},"name":"to_bits","qualname":"<EnumSet<T>>::to_bits","value":"fn (&self) -> u128","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw bits of this set\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5852,"byte_end":5861,"line_start":191,"line_end":191,"column_start":12,"column_end":21},"name":"from_bits","qualname":"<EnumSet<T>>::from_bits","value":"fn (bits: u128) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a bitset from raw bits.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6211,"byte_end":6214,"line_start":200,"line_end":200,"column_start":12,"column_end":15},"name":"len","qualname":"<EnumSet<T>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of values in this set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6342,"byte_end":6350,"line_start":204,"line_end":204,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<EnumSet<T>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the set is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6472,"byte_end":6477,"line_start":208,"line_end":208,"column_start":12,"column_end":17},"name":"clear","qualname":"<EnumSet<T>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes all elements from the set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6621,"byte_end":6632,"line_start":213,"line_end":213,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<EnumSet<T>>::is_disjoint","value":"fn (&self, other: Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if this set shares no elements with another.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6778,"byte_end":6789,"line_start":217,"line_end":217,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<EnumSet<T>>::is_superset","value":"fn (&self, other: Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if all elements in another set are in this set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6931,"byte_end":6940,"line_start":221,"line_end":221,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<EnumSet<T>>::is_subset","value":"fn (&self, other: Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if all elements of this set are in another set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7095,"byte_end":7100,"line_start":226,"line_end":226,"column_start":12,"column_end":17},"name":"union","qualname":"<EnumSet<T>>::union","value":"fn (&self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a set containing the union of all elements in both sets.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7319,"byte_end":7331,"line_start":230,"line_end":230,"column_start":12,"column_end":24},"name":"intersection","qualname":"<EnumSet<T>>::intersection","value":"fn (&self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a set containing all elements in common with another set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7542,"byte_end":7552,"line_start":234,"line_end":234,"column_start":12,"column_end":22},"name":"difference","qualname":"<EnumSet<T>>::difference","value":"fn (&self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a set with all elements of the other set removed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7766,"byte_end":7788,"line_start":238,"line_end":238,"column_start":12,"column_end":34},"name":"symmetrical_difference","qualname":"<EnumSet<T>>::symmetrical_difference","value":"fn (&self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a set with all elements not contained in both sets.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7996,"byte_end":8006,"line_start":242,"line_end":242,"column_start":12,"column_end":22},"name":"complement","qualname":"<EnumSet<T>>::complement","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a set containing all elements not in this set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8180,"byte_end":8188,"line_start":247,"line_end":247,"column_start":12,"column_end":20},"name":"contains","qualname":"<EnumSet<T>>::contains","value":"fn (&self, value: T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether this set contains a value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8311,"byte_end":8317,"line_start":252,"line_end":252,"column_start":12,"column_end":18},"name":"insert","qualname":"<EnumSet<T>>::insert","value":"fn (&mut self, value: T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to this set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8565,"byte_end":8571,"line_start":258,"line_end":258,"column_start":12,"column_end":18},"name":"remove","qualname":"<EnumSet<T>>::remove","value":"fn (&mut self, value: T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes a value from this set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8836,"byte_end":8846,"line_start":265,"line_end":265,"column_start":12,"column_end":22},"name":"insert_all","qualname":"<EnumSet<T>>::insert_all","value":"fn (&mut self, other: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds all elements in another set to this one.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9038,"byte_end":9048,"line_start":269,"line_end":269,"column_start":12,"column_end":22},"name":"remove_all","qualname":"<EnumSet<T>>::remove_all","value":"fn (&mut self, other: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes all values in another set from this one.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9242,"byte_end":9246,"line_start":274,"line_end":274,"column_start":12,"column_end":16},"name":"iter","qualname":"<EnumSet<T>>::iter","value":"fn (&self) -> EnumSetIter<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator over the values in this set.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":214},"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11764,"byte_end":11775,"line_start":367,"line_end":367,"column_start":12,"column_end":23},"name":"EnumSetIter","qualname":"::EnumSetIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" The iterator used by [`EnumSet`](./struct.EnumSet.html).\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11753,"byte_end":11809,"line_start":367,"line_end":367,"column_start":1,"column_end":57}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11753,"byte_end":11809,"line_start":367,"line_end":367,"column_start":1,"column_end":57}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4173,"byte_end":4180,"line_start":137,"line_end":137,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9352,"byte_end":9359,"line_start":278,"line_end":278,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9548,"byte_end":9555,"line_start":287,"line_end":287,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9734,"byte_end":9741,"line_start":293,"line_end":293,"column_start":59,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9924,"byte_end":9931,"line_start":299,"line_end":299,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10107,"byte_end":10114,"line_start":305,"line_end":305,"column_start":59,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10312,"byte_end":10319,"line_start":312,"line_end":312,"column_start":62,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10465,"byte_end":10472,"line_start":317,"line_end":317,"column_start":65,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10620,"byte_end":10627,"line_start":322,"line_end":322,"column_start":64,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10775,"byte_end":10782,"line_start":327,"line_end":327,"column_start":65,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10899,"byte_end":10906,"line_start":333,"line_end":333,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11041,"byte_end":11048,"line_start":340,"line_end":340,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11156,"byte_end":11163,"line_start":346,"line_end":346,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11295,"byte_end":11302,"line_start":351,"line_end":351,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11846,"byte_end":11857,"line_start":368,"line_end":368,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3287,"byte_end":3291,"line_start":112,"line_end":112,"column_start":32,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":1682},"to":{"krate":0,"index":24}},{"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3294,"byte_end":3297,"line_start":112,"line_end":112,"column_start":39,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":2406},"to":{"krate":0,"index":24}},{"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3300,"byte_end":3302,"line_start":112,"line_end":112,"column_start":45,"column_end":47},"kind":"SuperTrait","from":{"krate":1,"index":2376},"to":{"krate":0,"index":24}},{"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3305,"byte_end":3309,"line_start":112,"line_end":112,"column_start":50,"column_end":54},"kind":"SuperTrait","from":{"krate":1,"index":7726},"to":{"krate":0,"index":24}},{"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4173,"byte_end":4180,"line_start":137,"line_end":137,"column_start":24,"column_end":31},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":176},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9352,"byte_end":9359,"line_start":278,"line_end":278,"column_start":41,"column_end":48},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":176},"to":{"krate":1,"index":4320}},{"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9548,"byte_end":9555,"line_start":287,"line_end":287,"column_start":56,"column_end":63},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":176},"to":{"krate":1,"index":1748}},{"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9734,"byte_end":9741,"line_start":293,"line_end":293,"column_start":59,"column_end":66},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":176},"to":{"krate":1,"index":1836}},{"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9924,"byte_end":9931,"line_start":299,"line_end":299,"column_start":58,"column_end":65},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":176},"to":{"krate":1,"index":1844}},{"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10107,"byte_end":10114,"line_start":305,"line_end":305,"column_start":59,"column_end":66},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":176},"to":{"krate":1,"index":1852}},{"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10312,"byte_end":10319,"line_start":312,"line_end":312,"column_start":62,"column_end":69},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":176},"to":{"krate":1,"index":1802}},{"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10465,"byte_end":10472,"line_start":317,"line_end":317,"column_start":65,"column_end":72},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":176},"to":{"krate":1,"index":1880}},{"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10620,"byte_end":10627,"line_start":322,"line_end":322,"column_start":64,"column_end":71},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":176},"to":{"krate":1,"index":1886}},{"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10775,"byte_end":10782,"line_start":327,"line_end":327,"column_start":65,"column_end":72},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":176},"to":{"krate":1,"index":1892}},{"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10899,"byte_end":10906,"line_start":333,"line_end":333,"column_start":32,"column_end":39},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":176},"to":{"krate":1,"index":1828}},{"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11041,"byte_end":11048,"line_start":340,"line_end":340,"column_start":36,"column_end":43},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":176},"to":{"krate":1,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11156,"byte_end":11163,"line_start":346,"line_end":346,"column_start":41,"column_end":48},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":176},"to":{"krate":1,"index":2370}},{"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11295,"byte_end":11302,"line_start":351,"line_end":351,"column_start":42,"column_end":49},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":176},"to":{"krate":1,"index":8146}},{"span":{"file_name":[47,104,111,109,101,47,114,97,122,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,101,110,117,109,115,101,116,45,48,46,51,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11846,"byte_end":11857,"line_start":368,"line_end":368,"column_start":37,"column_end":48},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":214},"to":{"krate":1,"index":3908}}]}