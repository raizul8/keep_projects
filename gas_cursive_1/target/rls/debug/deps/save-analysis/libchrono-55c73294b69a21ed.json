{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6","program":"/home/raz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","chrono","/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"clock\"","--cfg","feature=\"default\"","--cfg","feature=\"time\"","-C","metadata=55c73294b69a21ed","-C","extra-filename=-55c73294b69a21ed","--out-dir","/home/raz/code_projects/keep_projects/gas_cursive_1/target/rls/debug/deps","-L","dependency=/home/raz/code_projects/keep_projects/gas_cursive_1/target/rls/debug/deps","--extern","num_integer=/home/raz/code_projects/keep_projects/gas_cursive_1/target/rls/debug/deps/libnum_integer-1c635e955dbc9bd0.rmeta","--extern","num_traits=/home/raz/code_projects/keep_projects/gas_cursive_1/target/rls/debug/deps/libnum_traits-bf62464bda3d90a8.rmeta","--extern","time=/home/raz/code_projects/keep_projects/gas_cursive_1/target/rls/debug/deps/libtime-2988baf788bd7f23.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/raz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/raz/code_projects/keep_projects/gas_cursive_1/target/rls/debug/deps/libchrono-55c73294b69a21ed.rmeta"},"prelude":{"crate_id":{"name":"chrono","disambiguator":[18422687048963975161,13580066997504509918]},"crate_root":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src","external_crates":[{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[10344648486569477446,2454248652556920925]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14168888756904427512,16776303916459465465]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17407741297230913278,16283799328799007365]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4492142733197306814,14151866605630611617]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9785299734546160784,636286335322626912]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5680562745065174860,9217186745851755644]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[1647702202987759035,15124534591008137148]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[16711431240759211485,3970175217288203291]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[125532023394459561,9172165323910118991]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[17639569287364244572,9623243733363078576]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[10466182059741283835,56412014413285874]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[6793855748667116046,87956666511033926]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15647227138251999113,1639002543540862534]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[10550792004909319356,1806099500584167781]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","num":15,"id":{"name":"time","disambiguator":[5970885730625313479,16152400593265024515]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","num":16,"id":{"name":"libc","disambiguator":[13742126743162842846,10810135314539812706]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","num":17,"id":{"name":"num_integer","disambiguator":[16485680975751051326,567058608978884700]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","num":18,"id":{"name":"num_traits","disambiguator":[6257840280883506128,408502665489315770]}}],"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":76,"byte_end":37756,"line_start":4,"line_end":994,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":15,"index":295},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19039,"byte_end":19047,"line_start":418,"line_end":418,"column_start":18,"column_end":26},"alias_span":null,"name":"Duration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1376},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19108,"byte_end":19113,"line_start":421,"line_end":421,"column_start":35,"column_end":40},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":93},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19150,"byte_end":19158,"line_start":422,"line_end":422,"column_start":36,"column_end":44},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":91},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19160,"byte_end":19166,"line_start":422,"line_end":422,"column_start":46,"column_end":52},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1327},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19168,"byte_end":19179,"line_start":422,"line_end":422,"column_start":54,"column_end":65},"alias_span":null,"name":"LocalResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1350},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19181,"byte_end":19184,"line_start":422,"line_end":422,"column_start":67,"column_end":70},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1361},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19186,"byte_end":19197,"line_start":422,"line_end":422,"column_start":72,"column_end":83},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1428},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19234,"byte_end":19243,"line_start":423,"line_end":423,"column_start":35,"column_end":44},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1451},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19245,"byte_end":19252,"line_start":423,"line_end":423,"column_start":46,"column_end":53},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1471},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19254,"byte_end":19263,"line_start":423,"line_end":423,"column_start":55,"column_end":64},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1496},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19265,"byte_end":19278,"line_start":423,"line_end":423,"column_start":66,"column_end":79},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1521},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19296,"byte_end":19300,"line_start":424,"line_end":424,"column_start":16,"column_end":20},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":694},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19302,"byte_end":19310,"line_start":424,"line_end":424,"column_start":22,"column_end":30},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":695},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19312,"byte_end":19320,"line_start":424,"line_end":424,"column_start":32,"column_end":40},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1552},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19342,"byte_end":19350,"line_start":425,"line_end":425,"column_start":20,"column_end":28},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1528},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19352,"byte_end":19365,"line_start":425,"line_end":425,"column_start":30,"column_end":43},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1762},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19467,"byte_end":19477,"line_start":428,"line_end":428,"column_start":18,"column_end":28},"alias_span":null,"name":"ParseError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1023},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19479,"byte_end":19490,"line_start":428,"line_end":428,"column_start":30,"column_end":41},"alias_span":null,"name":"ParseResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1276},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19508,"byte_end":19519,"line_start":429,"line_end":429,"column_start":16,"column_end":27},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1297},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19654,"byte_end":19662,"line_start":433,"line_end":433,"column_start":32,"column_end":40},"alias_span":null,"name":"Datelike","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1316},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19664,"byte_end":19672,"line_start":433,"line_end":433,"column_start":42,"column_end":50},"alias_span":null,"name":"Timelike","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1864},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19674,"byte_end":19681,"line_start":433,"line_end":433,"column_start":52,"column_end":59},"alias_span":null,"name":"Weekday","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":93},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19715,"byte_end":19723,"line_start":434,"line_end":434,"column_start":32,"column_end":40},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":91},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19725,"byte_end":19731,"line_start":434,"line_end":434,"column_start":42,"column_end":48},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1376},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19792,"byte_end":19797,"line_start":436,"line_end":436,"column_start":31,"column_end":36},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1350},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19830,"byte_end":19833,"line_start":437,"line_end":437,"column_start":32,"column_end":35},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1361},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19835,"byte_end":19846,"line_start":437,"line_end":437,"column_start":37,"column_end":48},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1428},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19880,"byte_end":19889,"line_start":438,"line_end":438,"column_start":32,"column_end":41},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1471},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19891,"byte_end":19900,"line_start":438,"line_end":438,"column_start":43,"column_end":52},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1496},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19902,"byte_end":19915,"line_start":438,"line_end":438,"column_start":54,"column_end":67},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1521},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19948,"byte_end":19952,"line_start":439,"line_end":439,"column_start":31,"column_end":35},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1552},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19985,"byte_end":19993,"line_start":440,"line_end":440,"column_start":32,"column_end":40},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1528},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19995,"byte_end":20008,"line_start":440,"line_end":440,"column_start":42,"column_end":55},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1276},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":20041,"byte_end":20052,"line_start":441,"line_end":441,"column_start":31,"column_end":42},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1350},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":56618,"byte_end":56621,"line_start":416,"line_end":416,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":58}},{"kind":"Use","ref_id":{"krate":0,"index":1361},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":56644,"byte_end":56655,"line_start":417,"line_end":417,"column_start":22,"column_end":33},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":58}},{"kind":"Use","ref_id":{"krate":0,"index":1376},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":56702,"byte_end":56707,"line_start":419,"line_end":419,"column_start":22,"column_end":27},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":58}},{"kind":"Use","ref_id":{"krate":0,"index":1428},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":20641,"byte_end":20650,"line_start":466,"line_end":466,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":245}},{"kind":"Use","ref_id":{"krate":0,"index":365},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":20652,"byte_end":20660,"line_start":466,"line_end":466,"column_start":37,"column_end":45},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":245}},{"kind":"Use","ref_id":{"krate":0,"index":366},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":20662,"byte_end":20670,"line_start":466,"line_end":466,"column_start":47,"column_end":55},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":245}},{"kind":"Use","ref_id":{"krate":0,"index":1451},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":20700,"byte_end":20707,"line_start":467,"line_end":467,"column_start":28,"column_end":35},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":245}},{"kind":"Use","ref_id":{"krate":0,"index":1471},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":20733,"byte_end":20742,"line_start":468,"line_end":468,"column_start":25,"column_end":34},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":245}},{"kind":"Use","ref_id":{"krate":0,"index":1496},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":20772,"byte_end":20785,"line_start":469,"line_end":469,"column_start":29,"column_end":42},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":245}},{"kind":"Use","ref_id":{"krate":0,"index":1836},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":435079,"byte_end":435092,"line_start":27,"line_end":27,"column_start":25,"column_end":38},"alias_span":null,"name":"StrftimeItems","value":"","parent":{"krate":0,"index":986}},{"kind":"Use","ref_id":{"krate":0,"index":1803},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":435116,"byte_end":435122,"line_start":28,"line_end":28,"column_start":23,"column_end":29},"alias_span":null,"name":"Parsed","value":"","parent":{"krate":0,"index":986}},{"kind":"Use","ref_id":{"krate":0,"index":1226},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":435145,"byte_end":435150,"line_start":29,"line_end":29,"column_start":22,"column_end":27},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":986}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":76,"byte_end":37756,"line_start":4,"line_end":994,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":14},{"krate":0,"index":19},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":58},{"krate":0,"index":245},{"krate":0,"index":669},{"krate":0,"index":802},{"krate":0,"index":986},{"krate":0,"index":1270},{"krate":0,"index":1864},{"krate":0,"index":1897},{"krate":0,"index":1898},{"krate":0,"index":1894},{"krate":0,"index":1895},{"krate":0,"index":1893},{"krate":0,"index":1891},{"krate":0,"index":1889},{"krate":0,"index":1886},{"krate":0,"index":1284},{"krate":0,"index":1291},{"krate":0,"index":1294},{"krate":0,"index":1900},{"krate":0,"index":1906},{"krate":0,"index":1902},{"krate":0,"index":1903},{"krate":0,"index":1295},{"krate":0,"index":1297},{"krate":0,"index":1316}],"decl_id":null,"docs":" # Chrono: Date and Time for Rust","sig":null,"attributes":[{"value":"! # Chrono: Date and Time for Rust","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":76,"byte_end":112,"line_start":4,"line_end":4,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":113,"byte_end":116,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! It aims to be a feature-complete superset of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":117,"byte_end":165,"line_start":6,"line_end":6,"column_start":1,"column_end":49}},{"value":"! the [time](https://github.com/rust-lang-deprecated/time) library.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":166,"byte_end":235,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"! In particular,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":236,"byte_end":254,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":255,"byte_end":258,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! * Chrono strictly adheres to ISO 8601.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":259,"byte_end":301,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"! * Chrono is timezone-aware by default, with separate timezone-naive types.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":302,"byte_end":380,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"! * Chrono is space-optimal and (while not being the primary goal) reasonably efficient.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":381,"byte_end":471,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":472,"byte_end":475,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! There were several previous attempts to bring a good date and time library to Rust,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":476,"byte_end":563,"line_start":14,"line_end":14,"column_start":1,"column_end":88}},{"value":"! which Chrono builds upon and should acknowledge:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":564,"byte_end":616,"line_start":15,"line_end":15,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":617,"byte_end":620,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! * [Initial research on","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":621,"byte_end":647,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"!    the wiki](https://github.com/rust-lang/rust-wiki-backup/blob/master/Lib-datetime.md)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":648,"byte_end":739,"line_start":18,"line_end":18,"column_start":1,"column_end":92}},{"value":"! * Dietrich Epp's [datetime-rs](https://github.com/depp/datetime-rs)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":740,"byte_end":811,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"! * Luis de Bethencourt's [rust-datetime](https://github.com/luisbg/rust-datetime)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":812,"byte_end":896,"line_start":20,"line_end":20,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":897,"byte_end":900,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! Any significant changes to Chrono are documented in","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":901,"byte_end":956,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"! the [`CHANGELOG.md`](https://github.com/chronotope/chrono/blob/master/CHANGELOG.md) file.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":957,"byte_end":1050,"line_start":23,"line_end":23,"column_start":1,"column_end":94}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1051,"byte_end":1054,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! ## Usage","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1055,"byte_end":1067,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1068,"byte_end":1071,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! Put this in your `Cargo.toml`:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1072,"byte_end":1106,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1107,"byte_end":1110,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"! ```toml","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1111,"byte_end":1122,"line_start":29,"line_end":29,"column_start":1,"column_end":12}},{"value":"! [dependencies]","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1123,"byte_end":1141,"line_start":30,"line_end":30,"column_start":1,"column_end":19}},{"value":"! chrono = \"0.4\"","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1142,"byte_end":1160,"line_start":31,"line_end":31,"column_start":1,"column_end":19}},{"value":"! ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1161,"byte_end":1168,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1169,"byte_end":1172,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! Or, if you want [Serde](https://github.com/serde-rs/serde) include the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1173,"byte_end":1247,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"! feature like this:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1248,"byte_end":1270,"line_start":35,"line_end":35,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1271,"byte_end":1274,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"! ```toml","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1275,"byte_end":1286,"line_start":37,"line_end":37,"column_start":1,"column_end":12}},{"value":"! [dependencies]","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1287,"byte_end":1305,"line_start":38,"line_end":38,"column_start":1,"column_end":19}},{"value":"! chrono = { version = \"0.4\", features = [\"serde\"] }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1306,"byte_end":1360,"line_start":39,"line_end":39,"column_start":1,"column_end":55}},{"value":"! ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1361,"byte_end":1368,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1369,"byte_end":1372,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! Then put this in your crate root:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1373,"byte_end":1410,"line_start":42,"line_end":42,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1411,"byte_end":1414,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1415,"byte_end":1426,"line_start":44,"line_end":44,"column_start":1,"column_end":12}},{"value":"! extern crate chrono;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1427,"byte_end":1451,"line_start":45,"line_end":45,"column_start":1,"column_end":25}},{"value":"! ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1452,"byte_end":1459,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1460,"byte_end":1463,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! Avoid using `use chrono::*;` as Chrono exports several modules other than types.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1464,"byte_end":1548,"line_start":48,"line_end":48,"column_start":1,"column_end":85}},{"value":"! If you prefer the glob imports, use the following instead:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1549,"byte_end":1611,"line_start":49,"line_end":49,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1612,"byte_end":1615,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1616,"byte_end":1627,"line_start":51,"line_end":51,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1628,"byte_end":1655,"line_start":52,"line_end":52,"column_start":1,"column_end":28}},{"value":"! ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1656,"byte_end":1663,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1664,"byte_end":1667,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"! ## Overview","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1668,"byte_end":1683,"line_start":55,"line_end":55,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1684,"byte_end":1687,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"! ### Duration","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1688,"byte_end":1704,"line_start":57,"line_end":57,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1705,"byte_end":1708,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"! Chrono currently uses","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1709,"byte_end":1734,"line_start":59,"line_end":59,"column_start":1,"column_end":26}},{"value":"! the [`time::Duration`](https://docs.rs/time/0.1.40/time/struct.Duration.html) type","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1735,"byte_end":1821,"line_start":60,"line_end":60,"column_start":1,"column_end":87}},{"value":"! from the `time` crate to represent the magnitude of a time span.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1822,"byte_end":1890,"line_start":61,"line_end":61,"column_start":1,"column_end":69}},{"value":"! Since this has the same name to the newer, standard type for duration,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1891,"byte_end":1965,"line_start":62,"line_end":62,"column_start":1,"column_end":75}},{"value":"! the reference will refer this type as `OldDuration`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":1966,"byte_end":2022,"line_start":63,"line_end":63,"column_start":1,"column_end":57}},{"value":"! Note that this is an \"accurate\" duration represented as seconds and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2023,"byte_end":2094,"line_start":64,"line_end":64,"column_start":1,"column_end":72}},{"value":"! nanoseconds and does not represent \"nominal\" components such as days or","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2095,"byte_end":2170,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"! months.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2171,"byte_end":2182,"line_start":66,"line_end":66,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2183,"byte_end":2186,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! Chrono does not yet natively support","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2187,"byte_end":2227,"line_start":68,"line_end":68,"column_start":1,"column_end":41}},{"value":"! the standard [`Duration`](https://docs.rs/time/0.1.40/time/struct.Duration.html) type,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2228,"byte_end":2318,"line_start":69,"line_end":69,"column_start":1,"column_end":91}},{"value":"! but it will be supported in the future.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2319,"byte_end":2362,"line_start":70,"line_end":70,"column_start":1,"column_end":44}},{"value":"! Meanwhile you can convert between two types with","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2363,"byte_end":2415,"line_start":71,"line_end":71,"column_start":1,"column_end":53}},{"value":"! [`Duration::from_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.from_std)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2416,"byte_end":2513,"line_start":72,"line_end":72,"column_start":1,"column_end":98}},{"value":"! and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2514,"byte_end":2521,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"! [`Duration::to_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.to_std)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2522,"byte_end":2615,"line_start":74,"line_end":74,"column_start":1,"column_end":94}},{"value":"! methods.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2616,"byte_end":2628,"line_start":75,"line_end":75,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2629,"byte_end":2632,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"! ### Date and Time","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2633,"byte_end":2654,"line_start":77,"line_end":77,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2655,"byte_end":2658,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"! Chrono provides a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2659,"byte_end":2680,"line_start":79,"line_end":79,"column_start":1,"column_end":22}},{"value":"! [**`DateTime`**](./struct.DateTime.html)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2681,"byte_end":2725,"line_start":80,"line_end":80,"column_start":1,"column_end":45}},{"value":"! type to represent a date and a time in a timezone.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2726,"byte_end":2780,"line_start":81,"line_end":81,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2781,"byte_end":2784,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"! For more abstract moment-in-time tracking such as internal timekeeping","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2785,"byte_end":2859,"line_start":83,"line_end":83,"column_start":1,"column_end":75}},{"value":"! that is unconcerned with timezones, consider","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2860,"byte_end":2908,"line_start":84,"line_end":84,"column_start":1,"column_end":49}},{"value":"! [`time::SystemTime`](https://doc.rust-lang.org/std/time/struct.SystemTime.html),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2909,"byte_end":2993,"line_start":85,"line_end":85,"column_start":1,"column_end":85}},{"value":"! which tracks your system clock, or","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":2994,"byte_end":3032,"line_start":86,"line_end":86,"column_start":1,"column_end":39}},{"value":"! [`time::Instant`](https://doc.rust-lang.org/std/time/struct.Instant.html), which","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":3033,"byte_end":3117,"line_start":87,"line_end":87,"column_start":1,"column_end":85}},{"value":"! is an opaque but monotonically-increasing representation of a moment in time.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":3118,"byte_end":3199,"line_start":88,"line_end":88,"column_start":1,"column_end":82}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":3200,"byte_end":3203,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"! `DateTime` is timezone-aware and must be constructed from","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":3204,"byte_end":3265,"line_start":90,"line_end":90,"column_start":1,"column_end":62}},{"value":"! the [**`TimeZone`**](./offset/trait.TimeZone.html) object,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":3266,"byte_end":3328,"line_start":91,"line_end":91,"column_start":1,"column_end":63}},{"value":"! which defines how the local date is converted to and back from the UTC date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":3329,"byte_end":3409,"line_start":92,"line_end":92,"column_start":1,"column_end":81}},{"value":"! There are three well-known `TimeZone` implementations:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":3410,"byte_end":3468,"line_start":93,"line_end":93,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":3469,"byte_end":3472,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"! * [**`Utc`**](./offset/struct.Utc.html) specifies the UTC time zone. It is most efficient.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":3473,"byte_end":3567,"line_start":95,"line_end":95,"column_start":1,"column_end":95}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":3568,"byte_end":3571,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"! * [**`Local`**](./offset/struct.Local.html) specifies the system local time zone.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":3572,"byte_end":3657,"line_start":97,"line_end":97,"column_start":1,"column_end":86}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":3658,"byte_end":3661,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"! * [**`FixedOffset`**](./offset/struct.FixedOffset.html) specifies","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":3662,"byte_end":3731,"line_start":99,"line_end":99,"column_start":1,"column_end":70}},{"value":"!   an arbitrary, fixed time zone such as UTC+09:00 or UTC-10:30.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":3732,"byte_end":3799,"line_start":100,"line_end":100,"column_start":1,"column_end":68}},{"value":"!   This often results from the parsed textual date and time.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":3800,"byte_end":3863,"line_start":101,"line_end":101,"column_start":1,"column_end":64}},{"value":"!   Since it stores the most information and does not depend on the system environment,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":3864,"byte_end":3953,"line_start":102,"line_end":102,"column_start":1,"column_end":90}},{"value":"!   you would want to normalize other `TimeZone`s into this type.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":3954,"byte_end":4021,"line_start":103,"line_end":103,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4022,"byte_end":4025,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"! `DateTime`s with different `TimeZone` types are distinct and do not mix,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4026,"byte_end":4102,"line_start":105,"line_end":105,"column_start":1,"column_end":77}},{"value":"! but can be converted to each other using","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4103,"byte_end":4147,"line_start":106,"line_end":106,"column_start":1,"column_end":45}},{"value":"! the [`DateTime::with_timezone`](./struct.DateTime.html#method.with_timezone) method.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4148,"byte_end":4236,"line_start":107,"line_end":107,"column_start":1,"column_end":89}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4237,"byte_end":4240,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"! You can get the current date and time in the UTC time zone","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4241,"byte_end":4303,"line_start":109,"line_end":109,"column_start":1,"column_end":63}},{"value":"! ([`Utc::now()`](./offset/struct.Utc.html#method.now))","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4304,"byte_end":4361,"line_start":110,"line_end":110,"column_start":1,"column_end":58}},{"value":"! or in the local time zone","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4362,"byte_end":4391,"line_start":111,"line_end":111,"column_start":1,"column_end":30}},{"value":"! ([`Local::now()`](./offset/struct.Local.html#method.now)).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4392,"byte_end":4454,"line_start":112,"line_end":112,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4455,"byte_end":4458,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4459,"byte_end":4470,"line_start":114,"line_end":114,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4471,"byte_end":4498,"line_start":115,"line_end":115,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4499,"byte_end":4502,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"! let utc: DateTime<Utc> = Utc::now();       // e.g. `2014-11-28T12:45:59.324310806Z`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4503,"byte_end":4590,"line_start":117,"line_end":117,"column_start":1,"column_end":88}},{"value":"! let local: DateTime<Local> = Local::now(); // e.g. `2014-11-28T21:45:59.324310806+09:00`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4591,"byte_end":4683,"line_start":118,"line_end":118,"column_start":1,"column_end":93}},{"value":"! # let _ = utc; let _ = local;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4684,"byte_end":4717,"line_start":119,"line_end":119,"column_start":1,"column_end":34}},{"value":"! ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4718,"byte_end":4725,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4726,"byte_end":4729,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"! Alternatively, you can create your own date and time.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4730,"byte_end":4787,"line_start":122,"line_end":122,"column_start":1,"column_end":58}},{"value":"! This is a bit verbose due to Rust's lack of function and method overloading,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4788,"byte_end":4868,"line_start":123,"line_end":123,"column_start":1,"column_end":81}},{"value":"! but in turn we get a rich combination of initialization methods.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4869,"byte_end":4937,"line_start":124,"line_end":124,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4938,"byte_end":4941,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4942,"byte_end":4953,"line_start":126,"line_end":126,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4954,"byte_end":4981,"line_start":127,"line_end":127,"column_start":1,"column_end":28}},{"value":"! use chrono::offset::LocalResult;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":4982,"byte_end":5018,"line_start":128,"line_end":128,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":5019,"byte_end":5022,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"! let dt = Utc.ymd(2014, 7, 8).and_hms(9, 10, 11); // `2014-07-08T09:10:11Z`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":5023,"byte_end":5101,"line_start":130,"line_end":130,"column_start":1,"column_end":79}},{"value":"! // July 8 is 188th day of the year 2014 (`o` for \"ordinal\")","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":5102,"byte_end":5165,"line_start":131,"line_end":131,"column_start":1,"column_end":64}},{"value":"! assert_eq!(dt, Utc.yo(2014, 189).and_hms(9, 10, 11));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":5166,"byte_end":5223,"line_start":132,"line_end":132,"column_start":1,"column_end":58}},{"value":"! // July 8 is Tuesday in ISO week 28 of the year 2014.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":5224,"byte_end":5281,"line_start":133,"line_end":133,"column_start":1,"column_end":58}},{"value":"! assert_eq!(dt, Utc.isoywd(2014, 28, Weekday::Tue).and_hms(9, 10, 11));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":5282,"byte_end":5356,"line_start":134,"line_end":134,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":5357,"byte_end":5360,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"! let dt = Utc.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12); // `2014-07-08T09:10:11.012Z`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":5361,"byte_end":5453,"line_start":136,"line_end":136,"column_start":1,"column_end":93}},{"value":"! assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_micro(9, 10, 11, 12_000));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":5454,"byte_end":5527,"line_start":137,"line_end":137,"column_start":1,"column_end":74}},{"value":"! assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_nano(9, 10, 11, 12_000_000));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":5528,"byte_end":5604,"line_start":138,"line_end":138,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":5605,"byte_end":5608,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"! // dynamic verification","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":5609,"byte_end":5636,"line_start":140,"line_end":140,"column_start":1,"column_end":28}},{"value":"! assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(21, 15, 33),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":5637,"byte_end":5700,"line_start":141,"line_end":141,"column_start":1,"column_end":64}},{"value":"!            LocalResult::Single(Utc.ymd(2014, 7, 8).and_hms(21, 15, 33)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":5701,"byte_end":5778,"line_start":142,"line_end":142,"column_start":1,"column_end":78}},{"value":"! assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(80, 15, 33), LocalResult::None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":5779,"byte_end":5862,"line_start":143,"line_end":143,"column_start":1,"column_end":84}},{"value":"! assert_eq!(Utc.ymd_opt(2014, 7, 38).and_hms_opt(21, 15, 33), LocalResult::None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":5863,"byte_end":5947,"line_start":144,"line_end":144,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":5948,"byte_end":5951,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"! // other time zone objects can be used to construct a local datetime.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":5952,"byte_end":6025,"line_start":146,"line_end":146,"column_start":1,"column_end":74}},{"value":"! // obviously, `local_dt` is normally different from `dt`, but `fixed_dt` should be identical.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6026,"byte_end":6123,"line_start":147,"line_end":147,"column_start":1,"column_end":98}},{"value":"! let local_dt = Local.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6124,"byte_end":6194,"line_start":148,"line_end":148,"column_start":1,"column_end":71}},{"value":"! let fixed_dt = FixedOffset::east(9 * 3600).ymd(2014, 7, 8).and_hms_milli(18, 10, 11, 12);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6195,"byte_end":6288,"line_start":149,"line_end":149,"column_start":1,"column_end":94}},{"value":"! assert_eq!(dt, fixed_dt);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6289,"byte_end":6318,"line_start":150,"line_end":150,"column_start":1,"column_end":30}},{"value":"! # let _ = local_dt;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6319,"byte_end":6342,"line_start":151,"line_end":151,"column_start":1,"column_end":24}},{"value":"! ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6343,"byte_end":6350,"line_start":152,"line_end":152,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6351,"byte_end":6354,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"! Various properties are available to the date and time, and can be altered individually.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6355,"byte_end":6446,"line_start":154,"line_end":154,"column_start":1,"column_end":92}},{"value":"! Most of them are defined in the traits [`Datelike`](./trait.Datelike.html) and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6447,"byte_end":6529,"line_start":155,"line_end":155,"column_start":1,"column_end":83}},{"value":"! [`Timelike`](./trait.Timelike.html) which you should `use` before.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6530,"byte_end":6600,"line_start":156,"line_end":156,"column_start":1,"column_end":71}},{"value":"! Addition and subtraction is also supported.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6601,"byte_end":6648,"line_start":157,"line_end":157,"column_start":1,"column_end":48}},{"value":"! The following illustrates most supported operations to the date and time:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6649,"byte_end":6726,"line_start":158,"line_end":158,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6727,"byte_end":6730,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6731,"byte_end":6742,"line_start":160,"line_end":160,"column_start":1,"column_end":12}},{"value":"! # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6743,"byte_end":6800,"line_start":161,"line_end":161,"column_start":1,"column_end":58}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6801,"byte_end":6828,"line_start":162,"line_end":162,"column_start":1,"column_end":28}},{"value":"! use time::Duration;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6829,"byte_end":6852,"line_start":163,"line_end":163,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6853,"byte_end":6856,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"! # /* we intentionally fake the datetime...","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6857,"byte_end":6903,"line_start":165,"line_end":165,"column_start":1,"column_end":47}},{"value":"! // assume this returned `2014-11-28T21:45:59.324310806+09:00`:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6904,"byte_end":6970,"line_start":166,"line_end":166,"column_start":1,"column_end":67}},{"value":"! let dt = Local::now();","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6971,"byte_end":6997,"line_start":167,"line_end":167,"column_start":1,"column_end":27}},{"value":"! # */ // up to here. we now define a fixed datetime for the illustrative purpose.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":6998,"byte_end":7082,"line_start":168,"line_end":168,"column_start":1,"column_end":85}},{"value":"! # let dt = FixedOffset::east(9*3600).ymd(2014, 11, 28).and_hms_nano(21, 45, 59, 324310806);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":7083,"byte_end":7178,"line_start":169,"line_end":169,"column_start":1,"column_end":96}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":7179,"byte_end":7182,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"! // property accessors","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":7183,"byte_end":7208,"line_start":171,"line_end":171,"column_start":1,"column_end":26}},{"value":"! assert_eq!((dt.year(), dt.month(), dt.day()), (2014, 11, 28));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":7209,"byte_end":7275,"line_start":172,"line_end":172,"column_start":1,"column_end":67}},{"value":"! assert_eq!((dt.month0(), dt.day0()), (10, 27)); // for unfortunate souls","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":7276,"byte_end":7352,"line_start":173,"line_end":173,"column_start":1,"column_end":77}},{"value":"! assert_eq!((dt.hour(), dt.minute(), dt.second()), (21, 45, 59));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":7353,"byte_end":7421,"line_start":174,"line_end":174,"column_start":1,"column_end":69}},{"value":"! assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":7422,"byte_end":7465,"line_start":175,"line_end":175,"column_start":1,"column_end":44}},{"value":"! assert_eq!(dt.weekday().number_from_monday(), 5); // Mon=1, ..., Sat=7","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":7466,"byte_end":7540,"line_start":176,"line_end":176,"column_start":1,"column_end":75}},{"value":"! assert_eq!(dt.ordinal(), 332); // the day of year","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":7541,"byte_end":7594,"line_start":177,"line_end":177,"column_start":1,"column_end":54}},{"value":"! assert_eq!(dt.num_days_from_ce(), 735565); // the number of days from and including Jan 1, 1","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":7595,"byte_end":7691,"line_start":178,"line_end":178,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":7692,"byte_end":7695,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"! // time zone accessor and manipulation","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":7696,"byte_end":7738,"line_start":180,"line_end":180,"column_start":1,"column_end":43}},{"value":"! assert_eq!(dt.offset().fix().local_minus_utc(), 9 * 3600);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":7739,"byte_end":7801,"line_start":181,"line_end":181,"column_start":1,"column_end":63}},{"value":"! assert_eq!(dt.timezone(), FixedOffset::east(9 * 3600));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":7802,"byte_end":7861,"line_start":182,"line_end":182,"column_start":1,"column_end":60}},{"value":"! assert_eq!(dt.with_timezone(&Utc), Utc.ymd(2014, 11, 28).and_hms_nano(12, 45, 59, 324310806));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":7862,"byte_end":7960,"line_start":183,"line_end":183,"column_start":1,"column_end":99}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":7961,"byte_end":7964,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"! // a sample of property manipulations (validates dynamically)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":7965,"byte_end":8030,"line_start":185,"line_end":185,"column_start":1,"column_end":66}},{"value":"! assert_eq!(dt.with_day(29).unwrap().weekday(), Weekday::Sat); // 2014-11-29 is Saturday","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":8031,"byte_end":8122,"line_start":186,"line_end":186,"column_start":1,"column_end":92}},{"value":"! assert_eq!(dt.with_day(32), None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":8123,"byte_end":8161,"line_start":187,"line_end":187,"column_start":1,"column_end":39}},{"value":"! assert_eq!(dt.with_year(-300).unwrap().num_days_from_ce(), -109606); // November 29, 301 BCE","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":8162,"byte_end":8258,"line_start":188,"line_end":188,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":8259,"byte_end":8262,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"! // arithmetic operations","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":8263,"byte_end":8291,"line_start":190,"line_end":190,"column_start":1,"column_end":29}},{"value":"! let dt1 = Utc.ymd(2014, 11, 14).and_hms(8, 9, 10);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":8292,"byte_end":8346,"line_start":191,"line_end":191,"column_start":1,"column_end":55}},{"value":"! let dt2 = Utc.ymd(2014, 11, 14).and_hms(10, 9, 8);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":8347,"byte_end":8401,"line_start":192,"line_end":192,"column_start":1,"column_end":55}},{"value":"! assert_eq!(dt1.signed_duration_since(dt2), Duration::seconds(-2 * 3600 + 2));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":8402,"byte_end":8483,"line_start":193,"line_end":193,"column_start":1,"column_end":82}},{"value":"! assert_eq!(dt2.signed_duration_since(dt1), Duration::seconds(2 * 3600 - 2));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":8484,"byte_end":8564,"line_start":194,"line_end":194,"column_start":1,"column_end":81}},{"value":"! assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) + Duration::seconds(1_000_000_000),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":8565,"byte_end":8652,"line_start":195,"line_end":195,"column_start":1,"column_end":88}},{"value":"!            Utc.ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":8653,"byte_end":8708,"line_start":196,"line_end":196,"column_start":1,"column_end":56}},{"value":"! assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) - Duration::seconds(1_000_000_000),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":8709,"byte_end":8796,"line_start":197,"line_end":197,"column_start":1,"column_end":88}},{"value":"!            Utc.ymd(1938, 4, 24).and_hms(22, 13, 20));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":8797,"byte_end":8854,"line_start":198,"line_end":198,"column_start":1,"column_end":58}},{"value":"! # }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":8855,"byte_end":8862,"line_start":199,"line_end":199,"column_start":1,"column_end":8}},{"value":"! ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":8863,"byte_end":8870,"line_start":200,"line_end":200,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":8871,"byte_end":8874,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"! ### Formatting and Parsing","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":8875,"byte_end":8905,"line_start":202,"line_end":202,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":8906,"byte_end":8909,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"! Formatting is done via the [`format`](./struct.DateTime.html#method.format) method,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":8910,"byte_end":8997,"line_start":204,"line_end":204,"column_start":1,"column_end":88}},{"value":"! which format is equivalent to the familiar `strftime` format.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":8998,"byte_end":9063,"line_start":205,"line_end":205,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":9064,"byte_end":9067,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"! See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":9068,"byte_end":9137,"line_start":207,"line_end":207,"column_start":1,"column_end":70}},{"value":"! documentation for full syntax and list of specifiers.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":9138,"byte_end":9195,"line_start":208,"line_end":208,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":9196,"byte_end":9199,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"! The default `to_string` method and `{:?}` specifier also give a reasonable representation.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":9200,"byte_end":9294,"line_start":210,"line_end":210,"column_start":1,"column_end":95}},{"value":"! Chrono also provides [`to_rfc2822`](./struct.DateTime.html#method.to_rfc2822) and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":9295,"byte_end":9380,"line_start":211,"line_end":211,"column_start":1,"column_end":86}},{"value":"! [`to_rfc3339`](./struct.DateTime.html#method.to_rfc3339) methods","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":9381,"byte_end":9449,"line_start":212,"line_end":212,"column_start":1,"column_end":69}},{"value":"! for well-known formats.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":9450,"byte_end":9477,"line_start":213,"line_end":213,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":9478,"byte_end":9481,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":9482,"byte_end":9493,"line_start":215,"line_end":215,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":9494,"byte_end":9521,"line_start":216,"line_end":216,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":9522,"byte_end":9525,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"! let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":9526,"byte_end":9579,"line_start":218,"line_end":218,"column_start":1,"column_end":54}},{"value":"! assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2014-11-28 12:00:09\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":9580,"byte_end":9662,"line_start":219,"line_end":219,"column_start":1,"column_end":83}},{"value":"! assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), \"Fri Nov 28 12:00:09 2014\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":9663,"byte_end":9747,"line_start":220,"line_end":220,"column_start":1,"column_end":85}},{"value":"! assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), dt.format(\"%c\").to_string());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":9748,"byte_end":9833,"line_start":221,"line_end":221,"column_start":1,"column_end":86}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":9834,"byte_end":9837,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"! assert_eq!(dt.to_string(), \"2014-11-28 12:00:09 UTC\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":9838,"byte_end":9896,"line_start":223,"line_end":223,"column_start":1,"column_end":59}},{"value":"! assert_eq!(dt.to_rfc2822(), \"Fri, 28 Nov 2014 12:00:09 +0000\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":9897,"byte_end":9964,"line_start":224,"line_end":224,"column_start":1,"column_end":68}},{"value":"! assert_eq!(dt.to_rfc3339(), \"2014-11-28T12:00:09+00:00\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":9965,"byte_end":10026,"line_start":225,"line_end":225,"column_start":1,"column_end":62}},{"value":"! assert_eq!(format!(\"{:?}\", dt), \"2014-11-28T12:00:09Z\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":10027,"byte_end":10087,"line_start":226,"line_end":226,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":10088,"byte_end":10091,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"! // Note that milli/nanoseconds are only printed if they are non-zero","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":10092,"byte_end":10164,"line_start":228,"line_end":228,"column_start":1,"column_end":73}},{"value":"! let dt_nano = Utc.ymd(2014, 11, 28).and_hms_nano(12, 0, 9, 1);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":10165,"byte_end":10231,"line_start":229,"line_end":229,"column_start":1,"column_end":67}},{"value":"! assert_eq!(format!(\"{:?}\", dt_nano), \"2014-11-28T12:00:09.000000001Z\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":10232,"byte_end":10307,"line_start":230,"line_end":230,"column_start":1,"column_end":76}},{"value":"! ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":10308,"byte_end":10315,"line_start":231,"line_end":231,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":10316,"byte_end":10319,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"! Parsing can be done with three methods:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":10320,"byte_end":10363,"line_start":233,"line_end":233,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":10364,"byte_end":10367,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"! 1. The standard [`FromStr`](https://doc.rust-lang.org/std/str/trait.FromStr.html) trait","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":10368,"byte_end":10459,"line_start":235,"line_end":235,"column_start":1,"column_end":92}},{"value":"!    (and [`parse`](https://doc.rust-lang.org/std/primitive.str.html#method.parse) method","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":10460,"byte_end":10551,"line_start":236,"line_end":236,"column_start":1,"column_end":92}},{"value":"!    on a string) can be used for parsing `DateTime<FixedOffset>`, `DateTime<Utc>` and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":10552,"byte_end":10640,"line_start":237,"line_end":237,"column_start":1,"column_end":89}},{"value":"!    `DateTime<Local>` values. This parses what the `{:?}`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":10641,"byte_end":10701,"line_start":238,"line_end":238,"column_start":1,"column_end":61}},{"value":"!    ([`std::fmt::Debug`](https://doc.rust-lang.org/std/fmt/trait.Debug.html))","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":10702,"byte_end":10782,"line_start":239,"line_end":239,"column_start":1,"column_end":81}},{"value":"!    format specifier prints, and requires the offset to be present.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":10783,"byte_end":10853,"line_start":240,"line_end":240,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":10854,"byte_end":10857,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"! 2. [`DateTime::parse_from_str`](./struct.DateTime.html#method.parse_from_str) parses","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":10858,"byte_end":10946,"line_start":242,"line_end":242,"column_start":1,"column_end":89}},{"value":"!    a date and time with offsets and returns `DateTime<FixedOffset>`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":10947,"byte_end":11019,"line_start":243,"line_end":243,"column_start":1,"column_end":73}},{"value":"!    This should be used when the offset is a part of input and the caller cannot guess that.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":11020,"byte_end":11115,"line_start":244,"line_end":244,"column_start":1,"column_end":96}},{"value":"!    It *cannot* be used when the offset can be missing.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":11116,"byte_end":11174,"line_start":245,"line_end":245,"column_start":1,"column_end":59}},{"value":"!    [`DateTime::parse_from_rfc2822`](./struct.DateTime.html#method.parse_from_rfc2822)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":11175,"byte_end":11264,"line_start":246,"line_end":246,"column_start":1,"column_end":90}},{"value":"!    and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":11265,"byte_end":11275,"line_start":247,"line_end":247,"column_start":1,"column_end":11}},{"value":"!    [`DateTime::parse_from_rfc3339`](./struct.DateTime.html#method.parse_from_rfc3339)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":11276,"byte_end":11365,"line_start":248,"line_end":248,"column_start":1,"column_end":90}},{"value":"!    are similar but for well-known formats.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":11366,"byte_end":11412,"line_start":249,"line_end":249,"column_start":1,"column_end":47}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":11413,"byte_end":11416,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"! 3. [`Offset::datetime_from_str`](./offset/trait.TimeZone.html#method.datetime_from_str) is","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":11417,"byte_end":11511,"line_start":251,"line_end":251,"column_start":1,"column_end":95}},{"value":"!    similar but returns `DateTime` of given offset.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":11512,"byte_end":11566,"line_start":252,"line_end":252,"column_start":1,"column_end":55}},{"value":"!    When the explicit offset is missing from the input, it simply uses given offset.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":11567,"byte_end":11654,"line_start":253,"line_end":253,"column_start":1,"column_end":88}},{"value":"!    It issues an error when the input contains an explicit offset different","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":11655,"byte_end":11733,"line_start":254,"line_end":254,"column_start":1,"column_end":79}},{"value":"!    from the current offset.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":11734,"byte_end":11765,"line_start":255,"line_end":255,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":11766,"byte_end":11769,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"! More detailed control over the parsing process is available via","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":11770,"byte_end":11837,"line_start":257,"line_end":257,"column_start":1,"column_end":68}},{"value":"! [`format`](./format/index.html) module.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":11838,"byte_end":11881,"line_start":258,"line_end":258,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":11882,"byte_end":11885,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":11886,"byte_end":11897,"line_start":260,"line_end":260,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":11898,"byte_end":11925,"line_start":261,"line_end":261,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":11926,"byte_end":11929,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"! let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":11930,"byte_end":11983,"line_start":263,"line_end":263,"column_start":1,"column_end":54}},{"value":"! let fixed_dt = dt.with_timezone(&FixedOffset::east(9*3600));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":11984,"byte_end":12048,"line_start":264,"line_end":264,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":12049,"byte_end":12052,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"! // method 1","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":12053,"byte_end":12068,"line_start":266,"line_end":266,"column_start":1,"column_end":16}},{"value":"! assert_eq!(\"2014-11-28T12:00:09Z\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":12069,"byte_end":12149,"line_start":267,"line_end":267,"column_start":1,"column_end":81}},{"value":"! assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":12150,"byte_end":12235,"line_start":268,"line_end":268,"column_start":1,"column_end":86}},{"value":"! assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<FixedOffset>>(), Ok(fixed_dt.clone()));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":12236,"byte_end":12335,"line_start":269,"line_end":269,"column_start":1,"column_end":100}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":12336,"byte_end":12339,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"! // method 2","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":12340,"byte_end":12355,"line_start":271,"line_end":271,"column_start":1,"column_end":16}},{"value":"! assert_eq!(DateTime::parse_from_str(\"2014-11-28 21:00:09 +09:00\", \"%Y-%m-%d %H:%M:%S %z\"),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":12356,"byte_end":12450,"line_start":272,"line_end":272,"column_start":1,"column_end":95}},{"value":"!            Ok(fixed_dt.clone()));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":12451,"byte_end":12488,"line_start":273,"line_end":273,"column_start":1,"column_end":38}},{"value":"! assert_eq!(DateTime::parse_from_rfc2822(\"Fri, 28 Nov 2014 21:00:09 +0900\"),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":12489,"byte_end":12568,"line_start":274,"line_end":274,"column_start":1,"column_end":80}},{"value":"!            Ok(fixed_dt.clone()));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":12569,"byte_end":12606,"line_start":275,"line_end":275,"column_start":1,"column_end":38}},{"value":"! assert_eq!(DateTime::parse_from_rfc3339(\"2014-11-28T21:00:09+09:00\"), Ok(fixed_dt.clone()));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":12607,"byte_end":12703,"line_start":276,"line_end":276,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":12704,"byte_end":12707,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"! // method 3","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":12708,"byte_end":12723,"line_start":278,"line_end":278,"column_start":1,"column_end":16}},{"value":"! assert_eq!(Utc.datetime_from_str(\"2014-11-28 12:00:09\", \"%Y-%m-%d %H:%M:%S\"), Ok(dt.clone()));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":12724,"byte_end":12822,"line_start":279,"line_end":279,"column_start":1,"column_end":99}},{"value":"! assert_eq!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\"), Ok(dt.clone()));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":12823,"byte_end":12923,"line_start":280,"line_end":280,"column_start":1,"column_end":101}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":12924,"byte_end":12927,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"! // oops, the year is missing!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":12928,"byte_end":12961,"line_start":282,"line_end":282,"column_start":1,"column_end":34}},{"value":"! assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":12962,"byte_end":13047,"line_start":283,"line_end":283,"column_start":1,"column_end":86}},{"value":"! // oops, the format string does not include the year at all!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":13048,"byte_end":13112,"line_start":284,"line_end":284,"column_start":1,"column_end":65}},{"value":"! assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T\").is_err());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":13113,"byte_end":13195,"line_start":285,"line_end":285,"column_start":1,"column_end":83}},{"value":"! // oops, the weekday is incorrect!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":13196,"byte_end":13234,"line_start":286,"line_end":286,"column_start":1,"column_end":39}},{"value":"! assert!(Utc.datetime_from_str(\"Sat Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":13235,"byte_end":13325,"line_start":287,"line_end":287,"column_start":1,"column_end":91}},{"value":"! ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":13326,"byte_end":13333,"line_start":288,"line_end":288,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":13334,"byte_end":13337,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"! Again : See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":13338,"byte_end":13415,"line_start":290,"line_end":290,"column_start":1,"column_end":78}},{"value":"! documentation for full syntax and list of specifiers.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":13416,"byte_end":13473,"line_start":291,"line_end":291,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":13474,"byte_end":13477,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"! ### Conversion from and to EPOCH timestamps","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":13478,"byte_end":13525,"line_start":293,"line_end":293,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":13526,"byte_end":13529,"line_start":294,"line_end":294,"column_start":1,"column_end":4}},{"value":"! Use [`Utc.timestamp(seconds, nanoseconds)`](./offset/trait.TimeZone.html#method.timestamp)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":13530,"byte_end":13624,"line_start":295,"line_end":295,"column_start":1,"column_end":95}},{"value":"! to construct a [`DateTime<Utc>`](./struct.DateTime.html) from a UNIX timestamp","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":13625,"byte_end":13707,"line_start":296,"line_end":296,"column_start":1,"column_end":83}},{"value":"! (seconds, nanoseconds that passed since January 1st 1970).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":13708,"byte_end":13770,"line_start":297,"line_end":297,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":13771,"byte_end":13774,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"! Use [`DateTime.timestamp`](./struct.DateTime.html#method.timestamp) to get the timestamp (in seconds)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":13775,"byte_end":13880,"line_start":299,"line_end":299,"column_start":1,"column_end":106}},{"value":"! from a [`DateTime`](./struct.DateTime.html). Additionally, you can use","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":13881,"byte_end":13955,"line_start":300,"line_end":300,"column_start":1,"column_end":75}},{"value":"! [`DateTime.timestamp_subsec_nanos`](./struct.DateTime.html#method.timestamp_subsec_nanos)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":13956,"byte_end":14049,"line_start":301,"line_end":301,"column_start":1,"column_end":94}},{"value":"! to get the number of additional number of nanoseconds.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14050,"byte_end":14108,"line_start":302,"line_end":302,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14109,"byte_end":14112,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14113,"byte_end":14124,"line_start":304,"line_end":304,"column_start":1,"column_end":12}},{"value":"! # use chrono::DateTime;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14125,"byte_end":14152,"line_start":305,"line_end":305,"column_start":1,"column_end":28}},{"value":"! # use chrono::Utc;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14153,"byte_end":14175,"line_start":306,"line_end":306,"column_start":1,"column_end":23}},{"value":"! // We need the trait in scope to use Utc::timestamp().","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14176,"byte_end":14234,"line_start":307,"line_end":307,"column_start":1,"column_end":59}},{"value":"! use chrono::TimeZone;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14235,"byte_end":14260,"line_start":308,"line_end":308,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14261,"byte_end":14264,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"! // Construct a datetime from epoch:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14265,"byte_end":14304,"line_start":310,"line_end":310,"column_start":1,"column_end":40}},{"value":"! let dt = Utc.timestamp(1_500_000_000, 0);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14305,"byte_end":14350,"line_start":311,"line_end":311,"column_start":1,"column_end":46}},{"value":"! assert_eq!(dt.to_rfc2822(), \"Fri, 14 Jul 2017 02:40:00 +0000\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14351,"byte_end":14418,"line_start":312,"line_end":312,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14419,"byte_end":14422,"line_start":313,"line_end":313,"column_start":1,"column_end":4}},{"value":"! // Get epoch value from a datetime:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14423,"byte_end":14462,"line_start":314,"line_end":314,"column_start":1,"column_end":40}},{"value":"! let dt = DateTime::parse_from_rfc2822(\"Fri, 14 Jul 2017 02:40:00 +0000\").unwrap();","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14463,"byte_end":14549,"line_start":315,"line_end":315,"column_start":1,"column_end":87}},{"value":"! assert_eq!(dt.timestamp(), 1_500_000_000);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14550,"byte_end":14596,"line_start":316,"line_end":316,"column_start":1,"column_end":47}},{"value":"! ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14597,"byte_end":14604,"line_start":317,"line_end":317,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14605,"byte_end":14608,"line_start":318,"line_end":318,"column_start":1,"column_end":4}},{"value":"! ### Individual date","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14609,"byte_end":14632,"line_start":319,"line_end":319,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14633,"byte_end":14636,"line_start":320,"line_end":320,"column_start":1,"column_end":4}},{"value":"! Chrono also provides an individual date type ([**`Date`**](./struct.Date.html)).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14637,"byte_end":14721,"line_start":321,"line_end":321,"column_start":1,"column_end":85}},{"value":"! It also has time zones attached, and have to be constructed via time zones.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14722,"byte_end":14801,"line_start":322,"line_end":322,"column_start":1,"column_end":80}},{"value":"! Most operations available to `DateTime` are also available to `Date` whenever appropriate.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14802,"byte_end":14896,"line_start":323,"line_end":323,"column_start":1,"column_end":95}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14897,"byte_end":14900,"line_start":324,"line_end":324,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14901,"byte_end":14912,"line_start":325,"line_end":325,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14913,"byte_end":14940,"line_start":326,"line_end":326,"column_start":1,"column_end":28}},{"value":"! use chrono::offset::LocalResult;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14941,"byte_end":14977,"line_start":327,"line_end":327,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14978,"byte_end":14981,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"! # // these *may* fail, but only very rarely. just rerun the test if you were that unfortunate ;)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":14982,"byte_end":15082,"line_start":329,"line_end":329,"column_start":1,"column_end":101}},{"value":"! assert_eq!(Utc::today(), Utc::now().date());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":15083,"byte_end":15131,"line_start":330,"line_end":330,"column_start":1,"column_end":49}},{"value":"! assert_eq!(Local::today(), Local::now().date());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":15132,"byte_end":15184,"line_start":331,"line_end":331,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":15185,"byte_end":15188,"line_start":332,"line_end":332,"column_start":1,"column_end":4}},{"value":"! assert_eq!(Utc.ymd(2014, 11, 28).weekday(), Weekday::Fri);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":15189,"byte_end":15251,"line_start":333,"line_end":333,"column_start":1,"column_end":63}},{"value":"! assert_eq!(Utc.ymd_opt(2014, 11, 31), LocalResult::None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":15252,"byte_end":15313,"line_start":334,"line_end":334,"column_start":1,"column_end":62}},{"value":"! assert_eq!(Utc.ymd(2014, 11, 28).and_hms_milli(7, 8, 9, 10).format(\"%H%M%S\").to_string(),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":15314,"byte_end":15407,"line_start":335,"line_end":335,"column_start":1,"column_end":94}},{"value":"!            \"070809\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":15408,"byte_end":15433,"line_start":336,"line_end":336,"column_start":1,"column_end":26}},{"value":"! ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":15434,"byte_end":15441,"line_start":337,"line_end":337,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":15442,"byte_end":15445,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"! There is no timezone-aware `Time` due to the lack of usefulness and also the complexity.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":15446,"byte_end":15538,"line_start":339,"line_end":339,"column_start":1,"column_end":93}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":15539,"byte_end":15542,"line_start":340,"line_end":340,"column_start":1,"column_end":4}},{"value":"! `DateTime` has [`date`](./struct.DateTime.html#method.date) method","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":15543,"byte_end":15613,"line_start":341,"line_end":341,"column_start":1,"column_end":71}},{"value":"! which returns a `Date` which represents its date component.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":15614,"byte_end":15677,"line_start":342,"line_end":342,"column_start":1,"column_end":64}},{"value":"! There is also a [`time`](./struct.DateTime.html#method.time) method,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":15678,"byte_end":15750,"line_start":343,"line_end":343,"column_start":1,"column_end":73}},{"value":"! which simply returns a naive local time described below.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":15751,"byte_end":15811,"line_start":344,"line_end":344,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":15812,"byte_end":15815,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"! ### Naive date and time","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":15816,"byte_end":15843,"line_start":346,"line_end":346,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":15844,"byte_end":15847,"line_start":347,"line_end":347,"column_start":1,"column_end":4}},{"value":"! Chrono provides naive counterparts to `Date`, (non-existent) `Time` and `DateTime`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":15848,"byte_end":15934,"line_start":348,"line_end":348,"column_start":1,"column_end":87}},{"value":"! as [**`NaiveDate`**](./naive/struct.NaiveDate.html),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":15935,"byte_end":15991,"line_start":349,"line_end":349,"column_start":1,"column_end":57}},{"value":"! [**`NaiveTime`**](./naive/struct.NaiveTime.html) and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":15992,"byte_end":16048,"line_start":350,"line_end":350,"column_start":1,"column_end":57}},{"value":"! [**`NaiveDateTime`**](./naive/struct.NaiveDateTime.html) respectively.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":16049,"byte_end":16123,"line_start":351,"line_end":351,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":16124,"byte_end":16127,"line_start":352,"line_end":352,"column_start":1,"column_end":4}},{"value":"! They have almost equivalent interfaces as their timezone-aware twins,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":16128,"byte_end":16201,"line_start":353,"line_end":353,"column_start":1,"column_end":74}},{"value":"! but are not associated to time zones obviously and can be quite low-level.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":16202,"byte_end":16280,"line_start":354,"line_end":354,"column_start":1,"column_end":79}},{"value":"! They are mostly useful for building blocks for higher-level types.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":16281,"byte_end":16351,"line_start":355,"line_end":355,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":16352,"byte_end":16355,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"! Timezone-aware `DateTime` and `Date` types have two methods returning naive versions:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":16356,"byte_end":16445,"line_start":357,"line_end":357,"column_start":1,"column_end":90}},{"value":"! [`naive_local`](./struct.DateTime.html#method.naive_local) returns","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":16446,"byte_end":16516,"line_start":358,"line_end":358,"column_start":1,"column_end":71}},{"value":"! a view to the naive local time,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":16517,"byte_end":16552,"line_start":359,"line_end":359,"column_start":1,"column_end":36}},{"value":"! and [`naive_utc`](./struct.DateTime.html#method.naive_utc) returns","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":16553,"byte_end":16623,"line_start":360,"line_end":360,"column_start":1,"column_end":71}},{"value":"! a view to the naive UTC time.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":16624,"byte_end":16657,"line_start":361,"line_end":361,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":16658,"byte_end":16661,"line_start":362,"line_end":362,"column_start":1,"column_end":4}},{"value":"! ## Limitations","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":16662,"byte_end":16680,"line_start":363,"line_end":363,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":16681,"byte_end":16684,"line_start":364,"line_end":364,"column_start":1,"column_end":4}},{"value":"! Only proleptic Gregorian calendar (i.e. extended to support older dates) is supported.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":16685,"byte_end":16775,"line_start":365,"line_end":365,"column_start":1,"column_end":91}},{"value":"! Be very careful if you really have to deal with pre-20C dates, they can be in Julian or others.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":16776,"byte_end":16875,"line_start":366,"line_end":366,"column_start":1,"column_end":100}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":16876,"byte_end":16879,"line_start":367,"line_end":367,"column_start":1,"column_end":4}},{"value":"! Date types are limited in about +/- 262,000 years from the common epoch.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":16880,"byte_end":16956,"line_start":368,"line_end":368,"column_start":1,"column_end":77}},{"value":"! Time types are limited in the nanosecond accuracy.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":16957,"byte_end":17011,"line_start":369,"line_end":369,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":17012,"byte_end":17015,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"! [Leap seconds are supported in the representation but","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":17016,"byte_end":17073,"line_start":371,"line_end":371,"column_start":1,"column_end":58}},{"value":"! Chrono doesn't try to make use of them](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":17074,"byte_end":17170,"line_start":372,"line_end":372,"column_start":1,"column_end":97}},{"value":"! (The main reason is that leap seconds are not really predictable.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":17171,"byte_end":17241,"line_start":373,"line_end":373,"column_start":1,"column_end":71}},{"value":"! Almost *every* operation over the possible leap seconds will ignore them.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":17242,"byte_end":17319,"line_start":374,"line_end":374,"column_start":1,"column_end":78}},{"value":"! Consider using `NaiveDateTime` with the implicit TAI (International Atomic Time) scale","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":17320,"byte_end":17410,"line_start":375,"line_end":375,"column_start":1,"column_end":91}},{"value":"! if you want.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":17411,"byte_end":17427,"line_start":376,"line_end":376,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":17428,"byte_end":17431,"line_start":377,"line_end":377,"column_start":1,"column_end":4}},{"value":"! Chrono inherently does not support an inaccurate or partial date and time representation.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":17432,"byte_end":17525,"line_start":378,"line_end":378,"column_start":1,"column_end":94}},{"value":"! Any operation that can be ambiguous will return `None` in such cases.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":17526,"byte_end":17599,"line_start":379,"line_end":379,"column_start":1,"column_end":74}},{"value":"! For example, \"a month later\" of 2014-01-30 is not well-defined","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":17600,"byte_end":17666,"line_start":380,"line_end":380,"column_start":1,"column_end":67}},{"value":"! and consequently `Utc.ymd(2014, 1, 30).with_month(2)` returns `None`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":17667,"byte_end":17740,"line_start":381,"line_end":381,"column_start":1,"column_end":74}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":17741,"byte_end":17744,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"! Advanced time zone handling is not yet supported.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":17745,"byte_end":17798,"line_start":383,"line_end":383,"column_start":1,"column_end":54}},{"value":"! For now you can try the [Chrono-tz](https://github.com/chronotope/chrono-tz/) crate instead.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":17799,"byte_end":17895,"line_start":384,"line_end":384,"column_start":1,"column_end":97}},{"value":"deny(missing_docs)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":18033,"byte_end":18055,"line_start":389,"line_end":389,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":18056,"byte_end":18095,"line_start":390,"line_end":390,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":30},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19613,"byte_end":19620,"line_start":432,"line_end":432,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":50}],"decl_id":null,"docs":" A convenience module appropriate for glob imports (`use chrono::prelude::*;`).\n","sig":null,"attributes":[{"value":"/ A convenience module appropriate for glob imports (`use chrono::prelude::*;`).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":19522,"byte_end":19604,"line_start":431,"line_end":431,"column_start":1,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":58},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"offset","qualname":"::offset","value":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":1327},{"krate":0,"index":1347},{"krate":0,"index":1341},{"krate":0,"index":1343},{"krate":0,"index":1338},{"krate":0,"index":73},{"krate":0,"index":81},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":117},{"krate":0,"index":147},{"krate":0,"index":206},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244}],"decl_id":null,"docs":" The time zone, which calculates offsets from the local time to UTC.","sig":null,"attributes":[{"value":"! The time zone, which calculates offsets from the local time to UTC.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":39241,"byte_end":39312,"line_start":4,"line_end":4,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":39313,"byte_end":39316,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! There are four operations provided by the `TimeZone` trait:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":39317,"byte_end":39380,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":39381,"byte_end":39384,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! 1. Converting the local `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":39385,"byte_end":39446,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"! 2. Converting the UTC `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":39447,"byte_end":39506,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"! 3. Converting `DateTime<Tz>` to the local `NaiveDateTime`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":39507,"byte_end":39568,"line_start":10,"line_end":10,"column_start":1,"column_end":62}},{"value":"! 4. Constructing `DateTime<Tz>` objects from various offsets","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":39569,"byte_end":39632,"line_start":11,"line_end":11,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":39633,"byte_end":39636,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! 1 is used for constructors. 2 is used for the `with_timezone` method of date and time types.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":39637,"byte_end":39733,"line_start":13,"line_end":13,"column_start":1,"column_end":97}},{"value":"! 3 is used for other methods, e.g. `year()` or `format()`, and provided by an associated type","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":39734,"byte_end":39830,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"! which implements `Offset` (which then passed to `TimeZone` for actual implementations).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":39831,"byte_end":39922,"line_start":15,"line_end":15,"column_start":1,"column_end":92}},{"value":"! Technically speaking `TimeZone` has a total knowledge about given timescale,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":39923,"byte_end":40003,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"! but `Offset` is used as a cache to avoid the repeated conversion","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":40004,"byte_end":40072,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"! and provides implementations for 1 and 3.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":40073,"byte_end":40118,"line_start":18,"line_end":18,"column_start":1,"column_end":46}},{"value":"! An `TimeZone` instance can be reconstructed from the corresponding `Offset` instance.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":40119,"byte_end":40208,"line_start":19,"line_end":19,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1329},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":40645,"byte_end":40649,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"None","qualname":"::offset::LocalResult::None","value":"LocalResult::None","parent":{"krate":0,"index":1327},"children":[],"decl_id":null,"docs":" Given local time representation is invalid.\n This can occur when, for example, the positive timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation is invalid.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":40517,"byte_end":40564,"line_start":31,"line_end":31,"column_start":5,"column_end":52}},{"value":"/ This can occur when, for example, the positive timezone transition.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":40569,"byte_end":40640,"line_start":32,"line_end":32,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1331},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":40723,"byte_end":40729,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Single","qualname":"::offset::LocalResult::Single","value":"LocalResult::Single(T)","parent":{"krate":0,"index":1327},"children":[],"decl_id":null,"docs":" Given local time representation has a single unique result.\n","sig":null,"attributes":[{"value":"/ Given local time representation has a single unique result.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":40655,"byte_end":40718,"line_start":34,"line_end":34,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1334},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":40895,"byte_end":40904,"line_start":38,"line_end":38,"column_start":5,"column_end":14},"name":"Ambiguous","qualname":"::offset::LocalResult::Ambiguous","value":"LocalResult::Ambiguous(T, T)","parent":{"krate":0,"index":1327},"children":[],"decl_id":null,"docs":" Given local time representation has multiple results and thus ambiguous.\n This can occur when, for example, the negative timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation has multiple results and thus ambiguous.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":40738,"byte_end":40814,"line_start":36,"line_end":36,"column_start":5,"column_end":81}},{"value":"/ This can occur when, for example, the negative timezone transition.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":40819,"byte_end":40890,"line_start":37,"line_end":37,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":1327},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":40496,"byte_end":40507,"line_start":30,"line_end":30,"column_start":10,"column_end":21},"name":"LocalResult","qualname":"::offset::LocalResult","value":"LocalResult::{None, Single, Ambiguous}","parent":null,"children":[{"krate":0,"index":1329},{"krate":0,"index":1331},{"krate":0,"index":1334}],"decl_id":null,"docs":" The conversion result from the local time to the timezone-aware datetime types.\n","sig":null,"attributes":[{"value":"/ The conversion result from the local time to the timezone-aware datetime types.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":40368,"byte_end":40451,"line_start":28,"line_end":28,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":41054,"byte_end":41060,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"name":"single","qualname":"<LocalResult<T>>::single","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` only when the conversion result is unique, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `Some` only when the conversion result is unique, or `None` otherwise.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":40960,"byte_end":41042,"line_start":42,"line_end":42,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":41255,"byte_end":41263,"line_start":48,"line_end":48,"column_start":12,"column_end":20},"name":"earliest","qualname":"<LocalResult<T>>::earliest","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the earliest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the earliest possible conversion result, or `None` if none.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":41161,"byte_end":41243,"line_start":47,"line_end":47,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":41486,"byte_end":41492,"line_start":53,"line_end":53,"column_start":12,"column_end":18},"name":"latest","qualname":"<LocalResult<T>>::latest","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the latest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the latest possible conversion result, or `None` if none.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":41394,"byte_end":41474,"line_start":52,"line_end":52,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":41705,"byte_end":41708,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"map","qualname":"<LocalResult<T>>::map","value":"fn <U, F> (self, mut f: F) -> LocalResult<U>","parent":null,"children":[],"decl_id":null,"docs":" Maps a `LocalResult<T>` into `LocalResult<U>` with given function.\n","sig":null,"attributes":[{"value":"/ Maps a `LocalResult<T>` into `LocalResult<U>` with given function.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":41623,"byte_end":41693,"line_start":57,"line_end":57,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":42283,"byte_end":42291,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"and_time","qualname":"<LocalResult<Date<Tz>>>::and_time","value":"fn (self, time: NaiveTime) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":42058,"byte_end":42129,"line_start":68,"line_end":68,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":42134,"byte_end":42182,"line_start":69,"line_end":69,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":42187,"byte_end":42190,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":42195,"byte_end":42257,"line_start":71,"line_end":71,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":42262,"byte_end":42271,"line_start":72,"line_end":72,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":42795,"byte_end":42806,"line_start":86,"line_end":86,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_opt","value":"fn (self, hour: u32, min: u32, sec: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":42567,"byte_end":42641,"line_start":81,"line_end":81,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":42646,"byte_end":42694,"line_start":82,"line_end":82,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":42699,"byte_end":42702,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":42707,"byte_end":42769,"line_start":84,"line_end":84,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":42774,"byte_end":42783,"line_start":85,"line_end":85,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":43435,"byte_end":43452,"line_start":100,"line_end":100,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_milli_opt","value":"fn (self, hour: u32, min: u32, sec: u32, milli: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":43109,"byte_end":43196,"line_start":94,"line_end":94,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":43201,"byte_end":43281,"line_start":95,"line_end":95,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":43286,"byte_end":43334,"line_start":96,"line_end":96,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":43339,"byte_end":43342,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":43347,"byte_end":43409,"line_start":98,"line_end":98,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":43414,"byte_end":43423,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":44139,"byte_end":44156,"line_start":115,"line_end":115,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_micro_opt","value":"fn (self, hour: u32, min: u32, sec: u32, micro: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":43809,"byte_end":43896,"line_start":109,"line_end":109,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":43901,"byte_end":43985,"line_start":110,"line_end":110,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":43990,"byte_end":44038,"line_start":111,"line_end":111,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":44043,"byte_end":44046,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":44051,"byte_end":44113,"line_start":113,"line_end":113,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":44118,"byte_end":44127,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":44845,"byte_end":44861,"line_start":130,"line_end":130,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_nano_opt","value":"fn (self, hour: u32, min: u32, sec: u32, nano: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":44513,"byte_end":44599,"line_start":124,"line_end":124,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":44604,"byte_end":44691,"line_start":125,"line_end":125,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":44696,"byte_end":44744,"line_start":126,"line_end":126,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":44749,"byte_end":44752,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":44757,"byte_end":44819,"line_start":128,"line_end":128,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":44824,"byte_end":44833,"line_start":129,"line_end":129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":45337,"byte_end":45343,"line_start":143,"line_end":143,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<LocalResult<T>>::unwrap","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the single unique conversion result, or panics accordingly.\n","sig":null,"attributes":[{"value":"/ Returns the single unique conversion result, or panics accordingly.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":45254,"byte_end":45325,"line_start":142,"line_end":142,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":91},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":45697,"byte_end":45703,"line_start":155,"line_end":155,"column_start":11,"column_end":17},"name":"Offset","qualname":"::offset::Offset","value":"Offset: Sized + Clone + fmt::Debug","parent":null,"children":[{"krate":0,"index":92}],"decl_id":null,"docs":" The offset from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ The offset from the local time to UTC.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":45644,"byte_end":45686,"line_start":154,"line_end":154,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":45809,"byte_end":45812,"line_start":157,"line_end":157,"column_start":8,"column_end":11},"name":"fix","qualname":"::offset::Offset::fix","value":"fn (&self) -> FixedOffset","parent":{"krate":0,"index":91},"children":[],"decl_id":null,"docs":" Returns the fixed offset from UTC to the local time stored.\n","sig":null,"attributes":[{"value":"/ Returns the fixed offset from UTC to the local time stored.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":45738,"byte_end":45801,"line_start":156,"line_end":156,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":93},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46011,"byte_end":46019,"line_start":164,"line_end":164,"column_start":11,"column_end":19},"name":"TimeZone","qualname":"::offset::TimeZone","value":"TimeZone: Sized + Clone","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116}],"decl_id":null,"docs":" The time zone.","sig":null,"attributes":[{"value":"/ The time zone.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":45839,"byte_end":45857,"line_start":160,"line_end":160,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":45858,"byte_end":45861,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ The methods here are the primarily constructors for [`Date`](../struct.Date.html) and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":45862,"byte_end":45951,"line_start":162,"line_end":162,"column_start":1,"column_end":90}},{"value":"/ [`DateTime`](../struct.DateTime.html) types.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":45952,"byte_end":46000,"line_start":163,"line_end":163,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":94},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46242,"byte_end":46248,"line_start":168,"line_end":168,"column_start":10,"column_end":16},"name":"Offset","qualname":"::offset::TimeZone::Offset","value":"type Offset: Offset;","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" An associated offset type.\n This type is used to store the actual offset in date and time types.\n The original `TimeZone` value can be recovered via `TimeZone::from_offset`.\n","sig":null,"attributes":[{"value":"/ An associated offset type.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46041,"byte_end":46071,"line_start":165,"line_end":165,"column_start":5,"column_end":35}},{"value":"/ This type is used to store the actual offset in date and time types.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46076,"byte_end":46148,"line_start":166,"line_end":166,"column_start":5,"column_end":77}},{"value":"/ The original `TimeZone` value can be recovered via `TimeZone::from_offset`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46153,"byte_end":46232,"line_start":167,"line_end":167,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46865,"byte_end":46868,"line_start":185,"line_end":185,"column_start":8,"column_end":11},"name":"ymd","qualname":"::offset::TimeZone::ymd","value":"fn (&self, year: i32, month: u32, day: u32) -> Date<Self>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46263,"byte_end":46334,"line_start":170,"line_end":170,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46339,"byte_end":46418,"line_start":171,"line_end":171,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46423,"byte_end":46426,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46431,"byte_end":46524,"line_start":173,"line_end":173,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46529,"byte_end":46606,"line_start":174,"line_end":174,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46611,"byte_end":46614,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46619,"byte_end":46681,"line_start":176,"line_end":176,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46686,"byte_end":46689,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46694,"byte_end":46707,"line_start":178,"line_end":178,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46712,"byte_end":46715,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46720,"byte_end":46728,"line_start":180,"line_end":180,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46733,"byte_end":46765,"line_start":181,"line_end":181,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46770,"byte_end":46773,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd(2015, 5, 15).to_string(), \"2015-05-15UTC\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46778,"byte_end":46844,"line_start":183,"line_end":183,"column_start":5,"column_end":71}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46849,"byte_end":46857,"line_start":184,"line_end":184,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":47684,"byte_end":47691,"line_start":205,"line_end":205,"column_start":8,"column_end":15},"name":"ymd_opt","qualname":"::offset::TimeZone::ymd_opt","value":"fn (&self, year: i32, month: u32, day: u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46984,"byte_end":47055,"line_start":189,"line_end":189,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":47060,"byte_end":47139,"line_start":190,"line_end":190,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":47144,"byte_end":47147,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":47152,"byte_end":47245,"line_start":192,"line_end":192,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":47250,"byte_end":47327,"line_start":193,"line_end":193,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":47332,"byte_end":47335,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":47340,"byte_end":47410,"line_start":195,"line_end":195,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":47415,"byte_end":47418,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":47423,"byte_end":47436,"line_start":197,"line_end":197,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":47441,"byte_end":47444,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":47449,"byte_end":47457,"line_start":199,"line_end":199,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, LocalResult, TimeZone};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":47462,"byte_end":47507,"line_start":200,"line_end":200,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":47512,"byte_end":47515,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd_opt(2015, 5, 15).unwrap().to_string(), \"2015-05-15UTC\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":47520,"byte_end":47599,"line_start":202,"line_end":202,"column_start":5,"column_end":84}},{"value":"/ assert_eq!(Utc.ymd_opt(2000, 0, 0), LocalResult::None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":47604,"byte_end":47663,"line_start":203,"line_end":203,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":47668,"byte_end":47676,"line_start":204,"line_end":204,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":48540,"byte_end":48542,"line_start":227,"line_end":227,"column_start":8,"column_end":10},"name":"yo","qualname":"::offset::TimeZone::yo","value":"fn (&self, year: i32, ordinal: u32) -> Date<Self>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":47928,"byte_end":48019,"line_start":212,"line_end":212,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":48024,"byte_end":48103,"line_start":213,"line_end":213,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":48108,"byte_end":48111,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":48116,"byte_end":48209,"line_start":215,"line_end":215,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":48214,"byte_end":48291,"line_start":216,"line_end":216,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":48296,"byte_end":48299,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid DOY.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":48304,"byte_end":48359,"line_start":218,"line_end":218,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":48364,"byte_end":48367,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":48372,"byte_end":48385,"line_start":220,"line_end":220,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":48390,"byte_end":48393,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":48398,"byte_end":48406,"line_start":222,"line_end":222,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":48411,"byte_end":48443,"line_start":223,"line_end":223,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":48448,"byte_end":48451,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.yo(2015, 135).to_string(), \"2015-05-15UTC\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":48456,"byte_end":48519,"line_start":225,"line_end":225,"column_start":5,"column_end":68}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":48524,"byte_end":48532,"line_start":226,"line_end":226,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":49093,"byte_end":49099,"line_start":238,"line_end":238,"column_start":8,"column_end":14},"name":"yo_opt","qualname":"::offset::TimeZone::yo_opt","value":"fn (&self, year: i32, ordinal: u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":48646,"byte_end":48737,"line_start":231,"line_end":231,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":48742,"byte_end":48821,"line_start":232,"line_end":232,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":48826,"byte_end":48829,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":48834,"byte_end":48927,"line_start":234,"line_end":234,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":48932,"byte_end":49009,"line_start":235,"line_end":235,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":49014,"byte_end":49017,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid DOY.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":49022,"byte_end":49085,"line_start":237,"line_end":237,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":50077,"byte_end":50083,"line_start":262,"line_end":262,"column_start":8,"column_end":14},"name":"isoywd","qualname":"::offset::TimeZone::isoywd","value":"fn (&self, year: i32, week: u32, weekday: Weekday) -> Date<Self>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":49324,"byte_end":49415,"line_start":245,"line_end":245,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":49420,"byte_end":49446,"line_start":246,"line_end":246,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":49451,"byte_end":49530,"line_start":247,"line_end":247,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":49535,"byte_end":49606,"line_start":248,"line_end":248,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":49611,"byte_end":49614,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":49619,"byte_end":49712,"line_start":250,"line_end":250,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":49717,"byte_end":49794,"line_start":251,"line_end":251,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":49799,"byte_end":49802,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":49807,"byte_end":49870,"line_start":253,"line_end":253,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":49875,"byte_end":49878,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":49883,"byte_end":49896,"line_start":255,"line_end":255,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":49901,"byte_end":49904,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":49909,"byte_end":49917,"line_start":257,"line_end":257,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, Weekday, TimeZone};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":49922,"byte_end":49963,"line_start":258,"line_end":258,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":49968,"byte_end":49971,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.isoywd(2015, 20, Weekday::Fri).to_string(), \"2015-05-15UTC\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":49976,"byte_end":50056,"line_start":260,"line_end":260,"column_start":5,"column_end":85}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":50061,"byte_end":50069,"line_start":261,"line_end":261,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":50774,"byte_end":50784,"line_start":275,"line_end":275,"column_start":8,"column_end":18},"name":"isoywd_opt","qualname":"::offset::TimeZone::isoywd_opt","value":"fn (&self, year: i32, week: u32, weekday: Weekday) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":50212,"byte_end":50303,"line_start":266,"line_end":266,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":50308,"byte_end":50334,"line_start":267,"line_end":267,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":50339,"byte_end":50418,"line_start":268,"line_end":268,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":50423,"byte_end":50494,"line_start":269,"line_end":269,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":50499,"byte_end":50502,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":50507,"byte_end":50600,"line_start":271,"line_end":271,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":50605,"byte_end":50682,"line_start":272,"line_end":272,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":50687,"byte_end":50690,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":50695,"byte_end":50766,"line_start":274,"line_end":274,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":51609,"byte_end":51618,"line_start":296,"line_end":296,"column_start":8,"column_end":17},"name":"timestamp","qualname":"::offset::TimeZone::timestamp","value":"fn (&self, secs: i64, nsecs: u32) -> DateTime<Self>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":51034,"byte_end":51096,"line_start":282,"line_end":282,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":51101,"byte_end":51161,"line_start":283,"line_end":283,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":51166,"byte_end":51237,"line_start":284,"line_end":284,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":51242,"byte_end":51245,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":51250,"byte_end":51325,"line_start":286,"line_end":286,"column_start":5,"column_end":80}},{"value":"/ for a non-panicking version see [`timestamp_opt`](#method.timestamp_opt).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":51330,"byte_end":51407,"line_start":287,"line_end":287,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":51412,"byte_end":51415,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":51420,"byte_end":51433,"line_start":289,"line_end":289,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":51438,"byte_end":51441,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":51446,"byte_end":51454,"line_start":291,"line_end":291,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":51459,"byte_end":51491,"line_start":292,"line_end":292,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":51496,"byte_end":51499,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp(1431648000, 0).to_string(), \"2015-05-15 00:00:00 UTC\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":51504,"byte_end":51588,"line_start":294,"line_end":294,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":51593,"byte_end":51601,"line_start":295,"line_end":295,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":52101,"byte_end":52114,"line_start":306,"line_end":306,"column_start":8,"column_end":21},"name":"timestamp_opt","qualname":"::offset::TimeZone::timestamp_opt","value":"fn (&self, secs: i64, nsecs: u32) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":51729,"byte_end":51791,"line_start":300,"line_end":300,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":51796,"byte_end":51856,"line_start":301,"line_end":301,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":51861,"byte_end":51932,"line_start":302,"line_end":302,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":51937,"byte_end":51940,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of seconds and/or","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":51945,"byte_end":52017,"line_start":304,"line_end":304,"column_start":5,"column_end":77}},{"value":"/ invalid nanosecond, otherwise always returns `LocalResult::Single`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":52022,"byte_end":52093,"line_start":305,"line_end":305,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":52854,"byte_end":52870,"line_start":326,"line_end":326,"column_start":8,"column_end":24},"name":"timestamp_millis","qualname":"::offset::TimeZone::timestamp_millis","value":"fn (&self, millis: i64) -> DateTime<Self>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":52375,"byte_end":52442,"line_start":313,"line_end":313,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":52447,"byte_end":52508,"line_start":314,"line_end":314,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":52513,"byte_end":52516,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ Panics on out-of-range number of milliseconds for a non-panicking","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":52521,"byte_end":52590,"line_start":316,"line_end":316,"column_start":5,"column_end":74}},{"value":"/ version see [`timestamp_millis_opt`](#method.timestamp_millis_opt).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":52595,"byte_end":52666,"line_start":317,"line_end":317,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":52671,"byte_end":52674,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":52679,"byte_end":52692,"line_start":319,"line_end":319,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":52697,"byte_end":52700,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":52705,"byte_end":52713,"line_start":321,"line_end":321,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":52718,"byte_end":52750,"line_start":322,"line_end":322,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":52755,"byte_end":52758,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp_millis(1431648000).timestamp(), 1431648);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":52763,"byte_end":52833,"line_start":324,"line_end":324,"column_start":5,"column_end":75}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":52838,"byte_end":52846,"line_start":325,"line_end":325,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":53601,"byte_end":53621,"line_start":347,"line_end":347,"column_start":8,"column_end":28},"name":"timestamp_millis_opt","qualname":"::offset::TimeZone::timestamp_millis_opt","value":"fn (&self, millis: i64) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":52973,"byte_end":53040,"line_start":330,"line_end":330,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":53045,"byte_end":53106,"line_start":331,"line_end":331,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":53111,"byte_end":53114,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":53119,"byte_end":53122,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of milliseconds","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":53127,"byte_end":53197,"line_start":334,"line_end":334,"column_start":5,"column_end":75}},{"value":"/ and/or invalid nanosecond, otherwise always returns","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":53202,"byte_end":53257,"line_start":335,"line_end":335,"column_start":5,"column_end":60}},{"value":"/ `LocalResult::Single`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":53262,"byte_end":53288,"line_start":336,"line_end":336,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":53293,"byte_end":53296,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":53301,"byte_end":53314,"line_start":338,"line_end":338,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":53319,"byte_end":53322,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":53327,"byte_end":53335,"line_start":340,"line_end":340,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone, LocalResult};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":53340,"byte_end":53385,"line_start":341,"line_end":341,"column_start":5,"column_end":50}},{"value":"/ match Utc.timestamp_millis_opt(1431648000) {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":53390,"byte_end":53438,"line_start":342,"line_end":342,"column_start":5,"column_end":53}},{"value":"/     LocalResult::Single(dt) => assert_eq!(dt.timestamp(), 1431648),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":53443,"byte_end":53514,"line_start":343,"line_end":343,"column_start":5,"column_end":76}},{"value":"/     _ => panic!(\"Incorrect timestamp_millis\"),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":53519,"byte_end":53569,"line_start":344,"line_end":344,"column_start":5,"column_end":55}},{"value":"/ };","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":53574,"byte_end":53580,"line_start":345,"line_end":345,"column_start":5,"column_end":11}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":53585,"byte_end":53593,"line_start":346,"line_end":346,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":54311,"byte_end":54328,"line_start":362,"line_end":362,"column_start":8,"column_end":25},"name":"datetime_from_str","qualname":"::offset::TimeZone::datetime_from_str","value":"fn (&self, s: &str, fmt: &str) -> ParseResult<DateTime<Self>>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a `DateTime` with the current offset.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":53807,"byte_end":53863,"line_start":352,"line_end":352,"column_start":5,"column_end":61}},{"value":"/ returns a `DateTime` with the current offset.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":53868,"byte_end":53917,"line_start":353,"line_end":353,"column_start":5,"column_end":54}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":53922,"byte_end":53992,"line_start":354,"line_end":354,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":53997,"byte_end":54035,"line_start":355,"line_end":355,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":54040,"byte_end":54043,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ If the format does not include offsets, the current offset is assumed;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":54048,"byte_end":54122,"line_start":357,"line_end":357,"column_start":5,"column_end":79}},{"value":"/ otherwise the input should have a matching UTC offset.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":54127,"byte_end":54185,"line_start":358,"line_end":358,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":54190,"byte_end":54193,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ See also `DateTime::parse_from_str` which gives a local `DateTime`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":54198,"byte_end":54268,"line_start":360,"line_end":360,"column_start":5,"column_end":75}},{"value":"/ with parsed `FixedOffset`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":54273,"byte_end":54303,"line_start":361,"line_end":361,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":54604,"byte_end":54615,"line_start":369,"line_end":369,"column_start":8,"column_end":19},"name":"from_offset","qualname":"::offset::TimeZone::from_offset","value":"fn (offset: &Self::Offset) -> Self","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Reconstructs the time zone from the offset.\n","sig":null,"attributes":[{"value":"/ Reconstructs the time zone from the offset.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":54549,"byte_end":54596,"line_start":368,"line_end":368,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":54727,"byte_end":54749,"line_start":372,"line_end":372,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"::offset::TimeZone::offset_from_local_date","value":"fn (&self, local: &NaiveDate) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDate` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDate` if possible.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":54653,"byte_end":54719,"line_start":371,"line_end":371,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":54889,"byte_end":54915,"line_start":375,"line_end":375,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"::offset::TimeZone::offset_from_local_datetime","value":"fn (&self, local: &NaiveDateTime) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDateTime` if possible.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":54811,"byte_end":54881,"line_start":374,"line_end":374,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":55065,"byte_end":55080,"line_start":378,"line_end":378,"column_start":8,"column_end":23},"name":"from_local_date","qualname":"::offset::TimeZone::from_local_date","value":"fn (&self, local: &NaiveDate) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDate` to the timezone-aware `Date` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDate` to the timezone-aware `Date` if possible.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":54981,"byte_end":55057,"line_start":377,"line_end":377,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":55432,"byte_end":55451,"line_start":386,"line_end":386,"column_start":8,"column_end":27},"name":"from_local_datetime","qualname":"::offset::TimeZone::from_local_datetime","value":"fn (&self, local: &NaiveDateTime) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":55340,"byte_end":55424,"line_start":385,"line_end":385,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":55736,"byte_end":55756,"line_start":393,"line_end":393,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"::offset::TimeZone::offset_from_utc_date","value":"fn (&self, utc: &NaiveDate) -> Self::Offset","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDate`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDate`. This cannot fail.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":55661,"byte_end":55728,"line_start":392,"line_end":392,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":55882,"byte_end":55906,"line_start":396,"line_end":396,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"::offset::TimeZone::offset_from_utc_datetime","value":"fn (&self, utc: &NaiveDateTime) -> Self::Offset","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDateTime`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDateTime`. This cannot fail.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":55803,"byte_end":55874,"line_start":395,"line_end":395,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":56113,"byte_end":56126,"line_start":400,"line_end":400,"column_start":8,"column_end":21},"name":"from_utc_date","qualname":"::offset::TimeZone::from_utc_date","value":"fn (&self, utc: &NaiveDate) -> Date<Self>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDate` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDate` to the local time.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":55957,"byte_end":56008,"line_start":398,"line_end":398,"column_start":5,"column_end":56}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":56013,"byte_end":56105,"line_start":399,"line_end":399,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":56399,"byte_end":56416,"line_start":406,"line_end":406,"column_start":8,"column_end":25},"name":"from_utc_datetime","qualname":"::offset::TimeZone::from_utc_datetime","value":"fn (&self, utc: &NaiveDateTime) -> DateTime<Self>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDateTime` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDateTime` to the local time.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":56239,"byte_end":56294,"line_start":404,"line_end":404,"column_start":5,"column_end":60}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":56299,"byte_end":56391,"line_start":405,"line_end":405,"column_start":5,"column_end":97}}]},{"kind":"Struct","id":{"krate":0,"index":1350},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57680,"byte_end":57683,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"Utc","qualname":"::offset::utc::Utc","value":"","parent":null,"children":[],"decl_id":null,"docs":" The UTC time zone. This is the most efficient time zone when you don't need the local time.\n It is also used as an offset (which is also a dummy type).","sig":null,"attributes":[{"value":"/ The UTC time zone. This is the most efficient time zone when you don't need the local time.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57034,"byte_end":57129,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/ It is also used as an offset (which is also a dummy type).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57130,"byte_end":57192,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57193,"byte_end":57196,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57197,"byte_end":57254,"line_start":18,"line_end":18,"column_start":1,"column_end":58}},{"value":"/ on the UTC struct is the preferred way to construct `DateTime<Utc>`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57255,"byte_end":57326,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"/ instances.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57327,"byte_end":57341,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57342,"byte_end":57345,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57346,"byte_end":57359,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57360,"byte_end":57363,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57364,"byte_end":57372,"line_start":24,"line_end":24,"column_start":1,"column_end":9}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57373,"byte_end":57430,"line_start":25,"line_end":25,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57431,"byte_end":57434,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57435,"byte_end":57517,"line_start":27,"line_end":27,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57518,"byte_end":57521,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57522,"byte_end":57563,"line_start":29,"line_end":29,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 1, 1), dt);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57564,"byte_end":57621,"line_start":30,"line_end":30,"column_start":1,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57622,"byte_end":57630,"line_start":31,"line_end":31,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57796,"byte_end":57801,"line_start":38,"line_end":38,"column_start":12,"column_end":17},"name":"today","qualname":"<Utc>::today","value":"fn () -> Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57725,"byte_end":57784,"line_start":37,"line_end":37,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57919,"byte_end":57922,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"now","qualname":"<Utc>::now","value":"fn () -> DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57844,"byte_end":57907,"line_start":40,"line_end":40,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":1361},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":59630,"byte_end":59641,"line_start":23,"line_end":23,"column_start":12,"column_end":23},"name":"FixedOffset","qualname":"::offset::fixed::FixedOffset","value":"FixedOffset {  }","parent":null,"children":[{"krate":0,"index":1362}],"decl_id":null,"docs":" The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","sig":null,"attributes":[{"value":"/ The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":59254,"byte_end":59325,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":59326,"byte_end":59329,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":59330,"byte_end":59387,"line_start":18,"line_end":18,"column_start":1,"column_end":58}},{"value":"/ on a `FixedOffset` struct is the preferred way to construct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":59388,"byte_end":59451,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"/ `DateTime<FixedOffset>` instances. See the [`east`](#method.east) and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":59452,"byte_end":59525,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ [`west`](#method.west) methods for examples.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":59526,"byte_end":59574,"line_start":21,"line_end":21,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":60245,"byte_end":60249,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"east","qualname":"<FixedOffset>::east","value":"fn (secs: i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":59696,"byte_end":59784,"line_start":28,"line_end":28,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":59789,"byte_end":59842,"line_start":29,"line_end":29,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":59847,"byte_end":59850,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":59855,"byte_end":59893,"line_start":31,"line_end":31,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":59898,"byte_end":59901,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":59906,"byte_end":59919,"line_start":33,"line_end":33,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":59924,"byte_end":59927,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":59932,"byte_end":59940,"line_start":35,"line_end":35,"column_start":5,"column_end":13}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":59945,"byte_end":59985,"line_start":36,"line_end":36,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":59990,"byte_end":60010,"line_start":37,"line_end":37,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::east(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":60015,"byte_end":60079,"line_start":38,"line_end":38,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":60084,"byte_end":60148,"line_start":39,"line_end":39,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00+05:00\")","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":60153,"byte_end":60220,"line_start":40,"line_end":40,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":60225,"byte_end":60233,"line_start":41,"line_end":41,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":60584,"byte_end":60592,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"east_opt","qualname":"<FixedOffset>::east_opt","value":"fn (secs: i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":60367,"byte_end":60455,"line_start":46,"line_end":46,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":60460,"byte_end":60513,"line_start":47,"line_end":47,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":60518,"byte_end":60521,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":60526,"byte_end":60572,"line_start":49,"line_end":49,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":61334,"byte_end":61338,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"west","qualname":"<FixedOffset>::west","value":"fn (secs: i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":60785,"byte_end":60873,"line_start":58,"line_end":58,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":60878,"byte_end":60931,"line_start":59,"line_end":59,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":60936,"byte_end":60939,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":60944,"byte_end":60982,"line_start":61,"line_end":61,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":60987,"byte_end":60990,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":60995,"byte_end":61008,"line_start":63,"line_end":63,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":61013,"byte_end":61016,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":61021,"byte_end":61029,"line_start":65,"line_end":65,"column_start":5,"column_end":13}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":61034,"byte_end":61074,"line_start":66,"line_end":66,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":61079,"byte_end":61099,"line_start":67,"line_end":67,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::west(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":61104,"byte_end":61168,"line_start":68,"line_end":68,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":61173,"byte_end":61237,"line_start":69,"line_end":69,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00-05:00\")","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":61242,"byte_end":61309,"line_start":70,"line_end":70,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":61314,"byte_end":61322,"line_start":71,"line_end":71,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":61673,"byte_end":61681,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"west_opt","qualname":"<FixedOffset>::west_opt","value":"fn (secs: i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":61456,"byte_end":61544,"line_start":76,"line_end":76,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":61549,"byte_end":61602,"line_start":77,"line_end":77,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":61607,"byte_end":61610,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":61615,"byte_end":61661,"line_start":79,"line_end":79,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":61966,"byte_end":61981,"line_start":89,"line_end":89,"column_start":12,"column_end":27},"name":"local_minus_utc","qualname":"<FixedOffset>::local_minus_utc","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from UTC to the local time.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from UTC to the local time.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":61875,"byte_end":61954,"line_start":88,"line_end":88,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":62129,"byte_end":62144,"line_start":94,"line_end":94,"column_start":12,"column_end":27},"name":"utc_minus_local","qualname":"<FixedOffset>::utc_minus_local","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from the local time to UTC.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":62038,"byte_end":62117,"line_start":93,"line_end":93,"column_start":5,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":1376},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":69048,"byte_end":69053,"line_start":81,"line_end":81,"column_start":12,"column_end":17},"name":"Local","qualname":"::offset::local::Local","value":"","parent":null,"children":[],"decl_id":null,"docs":" The local timescale. This is implemented via the standard `time` crate.","sig":null,"attributes":[{"value":"/ The local timescale. This is implemented via the standard `time` crate.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":68592,"byte_end":68667,"line_start":66,"line_end":66,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":68668,"byte_end":68671,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":68672,"byte_end":68729,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/ on the Local struct is the preferred way to construct `DateTime<Local>`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":68730,"byte_end":68805,"line_start":69,"line_end":69,"column_start":1,"column_end":76}},{"value":"/ instances.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":68806,"byte_end":68820,"line_start":70,"line_end":70,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":68821,"byte_end":68824,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":68825,"byte_end":68838,"line_start":72,"line_end":72,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":68839,"byte_end":68842,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":68843,"byte_end":68851,"line_start":74,"line_end":74,"column_start":1,"column_end":9}},{"value":"/ use chrono::{Local, DateTime, TimeZone};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":68852,"byte_end":68896,"line_start":75,"line_end":75,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":68897,"byte_end":68900,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ let dt: DateTime<Local> = Local::now();","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":68901,"byte_end":68944,"line_start":77,"line_end":77,"column_start":1,"column_end":44}},{"value":"/ let dt: DateTime<Local> = Local.timestamp(0, 0);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":68945,"byte_end":68997,"line_start":78,"line_end":78,"column_start":1,"column_end":53}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":68998,"byte_end":69006,"line_start":79,"line_end":79,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":69144,"byte_end":69149,"line_start":85,"line_end":85,"column_start":12,"column_end":17},"name":"today","qualname":"<Local>::today","value":"fn () -> Date<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":69073,"byte_end":69132,"line_start":84,"line_end":84,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":69283,"byte_end":69286,"line_start":90,"line_end":90,"column_start":12,"column_end":15},"name":"now","qualname":"<Local>::now","value":"fn () -> DateTime<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":69208,"byte_end":69271,"line_start":89,"line_end":89,"column_start":5,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":245},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":20258,"byte_end":20263,"line_start":453,"line_end":453,"column_start":9,"column_end":14},"name":"naive","qualname":"::naive","value":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":326},{"krate":0,"index":448},{"krate":0,"index":461},{"krate":0,"index":544},{"krate":0,"index":662},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668}],"decl_id":null,"docs":" Date and time types which do not concern about the timezones.","sig":null,"attributes":[{"value":"! Date and time types which do not concern about the timezones.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":20270,"byte_end":20335,"line_start":454,"line_end":454,"column_start":5,"column_end":70}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":20340,"byte_end":20343,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"! They are primarily building blocks for other types","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":20348,"byte_end":20402,"line_start":456,"line_end":456,"column_start":5,"column_end":59}},{"value":"! (e.g. [`TimeZone`](../offset/trait.TimeZone.html)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":20407,"byte_end":20462,"line_start":457,"line_end":457,"column_start":5,"column_end":60}},{"value":"! but can be also used for the simpler date and time handling.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":20467,"byte_end":20531,"line_start":458,"line_end":458,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1428},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":108824,"byte_end":108833,"line_start":97,"line_end":97,"column_start":12,"column_end":21},"name":"NaiveDate","qualname":"::naive::date::NaiveDate","value":"NaiveDate {  }","parent":null,"children":[{"krate":0,"index":1429}],"decl_id":null,"docs":" ISO 8601 calendar date without timezone.\n Allows for every [proleptic Gregorian date](#calendar-date)\n from Jan 1, 262145 BCE to Dec 31, 262143 CE.\n Also supports the conversion from ISO 8601 ordinal and week date.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date without timezone.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":106250,"byte_end":106294,"line_start":48,"line_end":48,"column_start":1,"column_end":45}},{"value":"/ Allows for every [proleptic Gregorian date](#calendar-date)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":106295,"byte_end":106358,"line_start":49,"line_end":49,"column_start":1,"column_end":64}},{"value":"/ from Jan 1, 262145 BCE to Dec 31, 262143 CE.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":106359,"byte_end":106407,"line_start":50,"line_end":50,"column_start":1,"column_end":49}},{"value":"/ Also supports the conversion from ISO 8601 ordinal and week date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":106408,"byte_end":106477,"line_start":51,"line_end":51,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":106478,"byte_end":106481,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Calendar Date","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":106482,"byte_end":106501,"line_start":53,"line_end":53,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":106502,"byte_end":106505,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **calendar date** follows the proleptic Gregorian calendar.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":106506,"byte_end":106582,"line_start":55,"line_end":55,"column_start":1,"column_end":77}},{"value":"/ It is like a normal civil calendar but note some slight differences:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":106583,"byte_end":106655,"line_start":56,"line_end":56,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":106656,"byte_end":106659,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ * Dates before the Gregorian calendar's inception in 1582 are defined via the extrapolation.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":106660,"byte_end":106756,"line_start":58,"line_end":58,"column_start":1,"column_end":97}},{"value":"/   Be careful, as historical dates are often noted in the Julian calendar and others","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":106757,"byte_end":106844,"line_start":59,"line_end":59,"column_start":1,"column_end":88}},{"value":"/   and the transition to Gregorian may differ across countries (as late as early 20C).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":106845,"byte_end":106934,"line_start":60,"line_end":60,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":106935,"byte_end":106938,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/   (Some example: Both Shakespeare from Britain and Cervantes from Spain seemingly died","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":106939,"byte_end":107029,"line_start":62,"line_end":62,"column_start":1,"column_end":91}},{"value":"/   on the same calendar date---April 23, 1616---but in the different calendar.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":107030,"byte_end":107111,"line_start":63,"line_end":63,"column_start":1,"column_end":82}},{"value":"/   Britain used the Julian calendar at that time, so Shakespeare's death is later.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":107112,"byte_end":107198,"line_start":64,"line_end":64,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":107199,"byte_end":107202,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ * ISO 8601 calendars has the year 0, which is 1 BCE (a year before 1 CE).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":107203,"byte_end":107280,"line_start":66,"line_end":66,"column_start":1,"column_end":78}},{"value":"/   If you need a typical BCE/BC and CE/AD notation for year numbers,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":107281,"byte_end":107352,"line_start":67,"line_end":67,"column_start":1,"column_end":72}},{"value":"/   use the [`Datelike::year_ce`](../trait.Datelike.html#method.year_ce) method.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":107353,"byte_end":107435,"line_start":68,"line_end":68,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":107436,"byte_end":107439,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ # Week Date","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":107440,"byte_end":107455,"line_start":70,"line_end":70,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":107456,"byte_end":107459,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **week date** is a triple of year number, week number","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":107460,"byte_end":107530,"line_start":72,"line_end":72,"column_start":1,"column_end":71}},{"value":"/ and [day of the week](../enum.Weekday.html) with the following rules:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":107531,"byte_end":107604,"line_start":73,"line_end":73,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":107605,"byte_end":107608,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ * A week consists of Monday through Sunday, and is always numbered within some year.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":107609,"byte_end":107697,"line_start":75,"line_end":75,"column_start":1,"column_end":89}},{"value":"/   The week number ranges from 1 to 52 or 53 depending on the year.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":107698,"byte_end":107768,"line_start":76,"line_end":76,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":107769,"byte_end":107772,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ * The week 1 of given year is defined as the first week containing January 4 of that year,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":107773,"byte_end":107867,"line_start":78,"line_end":78,"column_start":1,"column_end":95}},{"value":"/   or equivalently, the first week containing four or more days in that year.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":107868,"byte_end":107948,"line_start":79,"line_end":79,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":107949,"byte_end":107952,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ * The year number in the week date may *not* correspond to the actual Gregorian year.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":107953,"byte_end":108042,"line_start":81,"line_end":81,"column_start":1,"column_end":90}},{"value":"/   For example, January 3, 2016 (Sunday) was on the last (53rd) week of 2015.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":108043,"byte_end":108123,"line_start":82,"line_end":82,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":108124,"byte_end":108127,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Chrono's date types default to the ISO 8601 [calendar date](#calendar-date),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":108128,"byte_end":108208,"line_start":84,"line_end":84,"column_start":1,"column_end":81}},{"value":"/ but [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":108209,"byte_end":108285,"line_start":85,"line_end":85,"column_start":1,"column_end":77}},{"value":"/ [`Datelike::weekday`](../trait.Datelike.html#tymethod.weekday) methods","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":108286,"byte_end":108360,"line_start":86,"line_end":86,"column_start":1,"column_end":75}},{"value":"/ can be used to get the corresponding week date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":108361,"byte_end":108412,"line_start":87,"line_end":87,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":108413,"byte_end":108416,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ # Ordinal Date","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":108417,"byte_end":108435,"line_start":89,"line_end":89,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":108436,"byte_end":108439,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **ordinal date** is a pair of year number and day of the year (\"ordinal\").","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":108440,"byte_end":108531,"line_start":91,"line_end":91,"column_start":1,"column_end":92}},{"value":"/ The ordinal number ranges from 1 to 365 or 366 depending on the year.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":108532,"byte_end":108605,"line_start":92,"line_end":92,"column_start":1,"column_end":74}},{"value":"/ The year number is same to that of the [calendar date](#calendar-date).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":108606,"byte_end":108681,"line_start":93,"line_end":93,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":108682,"byte_end":108685,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ This is currently the internal format of Chrono's date types.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":108686,"byte_end":108751,"line_start":95,"line_end":95,"column_start":1,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":365},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":108952,"byte_end":108960,"line_start":102,"line_end":102,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::naive::date::MIN_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDate` (January 1, 262145 BCE).\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDate` (January 1, 262145 BCE).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":108880,"byte_end":108941,"line_start":101,"line_end":101,"column_start":1,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":366},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":109110,"byte_end":109118,"line_start":104,"line_end":104,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::naive::date::MAX_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDate` (December 31, 262143 CE).\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDate` (December 31, 262143 CE).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":109037,"byte_end":109099,"line_start":103,"line_end":103,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111428,"byte_end":111436,"line_start":161,"line_end":161,"column_start":12,"column_end":20},"name":"from_ymd","qualname":"<NaiveDate>::from_ymd","value":"fn (year: i32, month: u32, day: u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":110698,"byte_end":110766,"line_start":141,"line_end":141,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":110771,"byte_end":110797,"line_start":142,"line_end":142,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":110802,"byte_end":110805,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":110810,"byte_end":110872,"line_start":144,"line_end":144,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":110877,"byte_end":110880,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":110885,"byte_end":110898,"line_start":146,"line_end":146,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":110903,"byte_end":110906,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":110911,"byte_end":110919,"line_start":148,"line_end":148,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":110924,"byte_end":110971,"line_start":149,"line_end":149,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":110976,"byte_end":110979,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 3, 14);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":110984,"byte_end":111029,"line_start":151,"line_end":151,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111034,"byte_end":111065,"line_start":152,"line_end":152,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111070,"byte_end":111099,"line_start":153,"line_end":153,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111104,"byte_end":111132,"line_start":154,"line_end":154,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111137,"byte_end":111184,"line_start":155,"line_end":155,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111189,"byte_end":111231,"line_start":156,"line_end":156,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111236,"byte_end":111276,"line_start":157,"line_end":157,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111281,"byte_end":111323,"line_start":158,"line_end":158,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111328,"byte_end":111403,"line_start":159,"line_end":159,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111408,"byte_end":111416,"line_start":160,"line_end":160,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112287,"byte_end":112299,"line_start":184,"line_end":184,"column_start":12,"column_end":24},"name":"from_ymd_opt","qualname":"<NaiveDate>::from_ymd_opt","value":"fn (year: i32, month: u32, day: u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111585,"byte_end":111653,"line_start":165,"line_end":165,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111658,"byte_end":111684,"line_start":166,"line_end":166,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111689,"byte_end":111692,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111697,"byte_end":111767,"line_start":168,"line_end":168,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111772,"byte_end":111775,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111780,"byte_end":111793,"line_start":170,"line_end":170,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111798,"byte_end":111801,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111806,"byte_end":111814,"line_start":172,"line_end":172,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111819,"byte_end":111845,"line_start":173,"line_end":173,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111850,"byte_end":111853,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ let from_ymd_opt = NaiveDate::from_ymd_opt;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111858,"byte_end":111905,"line_start":175,"line_end":175,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111910,"byte_end":111913,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ assert!(from_ymd_opt(2015, 3, 14).is_some());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111918,"byte_end":111967,"line_start":177,"line_end":177,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 0, 14).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":111972,"byte_end":112021,"line_start":178,"line_end":178,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 2, 29).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112026,"byte_end":112075,"line_start":179,"line_end":179,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(-4, 2, 29).is_some()); // 5 BCE is a leap year","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112080,"byte_end":112151,"line_start":180,"line_end":180,"column_start":5,"column_end":76}},{"value":"/ assert!(from_ymd_opt(400000, 1, 1).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112156,"byte_end":112206,"line_start":181,"line_end":181,"column_start":5,"column_end":55}},{"value":"/ assert!(from_ymd_opt(-400000, 1, 1).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112211,"byte_end":112262,"line_start":182,"line_end":182,"column_start":5,"column_end":56}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112267,"byte_end":112275,"line_start":183,"line_end":183,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113193,"byte_end":113200,"line_start":209,"line_end":209,"column_start":12,"column_end":19},"name":"from_yo","qualname":"<NaiveDate>::from_yo","value":"fn (year: i32, ordinal: u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112478,"byte_end":112544,"line_start":189,"line_end":189,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112549,"byte_end":112580,"line_start":190,"line_end":190,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112585,"byte_end":112588,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid day of year.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112593,"byte_end":112656,"line_start":192,"line_end":192,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112661,"byte_end":112664,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112669,"byte_end":112682,"line_start":194,"line_end":194,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112687,"byte_end":112690,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112695,"byte_end":112703,"line_start":196,"line_end":196,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112708,"byte_end":112755,"line_start":197,"line_end":197,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112760,"byte_end":112763,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_yo(2015, 73);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112768,"byte_end":112809,"line_start":199,"line_end":199,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(d.ordinal(), 73);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112814,"byte_end":112846,"line_start":200,"line_end":200,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112851,"byte_end":112882,"line_start":201,"line_end":201,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112887,"byte_end":112916,"line_start":202,"line_end":202,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112921,"byte_end":112949,"line_start":203,"line_end":203,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":112954,"byte_end":112996,"line_start":204,"line_end":204,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113001,"byte_end":113041,"line_start":205,"line_end":205,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113046,"byte_end":113088,"line_start":206,"line_end":206,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113093,"byte_end":113168,"line_start":207,"line_end":207,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113173,"byte_end":113181,"line_start":208,"line_end":208,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114070,"byte_end":114081,"line_start":233,"line_end":233,"column_start":12,"column_end":23},"name":"from_yo_opt","qualname":"<NaiveDate>::from_yo_opt","value":"fn (year: i32, ordinal: u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113337,"byte_end":113403,"line_start":213,"line_end":213,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113408,"byte_end":113439,"line_start":214,"line_end":214,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113444,"byte_end":113447,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid day of year.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113452,"byte_end":113523,"line_start":216,"line_end":216,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113528,"byte_end":113531,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113536,"byte_end":113549,"line_start":218,"line_end":218,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113554,"byte_end":113557,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113562,"byte_end":113570,"line_start":220,"line_end":220,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113575,"byte_end":113601,"line_start":221,"line_end":221,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113606,"byte_end":113609,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ let from_yo_opt = NaiveDate::from_yo_opt;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113614,"byte_end":113659,"line_start":223,"line_end":223,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113664,"byte_end":113667,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ assert!(from_yo_opt(2015, 100).is_some());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113672,"byte_end":113718,"line_start":225,"line_end":225,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 0).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113723,"byte_end":113767,"line_start":226,"line_end":226,"column_start":5,"column_end":49}},{"value":"/ assert!(from_yo_opt(2015, 365).is_some());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113772,"byte_end":113818,"line_start":227,"line_end":227,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 366).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113823,"byte_end":113869,"line_start":228,"line_end":228,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-4, 366).is_some()); // 5 BCE is a leap year","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113874,"byte_end":113942,"line_start":229,"line_end":229,"column_start":5,"column_end":73}},{"value":"/ assert!(from_yo_opt(400000, 1).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113947,"byte_end":113993,"line_start":230,"line_end":230,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-400000, 1).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":113998,"byte_end":114045,"line_start":231,"line_end":231,"column_start":5,"column_end":52}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114050,"byte_end":114058,"line_start":232,"line_end":232,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":115087,"byte_end":115098,"line_start":259,"line_end":259,"column_start":12,"column_end":23},"name":"from_isoywd","qualname":"<NaiveDate>::from_isoywd","value":"fn (year: i32, week: u32, weekday: Weekday) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114247,"byte_end":114311,"line_start":238,"line_end":238,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114316,"byte_end":114360,"line_start":239,"line_end":239,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114365,"byte_end":114441,"line_start":240,"line_end":240,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114446,"byte_end":114449,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114454,"byte_end":114517,"line_start":242,"line_end":242,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114522,"byte_end":114525,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114530,"byte_end":114543,"line_start":244,"line_end":244,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114548,"byte_end":114551,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114556,"byte_end":114564,"line_start":246,"line_end":246,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114569,"byte_end":114616,"line_start":247,"line_end":247,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114621,"byte_end":114624,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 11, Weekday::Sat);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114629,"byte_end":114688,"line_start":249,"line_end":249,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114693,"byte_end":114735,"line_start":250,"line_end":250,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114740,"byte_end":114780,"line_start":251,"line_end":251,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114785,"byte_end":114827,"line_start":252,"line_end":252,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114832,"byte_end":114863,"line_start":253,"line_end":253,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114868,"byte_end":114897,"line_start":254,"line_end":254,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114902,"byte_end":114930,"line_start":255,"line_end":255,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114935,"byte_end":114982,"line_start":256,"line_end":256,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":114987,"byte_end":115062,"line_start":257,"line_end":257,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":115067,"byte_end":115075,"line_start":258,"line_end":258,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":117461,"byte_end":117476,"line_start":307,"line_end":307,"column_start":12,"column_end":27},"name":"from_isoywd_opt","qualname":"<NaiveDate>::from_isoywd_opt","value":"fn (year: i32, week: u32, weekday: Weekday) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":115260,"byte_end":115324,"line_start":263,"line_end":263,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":115329,"byte_end":115373,"line_start":264,"line_end":264,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":115378,"byte_end":115454,"line_start":265,"line_end":265,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":115459,"byte_end":115462,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":115467,"byte_end":115538,"line_start":267,"line_end":267,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":115543,"byte_end":115546,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":115551,"byte_end":115564,"line_start":269,"line_end":269,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":115569,"byte_end":115572,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":115577,"byte_end":115585,"line_start":271,"line_end":271,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":115590,"byte_end":115627,"line_start":272,"line_end":272,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":115632,"byte_end":115635,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":115640,"byte_end":115679,"line_start":274,"line_end":274,"column_start":5,"column_end":44}},{"value":"/ let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":115684,"byte_end":115737,"line_start":275,"line_end":275,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":115742,"byte_end":115745,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 0, Weekday::Sun), None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":115750,"byte_end":115811,"line_start":277,"line_end":277,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 10, Weekday::Sun), Some(from_ymd(2015, 3, 8)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":115816,"byte_end":115900,"line_start":278,"line_end":278,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 30, Weekday::Mon), Some(from_ymd(2015, 7, 20)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":115905,"byte_end":115990,"line_start":279,"line_end":279,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 60, Weekday::Mon), None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":115995,"byte_end":116057,"line_start":280,"line_end":280,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":116062,"byte_end":116065,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(400000, 10, Weekday::Fri), None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":116070,"byte_end":116134,"line_start":282,"line_end":282,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(from_isoywd_opt(-400000, 10, Weekday::Sat), None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":116139,"byte_end":116204,"line_start":283,"line_end":283,"column_start":5,"column_end":70}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":116209,"byte_end":116217,"line_start":284,"line_end":284,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":116222,"byte_end":116225,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ The year number of ISO week date may differ from that of the calendar date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":116230,"byte_end":116309,"line_start":286,"line_end":286,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":116314,"byte_end":116317,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":116322,"byte_end":116330,"line_start":288,"line_end":288,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDate, Weekday};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":116335,"byte_end":116374,"line_start":289,"line_end":289,"column_start":5,"column_end":44}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":116379,"byte_end":116420,"line_start":290,"line_end":290,"column_start":5,"column_end":46}},{"value":"/ # let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":116425,"byte_end":116480,"line_start":291,"line_end":291,"column_start":5,"column_end":60}},{"value":"/ //           Mo Tu We Th Fr Sa Su","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":116485,"byte_end":116522,"line_start":292,"line_end":292,"column_start":5,"column_end":42}},{"value":"/ // 2014-W52  22 23 24 25 26 27 28    has 4+ days of new year,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":116527,"byte_end":116592,"line_start":293,"line_end":293,"column_start":5,"column_end":70}},{"value":"/ // 2015-W01  29 30 31  1  2  3  4 <- so this is the first week","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":116597,"byte_end":116663,"line_start":294,"line_end":294,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 52, Weekday::Sun), Some(from_ymd(2014, 12, 28)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":116668,"byte_end":116754,"line_start":295,"line_end":295,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 53, Weekday::Mon), None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":116759,"byte_end":116821,"line_start":296,"line_end":296,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 1, Weekday::Mon), Some(from_ymd(2014, 12, 29)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":116826,"byte_end":116911,"line_start":297,"line_end":297,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":116916,"byte_end":116919,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ // 2015-W52  21 22 23 24 25 26 27    has 4+ days of old year,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":116924,"byte_end":116989,"line_start":299,"line_end":299,"column_start":5,"column_end":70}},{"value":"/ // 2015-W53  28 29 30 31  1  2  3 <- so this is the last week","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":116994,"byte_end":117059,"line_start":300,"line_end":300,"column_start":5,"column_end":70}},{"value":"/ // 2016-W01   4  5  6  7  8  9 10","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":117064,"byte_end":117101,"line_start":301,"line_end":301,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 52, Weekday::Sun), Some(from_ymd(2015, 12, 27)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":117106,"byte_end":117192,"line_start":302,"line_end":302,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 53, Weekday::Sun), Some(from_ymd(2016, 1, 3)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":117197,"byte_end":117281,"line_start":303,"line_end":303,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 54, Weekday::Mon), None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":117286,"byte_end":117348,"line_start":304,"line_end":304,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2016, 1, Weekday::Mon), Some(from_ymd(2016, 1, 4)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":117353,"byte_end":117436,"line_start":305,"line_end":305,"column_start":5,"column_end":88}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":117441,"byte_end":117449,"line_start":306,"line_end":306,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120354,"byte_end":120375,"line_start":377,"line_end":377,"column_start":12,"column_end":33},"name":"from_num_days_from_ce","qualname":"<NaiveDate>::from_num_days_from_ce","value":"fn (days: i32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\n in the proleptic Gregorian calendar.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":118626,"byte_end":118704,"line_start":333,"line_end":333,"column_start":5,"column_end":83}},{"value":"/ in the proleptic Gregorian calendar.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":118709,"byte_end":118749,"line_start":334,"line_end":334,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":118754,"byte_end":118757,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":118762,"byte_end":118798,"line_start":336,"line_end":336,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":118803,"byte_end":118806,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":118811,"byte_end":118824,"line_start":338,"line_end":338,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":118829,"byte_end":118832,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":118837,"byte_end":118845,"line_start":340,"line_end":340,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":118850,"byte_end":118897,"line_start":341,"line_end":341,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":118902,"byte_end":118905,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_num_days_from_ce(735671);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":118910,"byte_end":118963,"line_start":343,"line_end":343,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":118968,"byte_end":119043,"line_start":344,"line_end":344,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119048,"byte_end":119079,"line_start":345,"line_end":345,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119084,"byte_end":119113,"line_start":346,"line_end":346,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119118,"byte_end":119146,"line_start":347,"line_end":347,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119151,"byte_end":119198,"line_start":348,"line_end":348,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119203,"byte_end":119245,"line_start":349,"line_end":349,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119250,"byte_end":119290,"line_start":350,"line_end":350,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119295,"byte_end":119337,"line_start":351,"line_end":351,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119342,"byte_end":119350,"line_start":352,"line_end":352,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119355,"byte_end":119358,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ While not directly supported by Chrono,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119363,"byte_end":119406,"line_start":354,"line_end":354,"column_start":5,"column_end":48}},{"value":"/ it is easy to convert from the Julian day number","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119411,"byte_end":119463,"line_start":355,"line_end":355,"column_start":5,"column_end":57}},{"value":"/ (January 1, 4713 BCE in the *Julian* calendar being Day 0)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119468,"byte_end":119530,"line_start":356,"line_end":356,"column_start":5,"column_end":67}},{"value":"/ to Gregorian with this method.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119535,"byte_end":119569,"line_start":357,"line_end":357,"column_start":5,"column_end":39}},{"value":"/ (Note that this panics when `jd` is out of range.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119574,"byte_end":119628,"line_start":358,"line_end":358,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119633,"byte_end":119636,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119641,"byte_end":119649,"line_start":360,"line_end":360,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119654,"byte_end":119680,"line_start":361,"line_end":361,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119685,"byte_end":119688,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ fn jd_to_date(jd: i32) -> NaiveDate {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119693,"byte_end":119734,"line_start":363,"line_end":363,"column_start":5,"column_end":46}},{"value":"/     // keep in mind that the Julian day number is 0-based","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119739,"byte_end":119800,"line_start":364,"line_end":364,"column_start":5,"column_end":66}},{"value":"/     // while this method requires an 1-based number.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119805,"byte_end":119861,"line_start":365,"line_end":365,"column_start":5,"column_end":61}},{"value":"/     NaiveDate::from_num_days_from_ce(jd - 1721425)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119866,"byte_end":119920,"line_start":366,"line_end":366,"column_start":5,"column_end":59}},{"value":"/ }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119925,"byte_end":119930,"line_start":367,"line_end":367,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119935,"byte_end":119938,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ // January 1, 4713 BCE in Julian = November 24, 4714 BCE in Gregorian","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":119943,"byte_end":120016,"line_start":369,"line_end":369,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(jd_to_date(0), NaiveDate::from_ymd(-4713, 11, 24));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120021,"byte_end":120087,"line_start":370,"line_end":370,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120092,"byte_end":120095,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(jd_to_date(1721426), NaiveDate::from_ymd(1, 1, 1));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120100,"byte_end":120166,"line_start":372,"line_end":372,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(jd_to_date(2450000), NaiveDate::from_ymd(1995, 10, 9));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120171,"byte_end":120241,"line_start":373,"line_end":373,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(jd_to_date(2451545), NaiveDate::from_ymd(2000, 1, 1));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120246,"byte_end":120315,"line_start":374,"line_end":374,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120320,"byte_end":120328,"line_start":375,"line_end":375,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120333,"byte_end":120342,"line_start":376,"line_end":376,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":121321,"byte_end":121346,"line_start":401,"line_end":401,"column_start":12,"column_end":37},"name":"from_num_days_from_ce_opt","qualname":"<NaiveDate>::from_num_days_from_ce_opt","value":"fn (days: i32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\n in the proleptic Gregorian calendar.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120492,"byte_end":120570,"line_start":381,"line_end":381,"column_start":5,"column_end":83}},{"value":"/ in the proleptic Gregorian calendar.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120575,"byte_end":120615,"line_start":382,"line_end":382,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120620,"byte_end":120623,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120628,"byte_end":120672,"line_start":384,"line_end":384,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120677,"byte_end":120680,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120685,"byte_end":120698,"line_start":386,"line_end":386,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120703,"byte_end":120706,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120711,"byte_end":120719,"line_start":388,"line_end":388,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120724,"byte_end":120750,"line_start":389,"line_end":389,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120755,"byte_end":120758,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ let from_ndays_opt = NaiveDate::from_num_days_from_ce_opt;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120763,"byte_end":120825,"line_start":391,"line_end":391,"column_start":5,"column_end":67}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120830,"byte_end":120869,"line_start":392,"line_end":392,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120874,"byte_end":120877,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_ndays_opt(730_000),      Some(from_ymd(1999, 9, 3)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120882,"byte_end":120955,"line_start":394,"line_end":394,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(from_ndays_opt(1),            Some(from_ymd(1, 1, 1)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":120960,"byte_end":121030,"line_start":395,"line_end":395,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ndays_opt(0),            Some(from_ymd(0, 12, 31)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":121035,"byte_end":121107,"line_start":396,"line_end":396,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(-1),           Some(from_ymd(0, 12, 30)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":121112,"byte_end":121184,"line_start":397,"line_end":397,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(100_000_000),  None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":121189,"byte_end":121240,"line_start":398,"line_end":398,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(from_ndays_opt(-100_000_000), None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":121245,"byte_end":121296,"line_start":399,"line_end":399,"column_start":5,"column_end":56}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":121301,"byte_end":121309,"line_start":400,"line_end":400,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123368,"byte_end":123382,"line_start":452,"line_end":452,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDate>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDate`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDate`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":121799,"byte_end":121882,"line_start":410,"line_end":410,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":121887,"byte_end":121957,"line_start":411,"line_end":411,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":121962,"byte_end":122000,"line_start":412,"line_end":412,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122005,"byte_end":122008,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122013,"byte_end":122026,"line_start":414,"line_end":414,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122031,"byte_end":122034,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122039,"byte_end":122047,"line_start":416,"line_end":416,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122052,"byte_end":122078,"line_start":417,"line_end":417,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122083,"byte_end":122086,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122091,"byte_end":122142,"line_start":419,"line_end":419,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122147,"byte_end":122150,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05\", \"%Y-%m-%d\"),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122155,"byte_end":122211,"line_start":421,"line_end":421,"column_start":5,"column_end":61}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122216,"byte_end":122268,"line_start":422,"line_end":422,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015\", \"%d%b%Y\"),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122273,"byte_end":122325,"line_start":423,"line_end":423,"column_start":5,"column_end":57}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122330,"byte_end":122382,"line_start":424,"line_end":424,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122387,"byte_end":122395,"line_start":425,"line_end":425,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122400,"byte_end":122403,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ Time and offset is ignored for the purpose of parsing.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122408,"byte_end":122466,"line_start":427,"line_end":427,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122471,"byte_end":122474,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122479,"byte_end":122487,"line_start":429,"line_end":429,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122492,"byte_end":122520,"line_start":430,"line_end":430,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122525,"byte_end":122578,"line_start":431,"line_end":431,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122583,"byte_end":122664,"line_start":432,"line_end":432,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122669,"byte_end":122722,"line_start":433,"line_end":433,"column_start":5,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122727,"byte_end":122735,"line_start":434,"line_end":434,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122740,"byte_end":122743,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ Out-of-bound dates or insufficient fields are errors.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122748,"byte_end":122805,"line_start":436,"line_end":436,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122810,"byte_end":122813,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122818,"byte_end":122826,"line_start":438,"line_end":438,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122831,"byte_end":122859,"line_start":439,"line_end":439,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122864,"byte_end":122917,"line_start":440,"line_end":440,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"2015/9\", \"%Y/%m\").is_err());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122922,"byte_end":122978,"line_start":441,"line_end":441,"column_start":5,"column_end":61}},{"value":"/ assert!(parse_from_str(\"2015/9/31\", \"%Y/%m/%d\").is_err());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":122983,"byte_end":123045,"line_start":442,"line_end":442,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123050,"byte_end":123058,"line_start":443,"line_end":443,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123063,"byte_end":123066,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123071,"byte_end":123153,"line_start":445,"line_end":445,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123158,"byte_end":123161,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123166,"byte_end":123174,"line_start":447,"line_end":447,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123179,"byte_end":123207,"line_start":448,"line_end":448,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123212,"byte_end":123265,"line_start":449,"line_end":449,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"Sat, 09 Aug 2013\", \"%a, %d %b %Y\").is_err());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123270,"byte_end":123343,"line_start":450,"line_end":450,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123348,"byte_end":123356,"line_start":451,"line_end":451,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124036,"byte_end":124044,"line_start":473,"line_end":473,"column_start":12,"column_end":20},"name":"and_time","qualname":"<NaiveDate>::and_time","value":"fn (&self, time: NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123575,"byte_end":123651,"line_start":458,"line_end":458,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123656,"byte_end":123659,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123664,"byte_end":123677,"line_start":460,"line_end":460,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123682,"byte_end":123685,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123690,"byte_end":123698,"line_start":462,"line_end":462,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123703,"byte_end":123757,"line_start":463,"line_end":463,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123762,"byte_end":123765,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123770,"byte_end":123814,"line_start":465,"line_end":465,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123819,"byte_end":123874,"line_start":466,"line_end":466,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123879,"byte_end":123882,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_time(t);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123887,"byte_end":123929,"line_start":468,"line_end":468,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123934,"byte_end":123963,"line_start":469,"line_end":469,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":123968,"byte_end":123997,"line_start":470,"line_end":470,"column_start":5,"column_end":34}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124002,"byte_end":124010,"line_start":471,"line_end":471,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124015,"byte_end":124024,"line_start":472,"line_end":472,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124860,"byte_end":124867,"line_start":497,"line_end":497,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<NaiveDate>::and_hms","value":"fn (&self, hour: u32, min: u32, sec: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124139,"byte_end":124218,"line_start":477,"line_end":477,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124223,"byte_end":124226,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124231,"byte_end":124314,"line_start":479,"line_end":479,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124319,"byte_end":124393,"line_start":480,"line_end":480,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124398,"byte_end":124401,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124406,"byte_end":124455,"line_start":482,"line_end":482,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124460,"byte_end":124463,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124468,"byte_end":124481,"line_start":484,"line_end":484,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124486,"byte_end":124489,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124494,"byte_end":124502,"line_start":486,"line_end":486,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124507,"byte_end":124579,"line_start":487,"line_end":487,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124584,"byte_end":124587,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124592,"byte_end":124636,"line_start":489,"line_end":489,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124641,"byte_end":124644,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms(12, 34, 56);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124649,"byte_end":124699,"line_start":491,"line_end":491,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124704,"byte_end":124736,"line_start":492,"line_end":492,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124741,"byte_end":124784,"line_start":493,"line_end":493,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124789,"byte_end":124821,"line_start":494,"line_end":494,"column_start":5,"column_end":37}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124826,"byte_end":124834,"line_start":495,"line_end":495,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":124839,"byte_end":124848,"line_start":496,"line_end":496,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":125753,"byte_end":125764,"line_start":520,"line_end":520,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<NaiveDate>::and_hms_opt","value":"fn (&self, hour: u32, min: u32, sec: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":125000,"byte_end":125079,"line_start":501,"line_end":501,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":125084,"byte_end":125087,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":125092,"byte_end":125175,"line_start":503,"line_end":503,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":125180,"byte_end":125258,"line_start":504,"line_end":504,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":125263,"byte_end":125266,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":125271,"byte_end":125328,"line_start":506,"line_end":506,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":125333,"byte_end":125336,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":125341,"byte_end":125354,"line_start":508,"line_end":508,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":125359,"byte_end":125362,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":125367,"byte_end":125375,"line_start":510,"line_end":510,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":125380,"byte_end":125406,"line_start":511,"line_end":511,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":125411,"byte_end":125414,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":125419,"byte_end":125463,"line_start":513,"line_end":513,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_opt(12, 34, 56).is_some());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":125468,"byte_end":125517,"line_start":514,"line_end":514,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(12, 34, 60).is_none()); // use `and_hms_milli_opt` instead","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":125522,"byte_end":125606,"line_start":515,"line_end":515,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_opt(12, 60, 56).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":125611,"byte_end":125660,"line_start":516,"line_end":516,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(24, 34, 56).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":125665,"byte_end":125714,"line_start":517,"line_end":517,"column_start":5,"column_end":54}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":125719,"byte_end":125727,"line_start":518,"line_end":518,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":125732,"byte_end":125741,"line_start":519,"line_end":519,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126703,"byte_end":126716,"line_start":545,"line_end":545,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<NaiveDate>::and_hms_milli","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":125921,"byte_end":126013,"line_start":524,"line_end":524,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126018,"byte_end":126021,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126026,"byte_end":126067,"line_start":526,"line_end":526,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126072,"byte_end":126162,"line_start":527,"line_end":527,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126167,"byte_end":126170,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126175,"byte_end":126237,"line_start":529,"line_end":529,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126242,"byte_end":126245,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126250,"byte_end":126263,"line_start":531,"line_end":531,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126268,"byte_end":126271,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126276,"byte_end":126284,"line_start":533,"line_end":533,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126289,"byte_end":126361,"line_start":534,"line_end":534,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126366,"byte_end":126369,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126374,"byte_end":126418,"line_start":536,"line_end":536,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126423,"byte_end":126426,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_milli(12, 34, 56, 789);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126431,"byte_end":126492,"line_start":538,"line_end":538,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126497,"byte_end":126529,"line_start":539,"line_end":539,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126534,"byte_end":126577,"line_start":540,"line_end":540,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126582,"byte_end":126614,"line_start":541,"line_end":541,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_000_000);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126619,"byte_end":126664,"line_start":542,"line_end":542,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126669,"byte_end":126677,"line_start":543,"line_end":543,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126682,"byte_end":126691,"line_start":544,"line_end":544,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":127789,"byte_end":127806,"line_start":570,"line_end":570,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<NaiveDate>::and_hms_milli_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126874,"byte_end":126966,"line_start":549,"line_end":549,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126971,"byte_end":126974,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":126979,"byte_end":127020,"line_start":551,"line_end":551,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":127025,"byte_end":127115,"line_start":552,"line_end":552,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":127120,"byte_end":127123,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":127128,"byte_end":127198,"line_start":554,"line_end":554,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":127203,"byte_end":127206,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":127211,"byte_end":127224,"line_start":556,"line_end":556,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":127229,"byte_end":127232,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":127237,"byte_end":127245,"line_start":558,"line_end":558,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":127250,"byte_end":127276,"line_start":559,"line_end":559,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":127281,"byte_end":127284,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":127289,"byte_end":127333,"line_start":561,"line_end":561,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 56,   789).is_some());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":127338,"byte_end":127400,"line_start":562,"line_end":562,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 1_789).is_some()); // leap second","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":127405,"byte_end":127482,"line_start":563,"line_end":563,"column_start":5,"column_end":82}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 2_789).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":127487,"byte_end":127549,"line_start":564,"line_end":564,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 60,   789).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":127554,"byte_end":127616,"line_start":565,"line_end":565,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 60, 56,   789).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":127621,"byte_end":127683,"line_start":566,"line_end":566,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(24, 34, 56,   789).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":127688,"byte_end":127750,"line_start":567,"line_end":567,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":127755,"byte_end":127763,"line_start":568,"line_end":568,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":127768,"byte_end":127777,"line_start":569,"line_end":569,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128807,"byte_end":128820,"line_start":596,"line_end":596,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<NaiveDate>::and_hms_micro","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128017,"byte_end":128109,"line_start":575,"line_end":575,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128114,"byte_end":128117,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128122,"byte_end":128167,"line_start":577,"line_end":577,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128172,"byte_end":128262,"line_start":578,"line_end":578,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128267,"byte_end":128270,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128275,"byte_end":128337,"line_start":580,"line_end":580,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128342,"byte_end":128345,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128350,"byte_end":128363,"line_start":582,"line_end":582,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128368,"byte_end":128371,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128376,"byte_end":128384,"line_start":584,"line_end":584,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128389,"byte_end":128461,"line_start":585,"line_end":585,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128466,"byte_end":128469,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128474,"byte_end":128518,"line_start":587,"line_end":587,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128523,"byte_end":128526,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_micro(12, 34, 56, 789_012);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128531,"byte_end":128596,"line_start":589,"line_end":589,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128601,"byte_end":128633,"line_start":590,"line_end":590,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128638,"byte_end":128681,"line_start":591,"line_end":591,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128686,"byte_end":128718,"line_start":592,"line_end":592,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_000);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128723,"byte_end":128768,"line_start":593,"line_end":593,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128773,"byte_end":128781,"line_start":594,"line_end":594,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128786,"byte_end":128795,"line_start":595,"line_end":595,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":129921,"byte_end":129938,"line_start":621,"line_end":621,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<NaiveDate>::and_hms_micro_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":128978,"byte_end":129070,"line_start":600,"line_end":600,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":129075,"byte_end":129078,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":129083,"byte_end":129128,"line_start":602,"line_end":602,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":129133,"byte_end":129223,"line_start":603,"line_end":603,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":129228,"byte_end":129231,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":129236,"byte_end":129306,"line_start":605,"line_end":605,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":129311,"byte_end":129314,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":129319,"byte_end":129332,"line_start":607,"line_end":607,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":129337,"byte_end":129340,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":129345,"byte_end":129353,"line_start":609,"line_end":609,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":129358,"byte_end":129384,"line_start":610,"line_end":610,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":129389,"byte_end":129392,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":129397,"byte_end":129441,"line_start":612,"line_end":612,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 56,   789_012).is_some());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":129446,"byte_end":129512,"line_start":613,"line_end":613,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 1_789_012).is_some()); // leap second","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":129517,"byte_end":129598,"line_start":614,"line_end":614,"column_start":5,"column_end":86}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 2_789_012).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":129603,"byte_end":129669,"line_start":615,"line_end":615,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 60,   789_012).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":129674,"byte_end":129740,"line_start":616,"line_end":616,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 60, 56,   789_012).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":129745,"byte_end":129811,"line_start":617,"line_end":617,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(24, 34, 56,   789_012).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":129816,"byte_end":129882,"line_start":618,"line_end":618,"column_start":5,"column_end":71}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":129887,"byte_end":129895,"line_start":619,"line_end":619,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":129900,"byte_end":129909,"line_start":620,"line_end":620,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130943,"byte_end":130955,"line_start":647,"line_end":647,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<NaiveDate>::and_hms_nano","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130149,"byte_end":130240,"line_start":626,"line_end":626,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130245,"byte_end":130248,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130253,"byte_end":130301,"line_start":628,"line_end":628,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130306,"byte_end":130396,"line_start":629,"line_end":629,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130401,"byte_end":130404,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130409,"byte_end":130470,"line_start":631,"line_end":631,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130475,"byte_end":130478,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130483,"byte_end":130496,"line_start":633,"line_end":633,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130501,"byte_end":130504,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130509,"byte_end":130517,"line_start":635,"line_end":635,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130522,"byte_end":130594,"line_start":636,"line_end":636,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130599,"byte_end":130602,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130607,"byte_end":130651,"line_start":638,"line_end":638,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130656,"byte_end":130659,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_nano(12, 34, 56, 789_012_345);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130664,"byte_end":130732,"line_start":640,"line_end":640,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130737,"byte_end":130769,"line_start":641,"line_end":641,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130774,"byte_end":130817,"line_start":642,"line_end":642,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130822,"byte_end":130854,"line_start":643,"line_end":643,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_345);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130859,"byte_end":130904,"line_start":644,"line_end":644,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130909,"byte_end":130917,"line_start":645,"line_end":645,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":130922,"byte_end":130931,"line_start":646,"line_end":646,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":132072,"byte_end":132088,"line_start":672,"line_end":672,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<NaiveDate>::and_hms_nano_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":131110,"byte_end":131201,"line_start":651,"line_end":651,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":131206,"byte_end":131209,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":131214,"byte_end":131262,"line_start":653,"line_end":653,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":131267,"byte_end":131357,"line_start":654,"line_end":654,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":131362,"byte_end":131365,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":131370,"byte_end":131439,"line_start":656,"line_end":656,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":131444,"byte_end":131447,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":131452,"byte_end":131465,"line_start":658,"line_end":658,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":131470,"byte_end":131473,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":131478,"byte_end":131486,"line_start":660,"line_end":660,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":131491,"byte_end":131517,"line_start":661,"line_end":661,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":131522,"byte_end":131525,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":131530,"byte_end":131574,"line_start":663,"line_end":663,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 56,   789_012_345).is_some());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":131579,"byte_end":131648,"line_start":664,"line_end":664,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 1_789_012_345).is_some()); // leap second","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":131653,"byte_end":131737,"line_start":665,"line_end":665,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 2_789_012_345).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":131742,"byte_end":131811,"line_start":666,"line_end":666,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 60,   789_012_345).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":131816,"byte_end":131885,"line_start":667,"line_end":667,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 60, 56,   789_012_345).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":131890,"byte_end":131959,"line_start":668,"line_end":668,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(24, 34, 56,   789_012_345).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":131964,"byte_end":132033,"line_start":669,"line_end":669,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":132038,"byte_end":132046,"line_start":670,"line_end":670,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":132051,"byte_end":132060,"line_start":671,"line_end":671,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":133761,"byte_end":133765,"line_start":724,"line_end":724,"column_start":12,"column_end":16},"name":"succ","qualname":"<NaiveDate>::succ","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":133229,"byte_end":133284,"line_start":710,"line_end":710,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":133289,"byte_end":133292,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":133297,"byte_end":133351,"line_start":712,"line_end":712,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":133356,"byte_end":133359,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":133364,"byte_end":133377,"line_start":714,"line_end":714,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":133382,"byte_end":133385,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":133390,"byte_end":133398,"line_start":716,"line_end":716,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":133403,"byte_end":133429,"line_start":717,"line_end":717,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":133434,"byte_end":133437,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6,  3).succ(), NaiveDate::from_ymd(2015, 6, 4));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":133442,"byte_end":133532,"line_start":719,"line_end":719,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6, 30).succ(), NaiveDate::from_ymd(2015, 7, 1));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":133537,"byte_end":133627,"line_start":720,"line_end":720,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 12, 31).succ(), NaiveDate::from_ymd(2016, 1, 1));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":133632,"byte_end":133722,"line_start":721,"line_end":721,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":133727,"byte_end":133735,"line_start":722,"line_end":722,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":133740,"byte_end":133749,"line_start":723,"line_end":723,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134307,"byte_end":134315,"line_start":743,"line_end":743,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<NaiveDate>::succ_opt","value":"fn (&self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":133846,"byte_end":133901,"line_start":728,"line_end":728,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":133906,"byte_end":133909,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":133914,"byte_end":133976,"line_start":730,"line_end":730,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":133981,"byte_end":133984,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":133989,"byte_end":134002,"line_start":732,"line_end":732,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134007,"byte_end":134010,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134015,"byte_end":134023,"line_start":734,"line_end":734,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134028,"byte_end":134054,"line_start":735,"line_end":735,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MAX_DATE;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134059,"byte_end":134091,"line_start":736,"line_end":736,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134096,"byte_end":134099,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).succ_opt(),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134104,"byte_end":134162,"line_start":738,"line_end":738,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 4)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134167,"byte_end":134221,"line_start":739,"line_end":739,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MAX_DATE.succ_opt(), None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134226,"byte_end":134268,"line_start":740,"line_end":740,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134273,"byte_end":134281,"line_start":741,"line_end":741,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134286,"byte_end":134295,"line_start":742,"line_end":742,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134992,"byte_end":134996,"line_start":761,"line_end":761,"column_start":12,"column_end":16},"name":"pred","qualname":"<NaiveDate>::pred","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134455,"byte_end":134514,"line_start":747,"line_end":747,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134519,"byte_end":134522,"line_start":748,"line_end":748,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134527,"byte_end":134582,"line_start":749,"line_end":749,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134587,"byte_end":134590,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134595,"byte_end":134608,"line_start":751,"line_end":751,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134613,"byte_end":134616,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134621,"byte_end":134629,"line_start":753,"line_end":753,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134634,"byte_end":134660,"line_start":754,"line_end":754,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134665,"byte_end":134668,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred(), NaiveDate::from_ymd(2015,  6,  2));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134673,"byte_end":134763,"line_start":756,"line_end":756,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 1).pred(), NaiveDate::from_ymd(2015,  5, 31));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134768,"byte_end":134858,"line_start":757,"line_end":757,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 1, 1).pred(), NaiveDate::from_ymd(2014, 12, 31));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134863,"byte_end":134953,"line_start":758,"line_end":758,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134958,"byte_end":134966,"line_start":759,"line_end":759,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":134971,"byte_end":134980,"line_start":760,"line_end":760,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135543,"byte_end":135551,"line_start":780,"line_end":780,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<NaiveDate>::pred_opt","value":"fn (&self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135077,"byte_end":135136,"line_start":765,"line_end":765,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135141,"byte_end":135144,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135149,"byte_end":135212,"line_start":767,"line_end":767,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135217,"byte_end":135220,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135225,"byte_end":135238,"line_start":769,"line_end":769,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135243,"byte_end":135246,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135251,"byte_end":135259,"line_start":771,"line_end":771,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135264,"byte_end":135290,"line_start":772,"line_end":772,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MIN_DATE;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135295,"byte_end":135327,"line_start":773,"line_end":773,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135332,"byte_end":135335,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred_opt(),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135340,"byte_end":135398,"line_start":775,"line_end":775,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 2)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135403,"byte_end":135457,"line_start":776,"line_end":776,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MIN_DATE.pred_opt(), None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135462,"byte_end":135504,"line_start":777,"line_end":777,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135509,"byte_end":135517,"line_start":778,"line_end":778,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135522,"byte_end":135531,"line_start":779,"line_end":779,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":136598,"byte_end":136616,"line_start":806,"line_end":806,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDate>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Adds the `days` part of given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds the `days` part of given `Duration` to the current date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135693,"byte_end":135758,"line_start":784,"line_end":784,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135763,"byte_end":135766,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135771,"byte_end":135822,"line_start":786,"line_end":786,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135827,"byte_end":135830,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135835,"byte_end":135848,"line_start":788,"line_end":788,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135853,"byte_end":135856,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135861,"byte_end":135869,"line_start":790,"line_end":790,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135874,"byte_end":135931,"line_start":791,"line_end":791,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135936,"byte_end":135962,"line_start":792,"line_end":792,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MAX_DATE;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":135967,"byte_end":135999,"line_start":793,"line_end":793,"column_start":5,"column_end":37}},{"value":"/ use time::Duration;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":136004,"byte_end":136027,"line_start":794,"line_end":794,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":136032,"byte_end":136035,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":136040,"byte_end":136084,"line_start":796,"line_end":796,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(40)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":136089,"byte_end":136145,"line_start":797,"line_end":797,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":136150,"byte_end":136206,"line_start":798,"line_end":798,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-40)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":136211,"byte_end":136268,"line_start":799,"line_end":799,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":136273,"byte_end":136328,"line_start":800,"line_end":800,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":136333,"byte_end":136407,"line_start":801,"line_end":801,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":136412,"byte_end":136487,"line_start":802,"line_end":802,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(MAX_DATE.checked_add_signed(Duration::days(1)), None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":136492,"byte_end":136561,"line_start":803,"line_end":803,"column_start":5,"column_end":74}},{"value":"/ # }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":136566,"byte_end":136573,"line_start":804,"line_end":804,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":136578,"byte_end":136586,"line_start":805,"line_end":805,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":138249,"byte_end":138267,"line_start":842,"line_end":842,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDate>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts the `days` part of given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts the `days` part of given `Duration` from the current date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":137337,"byte_end":137409,"line_start":820,"line_end":820,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":137414,"byte_end":137417,"line_start":821,"line_end":821,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":137422,"byte_end":137473,"line_start":822,"line_end":822,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":137478,"byte_end":137481,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":137486,"byte_end":137499,"line_start":824,"line_end":824,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":137504,"byte_end":137507,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":137512,"byte_end":137520,"line_start":826,"line_end":826,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":137525,"byte_end":137582,"line_start":827,"line_end":827,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":137587,"byte_end":137613,"line_start":828,"line_end":828,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MIN_DATE;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":137618,"byte_end":137650,"line_start":829,"line_end":829,"column_start":5,"column_end":37}},{"value":"/ use time::Duration;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":137655,"byte_end":137678,"line_start":830,"line_end":830,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":137683,"byte_end":137686,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":137691,"byte_end":137735,"line_start":832,"line_end":832,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(40)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":137740,"byte_end":137796,"line_start":833,"line_end":833,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":137801,"byte_end":137856,"line_start":834,"line_end":834,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-40)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":137861,"byte_end":137918,"line_start":835,"line_end":835,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":137923,"byte_end":137979,"line_start":836,"line_end":836,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":137984,"byte_end":138058,"line_start":837,"line_end":837,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":138063,"byte_end":138138,"line_start":838,"line_end":838,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(MIN_DATE.checked_sub_signed(Duration::days(1)), None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":138143,"byte_end":138212,"line_start":839,"line_end":839,"column_start":5,"column_end":74}},{"value":"/ # }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":138217,"byte_end":138224,"line_start":840,"line_end":840,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":138229,"byte_end":138237,"line_start":841,"line_end":841,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":140193,"byte_end":140214,"line_start":881,"line_end":881,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDate>::signed_duration_since","value":"fn (self, rhs: NaiveDate) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDate` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDate` from the current date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":138988,"byte_end":139044,"line_start":856,"line_end":856,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":139049,"byte_end":139094,"line_start":857,"line_end":857,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":139099,"byte_end":139102,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":139107,"byte_end":139154,"line_start":859,"line_end":859,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":139159,"byte_end":139218,"line_start":860,"line_end":860,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":139223,"byte_end":139226,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":139231,"byte_end":139244,"line_start":862,"line_end":862,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":139249,"byte_end":139252,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":139257,"byte_end":139265,"line_start":864,"line_end":864,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":139270,"byte_end":139327,"line_start":865,"line_end":865,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":139332,"byte_end":139358,"line_start":866,"line_end":866,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":139363,"byte_end":139386,"line_start":867,"line_end":867,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":139391,"byte_end":139394,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":139399,"byte_end":139438,"line_start":869,"line_end":869,"column_start":5,"column_end":44}},{"value":"/ let since = NaiveDate::signed_duration_since;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":139443,"byte_end":139492,"line_start":870,"line_end":870,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":139497,"byte_end":139500,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 1)), Duration::zero());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":139505,"byte_end":139589,"line_start":872,"line_end":872,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 12, 31)), Duration::days(1));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":139594,"byte_end":139681,"line_start":873,"line_end":873,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 2)), Duration::days(-1));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":139686,"byte_end":139772,"line_start":874,"line_end":874,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 9, 23)), Duration::days(100));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":139777,"byte_end":139865,"line_start":875,"line_end":875,"column_start":5,"column_end":93}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 1, 1)), Duration::days(365));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":139870,"byte_end":139957,"line_start":876,"line_end":876,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2010, 1, 1)), Duration::days(365*4 + 1));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":139962,"byte_end":140055,"line_start":877,"line_end":877,"column_start":5,"column_end":98}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(1614, 1, 1)), Duration::days(365*400 + 97));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":140060,"byte_end":140156,"line_start":878,"line_end":878,"column_start":5,"column_end":101}},{"value":"/ # }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":140161,"byte_end":140168,"line_start":879,"line_end":879,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":140173,"byte_end":140181,"line_start":880,"line_end":880,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141915,"byte_end":141932,"line_start":920,"line_end":920,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDate>::format_with_items","value":"fn <'a, I> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n Otherwise it is same to the ordinary `format` method.","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":140808,"byte_end":140865,"line_start":892,"line_end":892,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is same to the ordinary `format` method.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":140870,"byte_end":140927,"line_start":893,"line_end":893,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":140932,"byte_end":140935,"line_start":894,"line_end":894,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":140940,"byte_end":140990,"line_start":895,"line_end":895,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":140995,"byte_end":141073,"line_start":896,"line_end":896,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141078,"byte_end":141081,"line_start":897,"line_end":897,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141086,"byte_end":141099,"line_start":898,"line_end":898,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141104,"byte_end":141107,"line_start":899,"line_end":899,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141112,"byte_end":141120,"line_start":900,"line_end":900,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141125,"byte_end":141151,"line_start":901,"line_end":901,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141156,"byte_end":141204,"line_start":902,"line_end":902,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141209,"byte_end":141212,"line_start":903,"line_end":903,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141217,"byte_end":141262,"line_start":904,"line_end":904,"column_start":5,"column_end":50}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141267,"byte_end":141311,"line_start":905,"line_end":905,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format_with_items(fmt.clone()).to_string(), \"2015-09-05\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141316,"byte_end":141391,"line_start":906,"line_end":906,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(),             \"2015-09-05\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141396,"byte_end":141471,"line_start":907,"line_end":907,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141476,"byte_end":141484,"line_start":908,"line_end":908,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141489,"byte_end":141492,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141497,"byte_end":141581,"line_start":910,"line_end":910,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141586,"byte_end":141589,"line_start":911,"line_end":911,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141594,"byte_end":141602,"line_start":912,"line_end":912,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141607,"byte_end":141635,"line_start":913,"line_end":913,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141640,"byte_end":141690,"line_start":914,"line_end":914,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d\").clone();","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141695,"byte_end":141750,"line_start":915,"line_end":915,"column_start":5,"column_end":60}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141755,"byte_end":141801,"line_start":916,"line_end":916,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format_with_items(fmt)), \"2015-09-05\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141806,"byte_end":141876,"line_start":917,"line_end":917,"column_start":5,"column_end":75}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141881,"byte_end":141889,"line_start":918,"line_end":918,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":141894,"byte_end":141903,"line_start":919,"line_end":919,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":143530,"byte_end":143536,"line_start":958,"line_end":958,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDate>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":142096,"byte_end":142150,"line_start":925,"line_end":925,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":142155,"byte_end":142225,"line_start":926,"line_end":926,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":142230,"byte_end":142268,"line_start":927,"line_end":927,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":142273,"byte_end":142276,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":142281,"byte_end":142316,"line_start":929,"line_end":929,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":142321,"byte_end":142394,"line_start":930,"line_end":930,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":142399,"byte_end":142456,"line_start":931,"line_end":931,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":142461,"byte_end":142523,"line_start":932,"line_end":932,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":142528,"byte_end":142588,"line_start":933,"line_end":933,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":142593,"byte_end":142596,"line_start":934,"line_end":934,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":142601,"byte_end":142665,"line_start":935,"line_end":935,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":142670,"byte_end":142733,"line_start":936,"line_end":936,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":142738,"byte_end":142813,"line_start":937,"line_end":937,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":142818,"byte_end":142821,"line_start":938,"line_end":938,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":142826,"byte_end":142839,"line_start":939,"line_end":939,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":142844,"byte_end":142847,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":142852,"byte_end":142860,"line_start":941,"line_end":941,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":142865,"byte_end":142891,"line_start":942,"line_end":942,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":142896,"byte_end":142899,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":142904,"byte_end":142948,"line_start":944,"line_end":944,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(), \"2015-09-05\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":142953,"byte_end":143016,"line_start":945,"line_end":945,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(d.format(\"%A, %-d %B, %C%y\").to_string(), \"Saturday, 5 September, 2015\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":143021,"byte_end":143109,"line_start":946,"line_end":946,"column_start":5,"column_end":93}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":143114,"byte_end":143122,"line_start":947,"line_end":947,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":143127,"byte_end":143130,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":143135,"byte_end":143219,"line_start":949,"line_end":949,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":143224,"byte_end":143227,"line_start":950,"line_end":950,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":143232,"byte_end":143240,"line_start":951,"line_end":951,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":143245,"byte_end":143273,"line_start":952,"line_end":952,"column_start":5,"column_end":33}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":143278,"byte_end":143324,"line_start":953,"line_end":953,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%Y-%m-%d\")), \"2015-09-05\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":143329,"byte_end":143395,"line_start":954,"line_end":954,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%A, %-d %B, %C%y\")), \"Saturday, 5 September, 2015\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":143400,"byte_end":143491,"line_start":955,"line_end":955,"column_start":5,"column_end":96}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":143496,"byte_end":143504,"line_start":956,"line_end":956,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":143509,"byte_end":143518,"line_start":957,"line_end":957,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1451},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":189384,"byte_end":189391,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"IsoWeek","qualname":"::naive::isoweek::IsoWeek","value":"IsoWeek {  }","parent":null,"children":[{"krate":0,"index":1452}],"decl_id":null,"docs":" ISO 8601 week.","sig":null,"attributes":[{"value":"/ ISO 8601 week.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":188978,"byte_end":188996,"line_start":10,"line_end":10,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":188997,"byte_end":189000,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This type, combined with [`Weekday`](../enum.Weekday.html),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":189001,"byte_end":189064,"line_start":12,"line_end":12,"column_start":1,"column_end":64}},{"value":"/ constitues the ISO 8601 [week date](./struct.NaiveDate.html#week-date).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":189065,"byte_end":189140,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/ One can retrieve this type from the existing [`Datelike`](../trait.Datelike.html) types","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":189141,"byte_end":189232,"line_start":14,"line_end":14,"column_start":1,"column_end":92}},{"value":"/ via the [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) method.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":189233,"byte_end":189317,"line_start":15,"line_end":15,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191329,"byte_end":191333,"line_start":68,"line_end":68,"column_start":12,"column_end":16},"name":"year","qualname":"<IsoWeek>::year","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the year number for this ISO week.","sig":null,"attributes":[{"value":"/ Returns the year number for this ISO week.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":190671,"byte_end":190717,"line_start":47,"line_end":47,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":190722,"byte_end":190725,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":190730,"byte_end":190743,"line_start":49,"line_end":49,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":190748,"byte_end":190751,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":190756,"byte_end":190764,"line_start":51,"line_end":51,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":190769,"byte_end":190816,"line_start":52,"line_end":52,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":190821,"byte_end":190824,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":190829,"byte_end":190887,"line_start":54,"line_end":54,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":190892,"byte_end":190934,"line_start":55,"line_end":55,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":190939,"byte_end":190947,"line_start":56,"line_end":56,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":190952,"byte_end":190955,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This year number might not match the calendar year number.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":190960,"byte_end":191022,"line_start":58,"line_end":58,"column_start":5,"column_end":67}},{"value":"/ Continuing the example...","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191027,"byte_end":191056,"line_start":59,"line_end":59,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191061,"byte_end":191064,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191069,"byte_end":191077,"line_start":61,"line_end":61,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191082,"byte_end":191131,"line_start":62,"line_end":62,"column_start":5,"column_end":54}},{"value":"/ # let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191136,"byte_end":191196,"line_start":63,"line_end":63,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(d.year(), 2014);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191201,"byte_end":191232,"line_start":64,"line_end":64,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d, NaiveDate::from_ymd(2014, 12, 29));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191237,"byte_end":191290,"line_start":65,"line_end":65,"column_start":5,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191295,"byte_end":191303,"line_start":66,"line_end":66,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191308,"byte_end":191317,"line_start":67,"line_end":67,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191783,"byte_end":191787,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"week","qualname":"<IsoWeek>::week","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 1.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191384,"byte_end":191432,"line_start":72,"line_end":72,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191437,"byte_end":191440,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 53. (The last week of year differs by years.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191445,"byte_end":191528,"line_start":74,"line_end":74,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191533,"byte_end":191536,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191541,"byte_end":191554,"line_start":76,"line_end":76,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191559,"byte_end":191562,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191567,"byte_end":191575,"line_start":78,"line_end":78,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191580,"byte_end":191627,"line_start":79,"line_end":79,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191632,"byte_end":191635,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191640,"byte_end":191699,"line_start":81,"line_end":81,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week(), 15);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191704,"byte_end":191744,"line_start":82,"line_end":82,"column_start":5,"column_end":45}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191749,"byte_end":191757,"line_start":83,"line_end":83,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191762,"byte_end":191771,"line_start":84,"line_end":84,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":192255,"byte_end":192260,"line_start":102,"line_end":102,"column_start":12,"column_end":17},"name":"week0","qualname":"<IsoWeek>::week0","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 0.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191855,"byte_end":191903,"line_start":89,"line_end":89,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191908,"byte_end":191911,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 52. (The last week of year differs by years.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":191916,"byte_end":191999,"line_start":91,"line_end":91,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":192004,"byte_end":192007,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":192012,"byte_end":192025,"line_start":93,"line_end":93,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":192030,"byte_end":192033,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":192038,"byte_end":192046,"line_start":95,"line_end":95,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":192051,"byte_end":192098,"line_start":96,"line_end":96,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":192103,"byte_end":192106,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":192111,"byte_end":192170,"line_start":98,"line_end":98,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week0(), 14);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":192175,"byte_end":192216,"line_start":99,"line_end":99,"column_start":5,"column_end":46}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":192221,"byte_end":192229,"line_start":100,"line_end":100,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":192234,"byte_end":192243,"line_start":101,"line_end":101,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1471},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":201872,"byte_end":201881,"line_start":175,"line_end":175,"column_start":12,"column_end":21},"name":"NaiveTime","qualname":"::naive::time::NaiveTime","value":"NaiveTime {  }","parent":null,"children":[{"krate":0,"index":1472},{"krate":0,"index":1473}],"decl_id":null,"docs":" ISO 8601 time without timezone.\n Allows for the nanosecond precision and optional leap second representation.","sig":null,"attributes":[{"value":"/ ISO 8601 time without timezone.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":194661,"byte_end":194696,"line_start":15,"line_end":15,"column_start":1,"column_end":36}},{"value":"/ Allows for the nanosecond precision and optional leap second representation.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":194697,"byte_end":194777,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":194778,"byte_end":194781,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Leap Second Handling","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":194782,"byte_end":194808,"line_start":18,"line_end":18,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":194809,"byte_end":194812,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Since 1960s, the manmade atomic clock has been so accurate that","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":194813,"byte_end":194880,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/ it is much more accurate than Earth's own motion.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":194881,"byte_end":194934,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/ It became desirable to define the civil time in terms of the atomic clock,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":194935,"byte_end":195013,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ but that risks the desynchronization of the civil time from Earth.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":195014,"byte_end":195084,"line_start":23,"line_end":23,"column_start":1,"column_end":71}},{"value":"/ To account for this, the designers of the Coordinated Universal Time (UTC)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":195085,"byte_end":195163,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ made that the UTC should be kept within 0.9 seconds of the observed Earth-bound time.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":195164,"byte_end":195253,"line_start":25,"line_end":25,"column_start":1,"column_end":90}},{"value":"/ When the mean solar day is longer than the ideal (86,400 seconds),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":195254,"byte_end":195324,"line_start":26,"line_end":26,"column_start":1,"column_end":71}},{"value":"/ the error slowly accumulates and it is necessary to add a **leap second**","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":195325,"byte_end":195402,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/ to slow the UTC down a bit.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":195403,"byte_end":195434,"line_start":28,"line_end":28,"column_start":1,"column_end":32}},{"value":"/ (We may also remove a second to speed the UTC up a bit, but it never happened.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":195435,"byte_end":195518,"line_start":29,"line_end":29,"column_start":1,"column_end":84}},{"value":"/ The leap second, if any, follows 23:59:59 of June 30 or December 31 in the UTC.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":195519,"byte_end":195602,"line_start":30,"line_end":30,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":195603,"byte_end":195606,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Fast forward to the 21st century,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":195607,"byte_end":195644,"line_start":32,"line_end":32,"column_start":1,"column_end":38}},{"value":"/ we have seen 26 leap seconds from January 1972 to December 2015.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":195645,"byte_end":195713,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/ Yes, 26 seconds. Probably you can read this paragraph within 26 seconds.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":195714,"byte_end":195790,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/ But those 26 seconds, and possibly more in the future, are never predictable,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":195791,"byte_end":195872,"line_start":35,"line_end":35,"column_start":1,"column_end":82}},{"value":"/ and whether to add a leap second or not is known only before 6 months.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":195873,"byte_end":195947,"line_start":36,"line_end":36,"column_start":1,"column_end":75}},{"value":"/ Internet-based clocks (via NTP) do account for known leap seconds,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":195948,"byte_end":196018,"line_start":37,"line_end":37,"column_start":1,"column_end":71}},{"value":"/ but the system API normally doesn't (and often can't, with no network connection)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":196019,"byte_end":196104,"line_start":38,"line_end":38,"column_start":1,"column_end":86}},{"value":"/ and there is no reliable way to retrieve leap second information.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":196105,"byte_end":196174,"line_start":39,"line_end":39,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":196175,"byte_end":196178,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Chrono does not try to accurately implement leap seconds; it is impossible.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":196179,"byte_end":196258,"line_start":41,"line_end":41,"column_start":1,"column_end":80}},{"value":"/ Rather, **it allows for leap seconds but behaves as if there are *no other* leap seconds.**","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":196259,"byte_end":196354,"line_start":42,"line_end":42,"column_start":1,"column_end":96}},{"value":"/ Various operations will ignore any possible leap second(s)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":196355,"byte_end":196417,"line_start":43,"line_end":43,"column_start":1,"column_end":63}},{"value":"/ except when any of the operands were actually leap seconds.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":196418,"byte_end":196481,"line_start":44,"line_end":44,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":196482,"byte_end":196485,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ If you cannot tolerate this behavior,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":196486,"byte_end":196527,"line_start":46,"line_end":46,"column_start":1,"column_end":42}},{"value":"/ you must use a separate `TimeZone` for the International Atomic Time (TAI).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":196528,"byte_end":196607,"line_start":47,"line_end":47,"column_start":1,"column_end":80}},{"value":"/ TAI is like UTC but has no leap seconds, and thus slightly differs from UTC.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":196608,"byte_end":196688,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ Chrono does not yet provide such implementation, but it is planned.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":196689,"byte_end":196760,"line_start":49,"line_end":49,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":196761,"byte_end":196764,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ## Representing Leap Seconds","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":196765,"byte_end":196797,"line_start":51,"line_end":51,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":196798,"byte_end":196801,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ The leap second is indicated via fractional seconds more than 1 second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":196802,"byte_end":196877,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"/ This makes possible to treat a leap second as the prior non-leap second","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":196878,"byte_end":196953,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/ if you don't care about sub-second accuracy.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":196954,"byte_end":197002,"line_start":55,"line_end":55,"column_start":1,"column_end":49}},{"value":"/ You should use the proper formatting to get the raw leap second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197003,"byte_end":197071,"line_start":56,"line_end":56,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197072,"byte_end":197075,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ All methods accepting fractional seconds will accept such values.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197076,"byte_end":197145,"line_start":58,"line_end":58,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197146,"byte_end":197149,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197150,"byte_end":197158,"line_start":60,"line_end":60,"column_start":1,"column_end":9}},{"value":"/ use chrono::{NaiveDate, NaiveTime, Utc, TimeZone};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197159,"byte_end":197213,"line_start":61,"line_end":61,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197214,"byte_end":197217,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ let t = NaiveTime::from_hms_milli(8, 59, 59, 1_000);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197218,"byte_end":197274,"line_start":63,"line_end":63,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197275,"byte_end":197278,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ let dt1 = NaiveDate::from_ymd(2015, 7, 1).and_hms_micro(8, 59, 59, 1_000_000);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197279,"byte_end":197361,"line_start":65,"line_end":65,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197362,"byte_end":197365,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ let dt2 = Utc.ymd(2015, 6, 30).and_hms_nano(23, 59, 59, 1_000_000_000);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197366,"byte_end":197441,"line_start":67,"line_end":67,"column_start":1,"column_end":76}},{"value":"/ # let _ = (t, dt1, dt2);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197442,"byte_end":197470,"line_start":68,"line_end":68,"column_start":1,"column_end":29}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197471,"byte_end":197479,"line_start":69,"line_end":69,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197480,"byte_end":197483,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ Note that the leap second can happen anytime given an appropriate time zone;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197484,"byte_end":197564,"line_start":71,"line_end":71,"column_start":1,"column_end":81}},{"value":"/ 2015-07-01 01:23:60 would be a proper leap second if UTC+01:24 had existed.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197565,"byte_end":197644,"line_start":72,"line_end":72,"column_start":1,"column_end":80}},{"value":"/ Practically speaking, though, by the time of the first leap second on 1972-06-30,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197645,"byte_end":197730,"line_start":73,"line_end":73,"column_start":1,"column_end":86}},{"value":"/ every time zone offset around the world has standardized to the 5-minute alignment.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197731,"byte_end":197818,"line_start":74,"line_end":74,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197819,"byte_end":197822,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ ## Date And Time Arithmetics","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197823,"byte_end":197855,"line_start":76,"line_end":76,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197856,"byte_end":197859,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ As a concrete example, let's assume that `03:00:60` and `04:00:60` are leap seconds.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197860,"byte_end":197948,"line_start":78,"line_end":78,"column_start":1,"column_end":89}},{"value":"/ In reality, of course, leap seconds are separated by at least 6 months.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":197949,"byte_end":198024,"line_start":79,"line_end":79,"column_start":1,"column_end":76}},{"value":"/ We will also use some intuitive concise notations for the explanation.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198025,"byte_end":198099,"line_start":80,"line_end":80,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198100,"byte_end":198103,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ `Time + Duration`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198104,"byte_end":198125,"line_start":82,"line_end":82,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_add_signed`](#method.overflowing_add_signed)):","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198126,"byte_end":198212,"line_start":83,"line_end":83,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198213,"byte_end":198216,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 + 1s = 03:00:01`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198217,"byte_end":198250,"line_start":85,"line_end":85,"column_start":1,"column_end":34}},{"value":"/ - `03:00:59 + 60s = 03:02:00`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198251,"byte_end":198285,"line_start":86,"line_end":86,"column_start":1,"column_end":35}},{"value":"/ - `03:00:59 + 1s = 03:01:00`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198286,"byte_end":198319,"line_start":87,"line_end":87,"column_start":1,"column_end":34}},{"value":"/ - `03:00:60 + 1s = 03:01:00`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198320,"byte_end":198353,"line_start":88,"line_end":88,"column_start":1,"column_end":34}},{"value":"/   Note that the sum is identical to the previous.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198354,"byte_end":198407,"line_start":89,"line_end":89,"column_start":1,"column_end":54}},{"value":"/ - `03:00:60 + 60s = 03:01:59`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198408,"byte_end":198442,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 + 61s = 03:02:00`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198443,"byte_end":198477,"line_start":91,"line_end":91,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60.1 + 0.8s = 03:00:60.9`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198478,"byte_end":198517,"line_start":92,"line_end":92,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198518,"byte_end":198521,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ `Time - Duration`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198522,"byte_end":198543,"line_start":94,"line_end":94,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_sub_signed`](#method.overflowing_sub_signed)):","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198544,"byte_end":198630,"line_start":95,"line_end":95,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198631,"byte_end":198634,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 - 1s = 02:59:59`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198635,"byte_end":198668,"line_start":97,"line_end":97,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 1s = 03:00:59`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198669,"byte_end":198702,"line_start":98,"line_end":98,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 60s = 03:00:00`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198703,"byte_end":198737,"line_start":99,"line_end":99,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 60s = 03:00:00`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198738,"byte_end":198772,"line_start":100,"line_end":100,"column_start":1,"column_end":35}},{"value":"/   Note that the result is identical to the previous.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198773,"byte_end":198829,"line_start":101,"line_end":101,"column_start":1,"column_end":57}},{"value":"/ - `03:00:60.7 - 0.4s = 03:00:60.3`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198830,"byte_end":198869,"line_start":102,"line_end":102,"column_start":1,"column_end":40}},{"value":"/ - `03:00:60.7 - 0.9s = 03:00:59.8`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198870,"byte_end":198909,"line_start":103,"line_end":103,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198910,"byte_end":198913,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ `Time - Time`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198914,"byte_end":198931,"line_start":105,"line_end":105,"column_start":1,"column_end":18}},{"value":"/ (short for [`NaiveTime::signed_duration_since`](#method.signed_duration_since)):","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":198932,"byte_end":199016,"line_start":106,"line_end":106,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199017,"byte_end":199020,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ - `04:00:00 - 03:00:00 = 3600s`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199021,"byte_end":199057,"line_start":108,"line_end":108,"column_start":1,"column_end":37}},{"value":"/ - `03:01:00 - 03:00:00 = 60s`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199058,"byte_end":199092,"line_start":109,"line_end":109,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 03:00:00 = 60s`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199093,"byte_end":199127,"line_start":110,"line_end":110,"column_start":1,"column_end":35}},{"value":"/   Note that the difference is identical to the previous.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199128,"byte_end":199188,"line_start":111,"line_end":111,"column_start":1,"column_end":61}},{"value":"/ - `03:00:60.6 - 03:00:59.4 = 1.2s`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199189,"byte_end":199228,"line_start":112,"line_end":112,"column_start":1,"column_end":40}},{"value":"/ - `03:01:00 - 03:00:59.8 = 0.2s`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199229,"byte_end":199266,"line_start":113,"line_end":113,"column_start":1,"column_end":38}},{"value":"/ - `03:01:00 - 03:00:60.5 = 0.5s`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199267,"byte_end":199304,"line_start":114,"line_end":114,"column_start":1,"column_end":38}},{"value":"/   Note that the difference is larger than the previous,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199305,"byte_end":199364,"line_start":115,"line_end":115,"column_start":1,"column_end":60}},{"value":"/   even though the leap second clearly follows the previous whole second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199365,"byte_end":199441,"line_start":116,"line_end":116,"column_start":1,"column_end":77}},{"value":"/ - `04:00:60.9 - 03:00:60.1 =","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199442,"byte_end":199474,"line_start":117,"line_end":117,"column_start":1,"column_end":33}},{"value":"/   (04:00:60.9 - 04:00:00) + (04:00:00 - 03:01:00) + (03:01:00 - 03:00:60.1) =","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199475,"byte_end":199556,"line_start":118,"line_end":118,"column_start":1,"column_end":82}},{"value":"/   60.9s + 3540s + 0.9s = 3601.8s`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199557,"byte_end":199595,"line_start":119,"line_end":119,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199596,"byte_end":199599,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ In general,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199600,"byte_end":199615,"line_start":121,"line_end":121,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199616,"byte_end":199619,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ - `Time + Duration` unconditionally equals to `Duration + Time`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199620,"byte_end":199688,"line_start":123,"line_end":123,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199689,"byte_end":199692,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ - `Time - Duration` unconditionally equals to `Time + (-Duration)`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199693,"byte_end":199764,"line_start":125,"line_end":125,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199765,"byte_end":199768,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ - `Time1 - Time2` unconditionally equals to `-(Time2 - Time1)`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199769,"byte_end":199836,"line_start":127,"line_end":127,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199837,"byte_end":199840,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ - Associativity does not generally hold, because","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199841,"byte_end":199893,"line_start":129,"line_end":129,"column_start":1,"column_end":53}},{"value":"/   `(Time + Duration1) - Duration2` no longer equals to `Time + (Duration1 - Duration2)`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199894,"byte_end":199985,"line_start":130,"line_end":130,"column_start":1,"column_end":92}},{"value":"/   for two positive durations.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":199986,"byte_end":200019,"line_start":131,"line_end":131,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200020,"byte_end":200023,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/     - As a special case, `(Time + Duration) - Duration` also does not equal to `Time`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200024,"byte_end":200114,"line_start":133,"line_end":133,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200115,"byte_end":200118,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/     - If you can assume that all durations have the same sign, however,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200119,"byte_end":200194,"line_start":135,"line_end":135,"column_start":1,"column_end":76}},{"value":"/       then the associativity holds:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200195,"byte_end":200234,"line_start":136,"line_end":136,"column_start":1,"column_end":40}},{"value":"/       `(Time + Duration1) + Duration2` equals to `Time + (Duration1 + Duration2)`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200235,"byte_end":200320,"line_start":137,"line_end":137,"column_start":1,"column_end":86}},{"value":"/       for two positive durations.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200321,"byte_end":200358,"line_start":138,"line_end":138,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200359,"byte_end":200362,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ ## Reading And Writing Leap Seconds","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200363,"byte_end":200402,"line_start":140,"line_end":140,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200403,"byte_end":200406,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ The \"typical\" leap seconds on the minute boundary are","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200407,"byte_end":200464,"line_start":142,"line_end":142,"column_start":1,"column_end":58}},{"value":"/ correctly handled both in the formatting and parsing.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200465,"byte_end":200522,"line_start":143,"line_end":143,"column_start":1,"column_end":58}},{"value":"/ The leap second in the human-readable representation","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200523,"byte_end":200579,"line_start":144,"line_end":144,"column_start":1,"column_end":57}},{"value":"/ will be represented as the second part being 60, as required by ISO 8601.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200580,"byte_end":200657,"line_start":145,"line_end":145,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200658,"byte_end":200661,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200662,"byte_end":200670,"line_start":147,"line_end":147,"column_start":1,"column_end":9}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200671,"byte_end":200703,"line_start":148,"line_end":148,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200704,"byte_end":200707,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_000);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200708,"byte_end":200775,"line_start":150,"line_end":150,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:59:60Z\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200776,"byte_end":200836,"line_start":151,"line_end":151,"column_start":1,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200837,"byte_end":200845,"line_start":152,"line_end":152,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200846,"byte_end":200849,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ There are hypothetical leap seconds not on the minute boundary","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200850,"byte_end":200916,"line_start":154,"line_end":154,"column_start":1,"column_end":67}},{"value":"/ nevertheless supported by Chrono.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200917,"byte_end":200954,"line_start":155,"line_end":155,"column_start":1,"column_end":38}},{"value":"/ They are allowed for the sake of completeness and consistency;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":200955,"byte_end":201021,"line_start":156,"line_end":156,"column_start":1,"column_end":67}},{"value":"/ there were several \"exotic\" time zone offsets with fractional minutes prior to UTC after all.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":201022,"byte_end":201119,"line_start":157,"line_end":157,"column_start":1,"column_end":98}},{"value":"/ For such cases the human-readable representation is ambiguous","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":201120,"byte_end":201185,"line_start":158,"line_end":158,"column_start":1,"column_end":66}},{"value":"/ and would be read back to the next non-leap second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":201186,"byte_end":201241,"line_start":159,"line_end":159,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":201242,"byte_end":201245,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":201246,"byte_end":201254,"line_start":161,"line_end":161,"column_start":1,"column_end":9}},{"value":"/ use chrono::{DateTime, Utc, TimeZone};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":201255,"byte_end":201297,"line_start":162,"line_end":162,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":201298,"byte_end":201301,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 56, 4, 1_000);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":201302,"byte_end":201368,"line_start":164,"line_end":164,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":201369,"byte_end":201429,"line_start":165,"line_end":165,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":201430,"byte_end":201433,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms(23, 56, 5);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":201434,"byte_end":201487,"line_start":167,"line_end":167,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":201488,"byte_end":201548,"line_start":168,"line_end":168,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(DateTime::parse_from_rfc3339(\"2015-06-30T23:56:05Z\").unwrap(), dt);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":201549,"byte_end":201631,"line_start":169,"line_end":169,"column_start":1,"column_end":83}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":201632,"byte_end":201640,"line_start":170,"line_end":170,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":201641,"byte_end":201644,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ Since Chrono alone cannot determine any existence of leap seconds,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":201645,"byte_end":201715,"line_start":172,"line_end":172,"column_start":1,"column_end":71}},{"value":"/ **there is absolutely no guarantee that the leap second read has actually happened**.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":201716,"byte_end":201805,"line_start":173,"line_end":173,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202539,"byte_end":202547,"line_start":200,"line_end":200,"column_start":12,"column_end":20},"name":"from_hms","qualname":"<NaiveTime>::from_hms","value":"fn (hour: u32, min: u32, sec: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":201938,"byte_end":201995,"line_start":181,"line_end":181,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202000,"byte_end":202003,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202008,"byte_end":202068,"line_start":183,"line_end":183,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202073,"byte_end":202148,"line_start":184,"line_end":184,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202153,"byte_end":202156,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202161,"byte_end":202210,"line_start":186,"line_end":186,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202215,"byte_end":202218,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202223,"byte_end":202236,"line_start":188,"line_end":188,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202241,"byte_end":202244,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202249,"byte_end":202257,"line_start":190,"line_end":190,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202262,"byte_end":202300,"line_start":191,"line_end":191,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202305,"byte_end":202308,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202313,"byte_end":202356,"line_start":193,"line_end":193,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202361,"byte_end":202390,"line_start":194,"line_end":194,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202395,"byte_end":202426,"line_start":195,"line_end":195,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202431,"byte_end":202461,"line_start":196,"line_end":196,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 0);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202466,"byte_end":202500,"line_start":197,"line_end":197,"column_start":5,"column_end":39}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202505,"byte_end":202513,"line_start":198,"line_end":198,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202518,"byte_end":202527,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203404,"byte_end":203416,"line_start":225,"line_end":225,"column_start":12,"column_end":24},"name":"from_hms_opt","qualname":"<NaiveTime>::from_hms_opt","value":"fn (hour: u32, min: u32, sec: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202676,"byte_end":202733,"line_start":204,"line_end":204,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202738,"byte_end":202741,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202746,"byte_end":202806,"line_start":206,"line_end":206,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202811,"byte_end":202890,"line_start":207,"line_end":207,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202895,"byte_end":202898,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202903,"byte_end":202960,"line_start":209,"line_end":209,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202965,"byte_end":202968,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202973,"byte_end":202986,"line_start":211,"line_end":211,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202991,"byte_end":202994,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":202999,"byte_end":203007,"line_start":213,"line_end":213,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203012,"byte_end":203038,"line_start":214,"line_end":214,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203043,"byte_end":203046,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ let from_hms_opt = NaiveTime::from_hms_opt;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203051,"byte_end":203098,"line_start":216,"line_end":216,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203103,"byte_end":203106,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hms_opt(0, 0, 0).is_some());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203111,"byte_end":203156,"line_start":218,"line_end":218,"column_start":5,"column_end":50}},{"value":"/ assert!(from_hms_opt(23, 59, 59).is_some());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203161,"byte_end":203209,"line_start":219,"line_end":219,"column_start":5,"column_end":53}},{"value":"/ assert!(from_hms_opt(24, 0, 0).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203214,"byte_end":203260,"line_start":220,"line_end":220,"column_start":5,"column_end":51}},{"value":"/ assert!(from_hms_opt(23, 60, 0).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203265,"byte_end":203312,"line_start":221,"line_end":221,"column_start":5,"column_end":52}},{"value":"/ assert!(from_hms_opt(23, 59, 60).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203317,"byte_end":203365,"line_start":222,"line_end":222,"column_start":5,"column_end":53}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203370,"byte_end":203378,"line_start":223,"line_end":223,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203383,"byte_end":203392,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204157,"byte_end":204171,"line_start":248,"line_end":248,"column_start":12,"column_end":26},"name":"from_hms_milli","qualname":"<NaiveTime>::from_hms_milli","value":"fn (hour: u32, min: u32, sec: u32, milli: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203538,"byte_end":203608,"line_start":229,"line_end":229,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203613,"byte_end":203616,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203621,"byte_end":203662,"line_start":231,"line_end":231,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203667,"byte_end":203734,"line_start":232,"line_end":232,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203739,"byte_end":203742,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203747,"byte_end":203809,"line_start":234,"line_end":234,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203814,"byte_end":203817,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203822,"byte_end":203835,"line_start":236,"line_end":236,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203840,"byte_end":203843,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203848,"byte_end":203856,"line_start":238,"line_end":238,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203861,"byte_end":203899,"line_start":239,"line_end":239,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203904,"byte_end":203907,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_milli(23, 56, 4, 12);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203912,"byte_end":203965,"line_start":241,"line_end":241,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":203970,"byte_end":203999,"line_start":242,"line_end":242,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204004,"byte_end":204035,"line_start":243,"line_end":243,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204040,"byte_end":204070,"line_start":244,"line_end":244,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_000_000);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204075,"byte_end":204118,"line_start":245,"line_end":245,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204123,"byte_end":204131,"line_start":246,"line_end":246,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204136,"byte_end":204145,"line_start":247,"line_end":247,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205231,"byte_end":205249,"line_start":275,"line_end":275,"column_start":12,"column_end":30},"name":"from_hms_milli_opt","qualname":"<NaiveTime>::from_hms_milli_opt","value":"fn (hour: u32, min: u32, sec: u32, milli: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204325,"byte_end":204395,"line_start":252,"line_end":252,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204400,"byte_end":204403,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204408,"byte_end":204449,"line_start":254,"line_end":254,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204454,"byte_end":204521,"line_start":255,"line_end":255,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204526,"byte_end":204529,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204534,"byte_end":204604,"line_start":257,"line_end":257,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204609,"byte_end":204612,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204617,"byte_end":204630,"line_start":259,"line_end":259,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204635,"byte_end":204638,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204643,"byte_end":204651,"line_start":261,"line_end":261,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204656,"byte_end":204682,"line_start":262,"line_end":262,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204687,"byte_end":204690,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm_opt = NaiveTime::from_hms_milli_opt;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204695,"byte_end":204749,"line_start":264,"line_end":264,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204754,"byte_end":204757,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsm_opt(0, 0, 0, 0).is_some());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204762,"byte_end":204811,"line_start":266,"line_end":266,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 999).is_some());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204816,"byte_end":204870,"line_start":267,"line_end":267,"column_start":5,"column_end":59}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 1_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204875,"byte_end":204963,"line_start":268,"line_end":268,"column_start":5,"column_end":93}},{"value":"/ assert!(from_hmsm_opt(24, 0, 0, 0).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":204968,"byte_end":205018,"line_start":269,"line_end":269,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsm_opt(23, 60, 0, 0).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205023,"byte_end":205074,"line_start":270,"line_end":270,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsm_opt(23, 59, 60, 0).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205079,"byte_end":205131,"line_start":271,"line_end":271,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 2_000).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205136,"byte_end":205192,"line_start":272,"line_end":272,"column_start":5,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205197,"byte_end":205205,"line_start":273,"line_end":273,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205210,"byte_end":205219,"line_start":274,"line_end":274,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206073,"byte_end":206087,"line_start":299,"line_end":299,"column_start":12,"column_end":26},"name":"from_hms_micro","qualname":"<NaiveTime>::from_hms_micro","value":"fn (hour: u32, min: u32, sec: u32, micro: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205446,"byte_end":205516,"line_start":280,"line_end":280,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205521,"byte_end":205524,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205529,"byte_end":205574,"line_start":282,"line_end":282,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205579,"byte_end":205646,"line_start":283,"line_end":283,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205651,"byte_end":205654,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205659,"byte_end":205721,"line_start":285,"line_end":285,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205726,"byte_end":205729,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205734,"byte_end":205747,"line_start":287,"line_end":287,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205752,"byte_end":205755,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205760,"byte_end":205768,"line_start":289,"line_end":289,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205773,"byte_end":205811,"line_start":290,"line_end":290,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205816,"byte_end":205819,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_micro(23, 56, 4, 12_345);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205824,"byte_end":205881,"line_start":292,"line_end":292,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205886,"byte_end":205915,"line_start":293,"line_end":293,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205920,"byte_end":205951,"line_start":294,"line_end":294,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205956,"byte_end":205986,"line_start":295,"line_end":295,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_000);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":205991,"byte_end":206034,"line_start":296,"line_end":296,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206039,"byte_end":206047,"line_start":297,"line_end":297,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206052,"byte_end":206061,"line_start":298,"line_end":298,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207163,"byte_end":207181,"line_start":326,"line_end":326,"column_start":12,"column_end":30},"name":"from_hms_micro_opt","qualname":"<NaiveTime>::from_hms_micro_opt","value":"fn (hour: u32, min: u32, sec: u32, micro: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206241,"byte_end":206311,"line_start":303,"line_end":303,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206316,"byte_end":206319,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206324,"byte_end":206369,"line_start":305,"line_end":305,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206374,"byte_end":206441,"line_start":306,"line_end":306,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206446,"byte_end":206449,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206454,"byte_end":206524,"line_start":308,"line_end":308,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206529,"byte_end":206532,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206537,"byte_end":206550,"line_start":310,"line_end":310,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206555,"byte_end":206558,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206563,"byte_end":206571,"line_start":312,"line_end":312,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206576,"byte_end":206602,"line_start":313,"line_end":313,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206607,"byte_end":206610,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ let from_hmsu_opt = NaiveTime::from_hms_micro_opt;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206615,"byte_end":206669,"line_start":315,"line_end":315,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206674,"byte_end":206677,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsu_opt(0, 0, 0, 0).is_some());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206682,"byte_end":206731,"line_start":317,"line_end":317,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 999_999).is_some());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206736,"byte_end":206794,"line_start":318,"line_end":318,"column_start":5,"column_end":63}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 1_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206799,"byte_end":206891,"line_start":319,"line_end":319,"column_start":5,"column_end":97}},{"value":"/ assert!(from_hmsu_opt(24, 0, 0, 0).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206896,"byte_end":206946,"line_start":320,"line_end":320,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsu_opt(23, 60, 0, 0).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":206951,"byte_end":207002,"line_start":321,"line_end":321,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsu_opt(23, 59, 60, 0).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207007,"byte_end":207059,"line_start":322,"line_end":322,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 2_000_000).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207064,"byte_end":207124,"line_start":323,"line_end":323,"column_start":5,"column_end":65}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207129,"byte_end":207137,"line_start":324,"line_end":324,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207142,"byte_end":207151,"line_start":325,"line_end":325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":208005,"byte_end":208018,"line_start":350,"line_end":350,"column_start":12,"column_end":25},"name":"from_hms_nano","qualname":"<NaiveTime>::from_hms_nano","value":"fn (hour: u32, min: u32, sec: u32, nano: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207374,"byte_end":207443,"line_start":331,"line_end":331,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207448,"byte_end":207451,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207456,"byte_end":207504,"line_start":333,"line_end":333,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207509,"byte_end":207576,"line_start":334,"line_end":334,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207581,"byte_end":207584,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207589,"byte_end":207650,"line_start":336,"line_end":336,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207655,"byte_end":207658,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207663,"byte_end":207676,"line_start":338,"line_end":338,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207681,"byte_end":207684,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207689,"byte_end":207697,"line_start":340,"line_end":340,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207702,"byte_end":207740,"line_start":341,"line_end":341,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207745,"byte_end":207748,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207753,"byte_end":207813,"line_start":343,"line_end":343,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207818,"byte_end":207847,"line_start":344,"line_end":344,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207852,"byte_end":207883,"line_start":345,"line_end":345,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207888,"byte_end":207918,"line_start":346,"line_end":346,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207923,"byte_end":207966,"line_start":347,"line_end":347,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207971,"byte_end":207979,"line_start":348,"line_end":348,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":207984,"byte_end":207993,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":209103,"byte_end":209120,"line_start":377,"line_end":377,"column_start":12,"column_end":29},"name":"from_hms_nano_opt","qualname":"<NaiveTime>::from_hms_nano_opt","value":"fn (hour: u32, min: u32, sec: u32, nano: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":208169,"byte_end":208238,"line_start":354,"line_end":354,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":208243,"byte_end":208246,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":208251,"byte_end":208299,"line_start":356,"line_end":356,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":208304,"byte_end":208371,"line_start":357,"line_end":357,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":208376,"byte_end":208379,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":208384,"byte_end":208453,"line_start":359,"line_end":359,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":208458,"byte_end":208461,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":208466,"byte_end":208479,"line_start":361,"line_end":361,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":208484,"byte_end":208487,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":208492,"byte_end":208500,"line_start":363,"line_end":363,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":208505,"byte_end":208531,"line_start":364,"line_end":364,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":208536,"byte_end":208539,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ let from_hmsn_opt = NaiveTime::from_hms_nano_opt;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":208544,"byte_end":208597,"line_start":366,"line_end":366,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":208602,"byte_end":208605,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsn_opt(0, 0, 0, 0).is_some());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":208610,"byte_end":208659,"line_start":368,"line_end":368,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 999_999_999).is_some());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":208664,"byte_end":208726,"line_start":369,"line_end":369,"column_start":5,"column_end":67}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":208731,"byte_end":208827,"line_start":370,"line_end":370,"column_start":5,"column_end":101}},{"value":"/ assert!(from_hmsn_opt(24, 0, 0, 0).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":208832,"byte_end":208882,"line_start":371,"line_end":371,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsn_opt(23, 60, 0, 0).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":208887,"byte_end":208938,"line_start":372,"line_end":372,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsn_opt(23, 59, 60, 0).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":208943,"byte_end":208995,"line_start":373,"line_end":373,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 2_000_000_000).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":209000,"byte_end":209064,"line_start":374,"line_end":374,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":209069,"byte_end":209077,"line_start":375,"line_end":375,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":209082,"byte_end":209091,"line_start":376,"line_end":376,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210044,"byte_end":210074,"line_start":402,"line_end":402,"column_start":12,"column_end":42},"name":"from_num_seconds_from_midnight","qualname":"<NaiveTime>::from_num_seconds_from_midnight","value":"fn (secs: u32, nano: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":209387,"byte_end":209472,"line_start":383,"line_end":383,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":209477,"byte_end":209480,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":209485,"byte_end":209533,"line_start":385,"line_end":385,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":209538,"byte_end":209605,"line_start":386,"line_end":386,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":209610,"byte_end":209613,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid number of seconds and/or nanosecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":209618,"byte_end":209676,"line_start":388,"line_end":388,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":209681,"byte_end":209684,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":209689,"byte_end":209702,"line_start":390,"line_end":390,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":209707,"byte_end":209710,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":209715,"byte_end":209723,"line_start":392,"line_end":392,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":209728,"byte_end":209766,"line_start":393,"line_end":393,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":209771,"byte_end":209774,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_num_seconds_from_midnight(86164, 12_345_678);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":209779,"byte_end":209852,"line_start":395,"line_end":395,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":209857,"byte_end":209886,"line_start":396,"line_end":396,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":209891,"byte_end":209922,"line_start":397,"line_end":397,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":209927,"byte_end":209957,"line_start":398,"line_end":398,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":209962,"byte_end":210005,"line_start":399,"line_end":399,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210010,"byte_end":210018,"line_start":400,"line_end":400,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210023,"byte_end":210032,"line_start":401,"line_end":401,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211046,"byte_end":211080,"line_start":427,"line_end":427,"column_start":12,"column_end":46},"name":"from_num_seconds_from_midnight_opt","qualname":"<NaiveTime>::from_num_seconds_from_midnight_opt","value":"fn (secs: u32, nano: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210212,"byte_end":210297,"line_start":406,"line_end":406,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210302,"byte_end":210305,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210310,"byte_end":210358,"line_start":408,"line_end":408,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210363,"byte_end":210430,"line_start":409,"line_end":409,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210435,"byte_end":210438,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid number of seconds and/or nanosecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210443,"byte_end":210509,"line_start":411,"line_end":411,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210514,"byte_end":210517,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210522,"byte_end":210535,"line_start":413,"line_end":413,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210540,"byte_end":210543,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210548,"byte_end":210556,"line_start":415,"line_end":415,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210561,"byte_end":210587,"line_start":416,"line_end":416,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210592,"byte_end":210595,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ let from_nsecs_opt = NaiveTime::from_num_seconds_from_midnight_opt;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210600,"byte_end":210671,"line_start":418,"line_end":418,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210676,"byte_end":210679,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ assert!(from_nsecs_opt(0, 0).is_some());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210684,"byte_end":210728,"line_start":420,"line_end":420,"column_start":5,"column_end":49}},{"value":"/ assert!(from_nsecs_opt(86399, 999_999_999).is_some());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210733,"byte_end":210791,"line_start":421,"line_end":421,"column_start":5,"column_end":63}},{"value":"/ assert!(from_nsecs_opt(86399, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210796,"byte_end":210888,"line_start":422,"line_end":422,"column_start":5,"column_end":97}},{"value":"/ assert!(from_nsecs_opt(86_400, 0).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210893,"byte_end":210942,"line_start":423,"line_end":423,"column_start":5,"column_end":54}},{"value":"/ assert!(from_nsecs_opt(86399, 2_000_000_000).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":210947,"byte_end":211007,"line_start":424,"line_end":424,"column_start":5,"column_end":65}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211012,"byte_end":211020,"line_start":425,"line_end":425,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211025,"byte_end":211034,"line_start":426,"line_end":426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":213730,"byte_end":213744,"line_start":493,"line_end":493,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveTime>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveTime`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211256,"byte_end":211339,"line_start":432,"line_end":432,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211344,"byte_end":211414,"line_start":433,"line_end":433,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211419,"byte_end":211457,"line_start":434,"line_end":434,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211462,"byte_end":211465,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211470,"byte_end":211483,"line_start":436,"line_end":436,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211488,"byte_end":211491,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211496,"byte_end":211504,"line_start":438,"line_end":438,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211509,"byte_end":211535,"line_start":439,"line_end":439,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211540,"byte_end":211543,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211548,"byte_end":211599,"line_start":441,"line_end":441,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211604,"byte_end":211607,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"23:56:04\", \"%H:%M:%S\"),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211612,"byte_end":211666,"line_start":443,"line_end":443,"column_start":5,"column_end":59}},{"value":"/            Ok(NaiveTime::from_hms(23, 56, 4)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211671,"byte_end":211722,"line_start":444,"line_end":444,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(parse_from_str(\"pm012345.6789\", \"%p%I%M%S%.f\"),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211727,"byte_end":211789,"line_start":445,"line_end":445,"column_start":5,"column_end":67}},{"value":"/            Ok(NaiveTime::from_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211794,"byte_end":211861,"line_start":446,"line_end":446,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211866,"byte_end":211874,"line_start":447,"line_end":447,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211879,"byte_end":211882,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ Date and offset is ignored for the purpose of parsing.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211887,"byte_end":211945,"line_start":449,"line_end":449,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211950,"byte_end":211953,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211958,"byte_end":211966,"line_start":451,"line_end":451,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":211971,"byte_end":211999,"line_start":452,"line_end":452,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212004,"byte_end":212057,"line_start":453,"line_end":453,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212062,"byte_end":212143,"line_start":454,"line_end":454,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveTime::from_hms(12, 34, 56)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212148,"byte_end":212200,"line_start":455,"line_end":455,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212205,"byte_end":212213,"line_start":456,"line_end":456,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212218,"byte_end":212221,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](#leap-second-handling) are correctly handled by","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212226,"byte_end":212292,"line_start":458,"line_end":458,"column_start":5,"column_end":71}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212297,"byte_end":212359,"line_start":459,"line_end":459,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212364,"byte_end":212440,"line_start":460,"line_end":460,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212445,"byte_end":212448,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212453,"byte_end":212461,"line_start":462,"line_end":462,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212466,"byte_end":212494,"line_start":463,"line_end":463,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212499,"byte_end":212552,"line_start":464,"line_end":464,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"08:59:60.123\", \"%H:%M:%S%.f\"),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212557,"byte_end":212618,"line_start":465,"line_end":465,"column_start":5,"column_end":66}},{"value":"/            Ok(NaiveTime::from_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212623,"byte_end":212687,"line_start":466,"line_end":466,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212692,"byte_end":212700,"line_start":467,"line_end":467,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212705,"byte_end":212708,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212713,"byte_end":212756,"line_start":469,"line_end":469,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212761,"byte_end":212832,"line_start":470,"line_end":470,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212837,"byte_end":212840,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212845,"byte_end":212853,"line_start":472,"line_end":472,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212858,"byte_end":212886,"line_start":473,"line_end":473,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212891,"byte_end":212944,"line_start":474,"line_end":474,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"7:15\", \"%H:%M\"),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":212949,"byte_end":212996,"line_start":475,"line_end":475,"column_start":5,"column_end":52}},{"value":"/            Ok(NaiveTime::from_hms(7, 15, 0)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":213001,"byte_end":213051,"line_start":476,"line_end":476,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":213056,"byte_end":213059,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":213064,"byte_end":213121,"line_start":478,"line_end":478,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"12\", \"%H\").is_err());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":213126,"byte_end":213175,"line_start":479,"line_end":479,"column_start":5,"column_end":54}},{"value":"/ assert!(parse_from_str(\"17:60\", \"%H:%M\").is_err());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":213180,"byte_end":213235,"line_start":480,"line_end":480,"column_start":5,"column_end":60}},{"value":"/ assert!(parse_from_str(\"24:00:00\", \"%H:%M:%S\").is_err());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":213240,"byte_end":213301,"line_start":481,"line_end":481,"column_start":5,"column_end":66}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":213306,"byte_end":213314,"line_start":482,"line_end":482,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":213319,"byte_end":213322,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":213327,"byte_end":213409,"line_start":484,"line_end":484,"column_start":5,"column_end":87}},{"value":"/ Here `%H` is for 24-hour clocks, unlike `%I`,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":213414,"byte_end":213463,"line_start":485,"line_end":485,"column_start":5,"column_end":54}},{"value":"/ and thus can be independently determined without AM/PM.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":213468,"byte_end":213527,"line_start":486,"line_end":486,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":213532,"byte_end":213535,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":213540,"byte_end":213548,"line_start":488,"line_end":488,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":213553,"byte_end":213581,"line_start":489,"line_end":489,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":213586,"byte_end":213639,"line_start":490,"line_end":490,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"13:07 AM\", \"%H:%M %p\").is_err());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":213644,"byte_end":213705,"line_start":491,"line_end":491,"column_start":5,"column_end":66}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":213710,"byte_end":213718,"line_start":492,"line_end":492,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":214912,"byte_end":214934,"line_start":522,"line_end":522,"column_start":12,"column_end":34},"name":"overflowing_add_signed","qualname":"<NaiveTime>::overflowing_add_signed","value":"fn (&self, mut rhs: OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the addition.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current time,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":213937,"byte_end":213983,"line_start":499,"line_end":499,"column_start":5,"column_end":51}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":213988,"byte_end":214032,"line_start":500,"line_end":500,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the addition.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":214037,"byte_end":214098,"line_start":501,"line_end":501,"column_start":5,"column_end":66}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":214103,"byte_end":214184,"line_start":502,"line_end":502,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":214189,"byte_end":214192,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":214197,"byte_end":214210,"line_start":504,"line_end":504,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":214215,"byte_end":214218,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":214223,"byte_end":214231,"line_start":506,"line_end":506,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":214236,"byte_end":214293,"line_start":507,"line_end":507,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":214298,"byte_end":214324,"line_start":508,"line_end":508,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":214329,"byte_end":214352,"line_start":509,"line_end":509,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":214357,"byte_end":214360,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":214365,"byte_end":214404,"line_start":511,"line_end":511,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":214409,"byte_end":214412,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(11)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":214417,"byte_end":214494,"line_start":513,"line_end":513,"column_start":5,"column_end":82}},{"value":"/            (from_hms(14, 4, 5), 0));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":214499,"byte_end":214539,"line_start":514,"line_end":514,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(23)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":214544,"byte_end":214621,"line_start":515,"line_end":515,"column_start":5,"column_end":82}},{"value":"/            (from_hms(2, 4, 5), 86_400));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":214626,"byte_end":214670,"line_start":516,"line_end":516,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(-7)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":214675,"byte_end":214752,"line_start":517,"line_end":517,"column_start":5,"column_end":82}},{"value":"/            (from_hms(20, 4, 5), -86_400));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":214757,"byte_end":214803,"line_start":518,"line_end":518,"column_start":5,"column_end":51}},{"value":"/ # }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":214808,"byte_end":214815,"line_start":519,"line_end":519,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":214820,"byte_end":214828,"line_start":520,"line_end":520,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":218443,"byte_end":218465,"line_start":608,"line_end":608,"column_start":12,"column_end":34},"name":"overflowing_sub_signed","qualname":"<NaiveTime>::overflowing_sub_signed","value":"fn (&self, rhs: OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the subtraction.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current time,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":217517,"byte_end":217570,"line_start":585,"line_end":585,"column_start":5,"column_end":58}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":217575,"byte_end":217619,"line_start":586,"line_end":586,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the subtraction.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":217624,"byte_end":217688,"line_start":587,"line_end":587,"column_start":5,"column_end":69}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":217693,"byte_end":217774,"line_start":588,"line_end":588,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":217779,"byte_end":217782,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":217787,"byte_end":217800,"line_start":590,"line_end":590,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":217805,"byte_end":217808,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":217813,"byte_end":217821,"line_start":592,"line_end":592,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":217826,"byte_end":217883,"line_start":593,"line_end":593,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":217888,"byte_end":217914,"line_start":594,"line_end":594,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":217919,"byte_end":217942,"line_start":595,"line_end":595,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":217947,"byte_end":217950,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":217955,"byte_end":217994,"line_start":597,"line_end":597,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":217999,"byte_end":218002,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(2)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":218007,"byte_end":218083,"line_start":599,"line_end":599,"column_start":5,"column_end":81}},{"value":"/            (from_hms(1, 4, 5), 0));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":218088,"byte_end":218127,"line_start":600,"line_end":600,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(17)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":218132,"byte_end":218209,"line_start":601,"line_end":601,"column_start":5,"column_end":82}},{"value":"/            (from_hms(10, 4, 5), 86_400));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":218214,"byte_end":218259,"line_start":602,"line_end":602,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(-22)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":218264,"byte_end":218342,"line_start":603,"line_end":603,"column_start":5,"column_end":83}},{"value":"/            (from_hms(1, 4, 5), -86_400));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":218347,"byte_end":218392,"line_start":604,"line_end":604,"column_start":5,"column_end":50}},{"value":"/ # }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":218397,"byte_end":218404,"line_start":605,"line_end":605,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":218409,"byte_end":218417,"line_start":606,"line_end":606,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":218422,"byte_end":218431,"line_start":607,"line_end":607,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":221519,"byte_end":221540,"line_start":673,"line_end":673,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveTime>::signed_duration_since","value":"fn (self, rhs: NaiveTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveTime` from the current time.\n Returns a `Duration` within +/- 1 day.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveTime` from the current time.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":218657,"byte_end":218713,"line_start":613,"line_end":613,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` within +/- 1 day.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":218718,"byte_end":218760,"line_start":614,"line_end":614,"column_start":5,"column_end":47}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":218765,"byte_end":218812,"line_start":615,"line_end":615,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":218817,"byte_end":218820,"line_start":616,"line_end":616,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](#leap-second-handling),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":218825,"byte_end":218897,"line_start":617,"line_end":617,"column_start":5,"column_end":77}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":218902,"byte_end":218968,"line_start":618,"line_end":618,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveTime`s themselves represents a leap second","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":218973,"byte_end":219048,"line_start":619,"line_end":619,"column_start":5,"column_end":80}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219053,"byte_end":219098,"line_start":620,"line_end":620,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219103,"byte_end":219162,"line_start":621,"line_end":621,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219167,"byte_end":219170,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219175,"byte_end":219188,"line_start":623,"line_end":623,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219193,"byte_end":219196,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219201,"byte_end":219209,"line_start":625,"line_end":625,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219214,"byte_end":219271,"line_start":626,"line_end":626,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219276,"byte_end":219302,"line_start":627,"line_end":627,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219307,"byte_end":219330,"line_start":628,"line_end":628,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219335,"byte_end":219338,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219343,"byte_end":219389,"line_start":630,"line_end":630,"column_start":5,"column_end":51}},{"value":"/ let since = NaiveTime::signed_duration_since;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219394,"byte_end":219443,"line_start":631,"line_end":631,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219448,"byte_end":219451,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 900)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219456,"byte_end":219527,"line_start":633,"line_end":633,"column_start":5,"column_end":76}},{"value":"/            Duration::zero());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219532,"byte_end":219565,"line_start":634,"line_end":634,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 875)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219570,"byte_end":219641,"line_start":635,"line_end":635,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(25));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219646,"byte_end":219689,"line_start":636,"line_end":636,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 6, 925)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219694,"byte_end":219765,"line_start":637,"line_end":637,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(975));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219770,"byte_end":219814,"line_start":638,"line_end":638,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 0, 900)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219819,"byte_end":219890,"line_start":639,"line_end":639,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(7));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219895,"byte_end":219932,"line_start":640,"line_end":640,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 0, 7, 900)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":219937,"byte_end":220008,"line_start":641,"line_end":641,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(5 * 60));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220013,"byte_end":220055,"line_start":642,"line_end":642,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(0, 5, 7, 900)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220060,"byte_end":220131,"line_start":643,"line_end":643,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3 * 3600));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220136,"byte_end":220180,"line_start":644,"line_end":644,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(4, 5, 7, 900)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220185,"byte_end":220256,"line_start":645,"line_end":645,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(-3600));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220261,"byte_end":220302,"line_start":646,"line_end":646,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(2, 4, 6, 800)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220307,"byte_end":220378,"line_start":647,"line_end":647,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3600 + 60 + 1) + Duration::milliseconds(100));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220383,"byte_end":220462,"line_start":648,"line_end":648,"column_start":5,"column_end":84}},{"value":"/ # }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220467,"byte_end":220474,"line_start":649,"line_end":649,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220479,"byte_end":220487,"line_start":650,"line_end":650,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220492,"byte_end":220495,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220500,"byte_end":220562,"line_start":652,"line_end":652,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220567,"byte_end":220613,"line_start":653,"line_end":653,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220618,"byte_end":220621,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220626,"byte_end":220634,"line_start":655,"line_end":655,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220639,"byte_end":220696,"line_start":656,"line_end":656,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220701,"byte_end":220729,"line_start":657,"line_end":657,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220734,"byte_end":220759,"line_start":658,"line_end":658,"column_start":5,"column_end":30}},{"value":"/ # let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220764,"byte_end":220812,"line_start":659,"line_end":659,"column_start":5,"column_end":53}},{"value":"/ # let since = NaiveTime::signed_duration_since;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220817,"byte_end":220868,"line_start":660,"line_end":660,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220873,"byte_end":220946,"line_start":661,"line_end":661,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220951,"byte_end":220988,"line_start":662,"line_end":662,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_500), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":220993,"byte_end":221066,"line_start":663,"line_end":663,"column_start":5,"column_end":78}},{"value":"/            Duration::milliseconds(1500));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":221071,"byte_end":221116,"line_start":664,"line_end":664,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 0, 0)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":221121,"byte_end":221193,"line_start":665,"line_end":665,"column_start":5,"column_end":77}},{"value":"/            Duration::seconds(60));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":221198,"byte_end":221236,"line_start":666,"line_end":666,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 0, 0), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":221241,"byte_end":221314,"line_start":667,"line_end":667,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":221319,"byte_end":221356,"line_start":668,"line_end":668,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":221361,"byte_end":221439,"line_start":669,"line_end":669,"column_start":5,"column_end":83}},{"value":"/            Duration::seconds(61));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":221444,"byte_end":221482,"line_start":670,"line_end":670,"column_start":5,"column_end":43}},{"value":"/ # }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":221487,"byte_end":221494,"line_start":671,"line_end":671,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":221499,"byte_end":221507,"line_start":672,"line_end":672,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223927,"byte_end":223944,"line_start":727,"line_end":727,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveTime>::format_with_items","value":"fn <'a, I> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified formatting items.\n Otherwise it is same to the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the time with the specified formatting items.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":222810,"byte_end":222867,"line_start":699,"line_end":699,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is same to the ordinary [`format`](#method.format) method.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":222872,"byte_end":222947,"line_start":700,"line_end":700,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":222952,"byte_end":222955,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":222960,"byte_end":223010,"line_start":702,"line_end":702,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223015,"byte_end":223093,"line_start":703,"line_end":703,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223098,"byte_end":223101,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223106,"byte_end":223119,"line_start":705,"line_end":705,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223124,"byte_end":223127,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223132,"byte_end":223140,"line_start":707,"line_end":707,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223145,"byte_end":223171,"line_start":708,"line_end":708,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223176,"byte_end":223224,"line_start":709,"line_end":709,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223229,"byte_end":223232,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%H:%M:%S\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223237,"byte_end":223282,"line_start":711,"line_end":711,"column_start":5,"column_end":50}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223287,"byte_end":223330,"line_start":712,"line_end":712,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.format_with_items(fmt.clone()).to_string(), \"23:56:04\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223335,"byte_end":223408,"line_start":713,"line_end":713,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(),             \"23:56:04\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223413,"byte_end":223486,"line_start":714,"line_end":714,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223491,"byte_end":223499,"line_start":715,"line_end":715,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223504,"byte_end":223507,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223512,"byte_end":223596,"line_start":717,"line_end":717,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223601,"byte_end":223604,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223609,"byte_end":223617,"line_start":719,"line_end":719,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223622,"byte_end":223650,"line_start":720,"line_end":720,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223655,"byte_end":223705,"line_start":721,"line_end":721,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%H:%M:%S\").clone();","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223710,"byte_end":223765,"line_start":722,"line_end":722,"column_start":5,"column_end":60}},{"value":"/ # let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223770,"byte_end":223815,"line_start":723,"line_end":723,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(format!(\"{}\", t.format_with_items(fmt)), \"23:56:04\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223820,"byte_end":223888,"line_start":724,"line_end":724,"column_start":5,"column_end":73}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223893,"byte_end":223901,"line_start":725,"line_end":725,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":223906,"byte_end":223915,"line_start":726,"line_end":726,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":225675,"byte_end":225681,"line_start":767,"line_end":767,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveTime>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the time with the specified format string.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":224108,"byte_end":224162,"line_start":732,"line_end":732,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":224167,"byte_end":224237,"line_start":733,"line_end":733,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":224242,"byte_end":224280,"line_start":734,"line_end":734,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":224285,"byte_end":224288,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":224293,"byte_end":224328,"line_start":736,"line_end":736,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":224333,"byte_end":224406,"line_start":737,"line_end":737,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":224411,"byte_end":224468,"line_start":738,"line_end":738,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":224473,"byte_end":224535,"line_start":739,"line_end":739,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":224540,"byte_end":224600,"line_start":740,"line_end":740,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":224605,"byte_end":224608,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":224613,"byte_end":224677,"line_start":742,"line_end":742,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":224682,"byte_end":224745,"line_start":743,"line_end":743,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":224750,"byte_end":224825,"line_start":744,"line_end":744,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":224830,"byte_end":224833,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":224838,"byte_end":224851,"line_start":746,"line_end":746,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":224856,"byte_end":224859,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":224864,"byte_end":224872,"line_start":748,"line_end":748,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":224877,"byte_end":224903,"line_start":749,"line_end":749,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":224908,"byte_end":224911,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":224916,"byte_end":224976,"line_start":751,"line_end":751,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(), \"23:56:04\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":224981,"byte_end":225042,"line_start":752,"line_end":752,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S%.6f\").to_string(), \"23:56:04.012345\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":225047,"byte_end":225119,"line_start":753,"line_end":753,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(t.format(\"%-I:%M %p\").to_string(), \"11:56 PM\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":225124,"byte_end":225186,"line_start":754,"line_end":754,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":225191,"byte_end":225199,"line_start":755,"line_end":755,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":225204,"byte_end":225207,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":225212,"byte_end":225296,"line_start":757,"line_end":757,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":225301,"byte_end":225304,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":225309,"byte_end":225317,"line_start":759,"line_end":759,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":225322,"byte_end":225350,"line_start":760,"line_end":760,"column_start":5,"column_end":33}},{"value":"/ # let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":225355,"byte_end":225417,"line_start":761,"line_end":761,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S\")), \"23:56:04\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":225422,"byte_end":225486,"line_start":762,"line_end":762,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S%.6f\")), \"23:56:04.012345\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":225491,"byte_end":225566,"line_start":763,"line_end":763,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%-I:%M %p\")), \"11:56 PM\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":225571,"byte_end":225636,"line_start":764,"line_end":764,"column_start":5,"column_end":70}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":225641,"byte_end":225649,"line_start":765,"line_end":765,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":225654,"byte_end":225663,"line_start":766,"line_end":766,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1496},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266495,"byte_end":266508,"line_start":51,"line_end":51,"column_start":12,"column_end":25},"name":"NaiveDateTime","qualname":"::naive::datetime::NaiveDateTime","value":"NaiveDateTime {  }","parent":null,"children":[{"krate":0,"index":1497},{"krate":0,"index":1498}],"decl_id":null,"docs":" ISO 8601 combined date and time without timezone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time without timezone.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":265631,"byte_end":265684,"line_start":25,"line_end":25,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":265685,"byte_end":265688,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":265689,"byte_end":265702,"line_start":27,"line_end":27,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":265703,"byte_end":265706,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ `NaiveDateTime` is commonly created from [`NaiveDate`](./struct.NaiveDate.html).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":265707,"byte_end":265791,"line_start":29,"line_end":29,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":265792,"byte_end":265795,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":265796,"byte_end":265804,"line_start":31,"line_end":31,"column_start":1,"column_end":9}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":265805,"byte_end":265848,"line_start":32,"line_end":32,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":265849,"byte_end":265852,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":265853,"byte_end":265932,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ # let _ = dt;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":265933,"byte_end":265950,"line_start":35,"line_end":35,"column_start":1,"column_end":18}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":265951,"byte_end":265959,"line_start":36,"line_end":36,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":265960,"byte_end":265963,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ You can use typical [date-like](../trait.Datelike.html) and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":265964,"byte_end":266027,"line_start":38,"line_end":38,"column_start":1,"column_end":64}},{"value":"/ [time-like](../trait.Timelike.html) methods,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266028,"byte_end":266076,"line_start":39,"line_end":39,"column_start":1,"column_end":49}},{"value":"/ provided that relevant traits are in the scope.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266077,"byte_end":266128,"line_start":40,"line_end":40,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266129,"byte_end":266132,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266133,"byte_end":266141,"line_start":42,"line_end":42,"column_start":1,"column_end":9}},{"value":"/ # use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266142,"byte_end":266187,"line_start":43,"line_end":43,"column_start":1,"column_end":46}},{"value":"/ # let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266188,"byte_end":266269,"line_start":44,"line_end":44,"column_start":1,"column_end":82}},{"value":"/ use chrono::{Datelike, Timelike, Weekday};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266270,"byte_end":266316,"line_start":45,"line_end":45,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266317,"byte_end":266320,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266321,"byte_end":266364,"line_start":47,"line_end":47,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(dt.num_seconds_from_midnight(), 33011);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266365,"byte_end":266419,"line_start":48,"line_end":48,"column_start":1,"column_end":55}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266420,"byte_end":266428,"line_start":49,"line_end":49,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":267170,"byte_end":267173,"line_start":74,"line_end":74,"column_start":12,"column_end":15},"name":"new","qualname":"<NaiveDateTime>::new","value":"fn (date: NaiveDate, time: NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from date and time components.\n Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)\n and many other helper constructors on `NaiveDate`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from date and time components.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266581,"byte_end":266643,"line_start":57,"line_end":57,"column_start":5,"column_end":67}},{"value":"/ Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266648,"byte_end":266730,"line_start":58,"line_end":58,"column_start":5,"column_end":87}},{"value":"/ and many other helper constructors on `NaiveDate`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266735,"byte_end":266789,"line_start":59,"line_end":59,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266794,"byte_end":266797,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266802,"byte_end":266815,"line_start":61,"line_end":61,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266820,"byte_end":266823,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266828,"byte_end":266836,"line_start":63,"line_end":63,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266841,"byte_end":266895,"line_start":64,"line_end":64,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266900,"byte_end":266903,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266908,"byte_end":266952,"line_start":66,"line_end":66,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266957,"byte_end":267012,"line_start":67,"line_end":67,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":267017,"byte_end":267020,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::new(d, t);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":267025,"byte_end":267063,"line_start":69,"line_end":69,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":267068,"byte_end":267097,"line_start":70,"line_end":70,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":267102,"byte_end":267131,"line_start":71,"line_end":71,"column_start":5,"column_end":34}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":267136,"byte_end":267144,"line_start":72,"line_end":72,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":267149,"byte_end":267158,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":268456,"byte_end":268470,"line_start":104,"line_end":104,"column_start":12,"column_end":26},"name":"from_timestamp","qualname":"<NaiveDateTime>::from_timestamp","value":"fn (secs: i64, nsecs: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":267287,"byte_end":267356,"line_start":78,"line_end":78,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":267361,"byte_end":267400,"line_start":79,"line_end":79,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":267405,"byte_end":267473,"line_start":80,"line_end":80,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":267478,"byte_end":267549,"line_start":81,"line_end":81,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":267554,"byte_end":267557,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ For a non-naive version of this function see","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":267562,"byte_end":267610,"line_start":83,"line_end":83,"column_start":5,"column_end":53}},{"value":"/ [`TimeZone::timestamp`](../offset/trait.TimeZone.html#method.timestamp).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":267615,"byte_end":267691,"line_start":84,"line_end":84,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":267696,"byte_end":267699,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":267704,"byte_end":267778,"line_start":86,"line_end":86,"column_start":5,"column_end":79}},{"value":"/ [leap second](./struct.NaiveTime.html#leap-second-handling). (The true \"UNIX","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":267783,"byte_end":267863,"line_start":87,"line_end":87,"column_start":5,"column_end":85}},{"value":"/ timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":267868,"byte_end":267929,"line_start":88,"line_end":88,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":267934,"byte_end":267937,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":267942,"byte_end":268017,"line_start":90,"line_end":90,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":268022,"byte_end":268025,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":268030,"byte_end":268043,"line_start":92,"line_end":92,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":268048,"byte_end":268051,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":268056,"byte_end":268064,"line_start":94,"line_end":94,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":268069,"byte_end":268112,"line_start":95,"line_end":95,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":268117,"byte_end":268120,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(0, 42_000_000);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":268125,"byte_end":268183,"line_start":97,"line_end":97,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 0, 42));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":268188,"byte_end":268267,"line_start":98,"line_end":98,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":268272,"byte_end":268275,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(1_000_000_000, 0);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":268280,"byte_end":268341,"line_start":100,"line_end":100,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":268346,"byte_end":268417,"line_start":101,"line_end":101,"column_start":5,"column_end":76}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":268422,"byte_end":268430,"line_start":102,"line_end":102,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":268435,"byte_end":268444,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":269812,"byte_end":269830,"line_start":135,"line_end":135,"column_start":12,"column_end":30},"name":"from_timestamp_opt","qualname":"<NaiveDateTime>::from_timestamp_opt","value":"fn (secs: i64, nsecs: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":268655,"byte_end":268724,"line_start":109,"line_end":109,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":268729,"byte_end":268768,"line_start":110,"line_end":110,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":268773,"byte_end":268841,"line_start":111,"line_end":111,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":268846,"byte_end":268917,"line_start":112,"line_end":112,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":268922,"byte_end":268925,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":268930,"byte_end":268978,"line_start":114,"line_end":114,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":268983,"byte_end":269073,"line_start":115,"line_end":115,"column_start":5,"column_end":95}},{"value":"/ (The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":269078,"byte_end":269155,"line_start":116,"line_end":116,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":269160,"byte_end":269163,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":269168,"byte_end":269251,"line_start":118,"line_end":118,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":269256,"byte_end":269259,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":269264,"byte_end":269277,"line_start":120,"line_end":120,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":269282,"byte_end":269285,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":269290,"byte_end":269298,"line_start":122,"line_end":122,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":269303,"byte_end":269346,"line_start":123,"line_end":123,"column_start":5,"column_end":48}},{"value":"/ use std::i64;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":269351,"byte_end":269368,"line_start":124,"line_end":124,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":269373,"byte_end":269376,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ let from_timestamp_opt = NaiveDateTime::from_timestamp_opt;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":269381,"byte_end":269444,"line_start":126,"line_end":126,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":269449,"byte_end":269452,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ assert!(from_timestamp_opt(0, 0).is_some());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":269457,"byte_end":269505,"line_start":128,"line_end":128,"column_start":5,"column_end":53}},{"value":"/ assert!(from_timestamp_opt(0, 999_999_999).is_some());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":269510,"byte_end":269568,"line_start":129,"line_end":129,"column_start":5,"column_end":63}},{"value":"/ assert!(from_timestamp_opt(0, 1_500_000_000).is_some()); // leap second","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":269573,"byte_end":269648,"line_start":130,"line_end":130,"column_start":5,"column_end":80}},{"value":"/ assert!(from_timestamp_opt(0, 2_000_000_000).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":269653,"byte_end":269713,"line_start":131,"line_end":131,"column_start":5,"column_end":65}},{"value":"/ assert!(from_timestamp_opt(i64::MAX, 0).is_none());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":269718,"byte_end":269773,"line_start":132,"line_end":132,"column_start":5,"column_end":60}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":269778,"byte_end":269786,"line_start":133,"line_end":133,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":269791,"byte_end":269800,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273209,"byte_end":273223,"line_start":207,"line_end":207,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDateTime>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDateTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDateTime`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":270346,"byte_end":270433,"line_start":146,"line_end":146,"column_start":5,"column_end":92}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":270438,"byte_end":270508,"line_start":147,"line_end":147,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":270513,"byte_end":270551,"line_start":148,"line_end":148,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":270556,"byte_end":270559,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":270564,"byte_end":270577,"line_start":150,"line_end":150,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":270582,"byte_end":270585,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":270590,"byte_end":270598,"line_start":152,"line_end":152,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":270603,"byte_end":270646,"line_start":153,"line_end":153,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":270651,"byte_end":270654,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":270659,"byte_end":270714,"line_start":155,"line_end":155,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":270719,"byte_end":270722,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05 23:56:04\", \"%Y-%m-%d %H:%M:%S\"),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":270727,"byte_end":270801,"line_start":157,"line_end":157,"column_start":5,"column_end":79}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":270806,"byte_end":270877,"line_start":158,"line_end":158,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015pm012345.6789\", \"%d%b%Y%p%I%M%S%.f\"),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":270882,"byte_end":270958,"line_start":159,"line_end":159,"column_start":5,"column_end":81}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":270963,"byte_end":271050,"line_start":160,"line_end":160,"column_start":5,"column_end":92}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":271055,"byte_end":271063,"line_start":161,"line_end":161,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":271068,"byte_end":271071,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ Offset is ignored for the purpose of parsing.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":271076,"byte_end":271125,"line_start":163,"line_end":163,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":271130,"byte_end":271133,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":271138,"byte_end":271146,"line_start":165,"line_end":165,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":271151,"byte_end":271196,"line_start":166,"line_end":166,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":271201,"byte_end":271258,"line_start":167,"line_end":167,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":271263,"byte_end":271344,"line_start":168,"line_end":168,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17).and_hms(12, 34, 56)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":271349,"byte_end":271422,"line_start":169,"line_end":169,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":271427,"byte_end":271435,"line_start":170,"line_end":170,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":271440,"byte_end":271443,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](./struct.NaiveTime.html#leap-second-handling) are correctly handled by","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":271448,"byte_end":271537,"line_start":172,"line_end":172,"column_start":5,"column_end":94}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":271542,"byte_end":271604,"line_start":173,"line_end":173,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":271609,"byte_end":271685,"line_start":174,"line_end":174,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":271690,"byte_end":271693,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":271698,"byte_end":271706,"line_start":176,"line_end":176,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":271711,"byte_end":271756,"line_start":177,"line_end":177,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":271761,"byte_end":271818,"line_start":178,"line_end":178,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2015-07-01 08:59:60.123\", \"%Y-%m-%d %H:%M:%S%.f\"),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":271823,"byte_end":271904,"line_start":179,"line_end":179,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 7, 1).and_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":271909,"byte_end":271993,"line_start":180,"line_end":180,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":271998,"byte_end":272006,"line_start":181,"line_end":181,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272011,"byte_end":272014,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272019,"byte_end":272062,"line_start":183,"line_end":183,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272067,"byte_end":272138,"line_start":184,"line_end":184,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272143,"byte_end":272146,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272151,"byte_end":272159,"line_start":186,"line_end":186,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272164,"byte_end":272209,"line_start":187,"line_end":187,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272214,"byte_end":272271,"line_start":188,"line_end":188,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"94/9/4 7:15\", \"%y/%m/%d %H:%M\"),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272276,"byte_end":272339,"line_start":189,"line_end":189,"column_start":5,"column_end":68}},{"value":"/            Ok(NaiveDate::from_ymd(1994, 9, 4).and_hms(7, 15, 0)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272344,"byte_end":272414,"line_start":190,"line_end":190,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272419,"byte_end":272422,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272427,"byte_end":272484,"line_start":192,"line_end":192,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"94/9/4 12\", \"%y/%m/%d %H\").is_err());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272489,"byte_end":272554,"line_start":193,"line_end":193,"column_start":5,"column_end":70}},{"value":"/ assert!(parse_from_str(\"94/9/4 17:60\", \"%y/%m/%d %H:%M\").is_err());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272559,"byte_end":272630,"line_start":194,"line_end":194,"column_start":5,"column_end":76}},{"value":"/ assert!(parse_from_str(\"94/9/4 24:00:00\", \"%y/%m/%d %H:%M:%S\").is_err());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272635,"byte_end":272712,"line_start":195,"line_end":195,"column_start":5,"column_end":82}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272717,"byte_end":272725,"line_start":196,"line_end":196,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272730,"byte_end":272733,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272738,"byte_end":272820,"line_start":198,"line_end":198,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272825,"byte_end":272828,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272833,"byte_end":272841,"line_start":200,"line_end":200,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDateTime;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272846,"byte_end":272878,"line_start":201,"line_end":201,"column_start":5,"column_end":37}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272883,"byte_end":272940,"line_start":202,"line_end":202,"column_start":5,"column_end":62}},{"value":"/ let fmt = \"%Y-%m-%d %H:%M:%S = UNIX timestamp %s\";","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":272945,"byte_end":272999,"line_start":203,"line_end":203,"column_start":5,"column_end":59}},{"value":"/ assert!(parse_from_str(\"2001-09-09 01:46:39 = UNIX timestamp 999999999\", fmt).is_ok());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273004,"byte_end":273095,"line_start":204,"line_end":204,"column_start":5,"column_end":96}},{"value":"/ assert!(parse_from_str(\"1970-01-01 00:00:00 = UNIX timestamp 1\", fmt).is_err());","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273100,"byte_end":273184,"line_start":205,"line_end":205,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273189,"byte_end":273197,"line_start":206,"line_end":206,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273750,"byte_end":273754,"line_start":224,"line_end":224,"column_start":12,"column_end":16},"name":"date","qualname":"<NaiveDateTime>::date","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273461,"byte_end":273492,"line_start":213,"line_end":213,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273497,"byte_end":273500,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273505,"byte_end":273518,"line_start":215,"line_end":215,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273523,"byte_end":273526,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273531,"byte_end":273539,"line_start":217,"line_end":217,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273544,"byte_end":273570,"line_start":218,"line_end":218,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273575,"byte_end":273578,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273583,"byte_end":273647,"line_start":220,"line_end":220,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.date(), NaiveDate::from_ymd(2016, 7, 8));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273652,"byte_end":273711,"line_start":221,"line_end":221,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273716,"byte_end":273724,"line_start":222,"line_end":222,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273729,"byte_end":273738,"line_start":223,"line_end":223,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274107,"byte_end":274111,"line_start":239,"line_end":239,"column_start":12,"column_end":16},"name":"time","qualname":"<NaiveDateTime>::time","value":"fn (&self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273806,"byte_end":273837,"line_start":228,"line_end":228,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273842,"byte_end":273845,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273850,"byte_end":273863,"line_start":230,"line_end":230,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273868,"byte_end":273871,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273876,"byte_end":273884,"line_start":232,"line_end":232,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273889,"byte_end":273928,"line_start":233,"line_end":233,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273933,"byte_end":273936,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":273941,"byte_end":274005,"line_start":235,"line_end":235,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.time(), NaiveTime::from_hms(9, 10, 11));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274010,"byte_end":274068,"line_start":236,"line_end":236,"column_start":5,"column_end":63}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274073,"byte_end":274081,"line_start":237,"line_end":237,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274086,"byte_end":274095,"line_start":238,"line_end":238,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":275018,"byte_end":275027,"line_start":266,"line_end":266,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<NaiveDateTime>::timestamp","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since the midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since the midnight on January 1, 1970.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274163,"byte_end":274244,"line_start":243,"line_end":243,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274249,"byte_end":274252,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274257,"byte_end":274312,"line_start":245,"line_end":245,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274317,"byte_end":274405,"line_start":246,"line_end":246,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274410,"byte_end":274413,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274418,"byte_end":274431,"line_start":248,"line_end":248,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274436,"byte_end":274439,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274444,"byte_end":274452,"line_start":250,"line_end":250,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274457,"byte_end":274483,"line_start":251,"line_end":251,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274488,"byte_end":274491,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 980);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274496,"byte_end":274569,"line_start":253,"line_end":253,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp(), 1);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274574,"byte_end":274608,"line_start":254,"line_end":254,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274613,"byte_end":274616,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274621,"byte_end":274685,"line_start":256,"line_end":256,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.timestamp(), 1_000_000_000);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274690,"byte_end":274736,"line_start":257,"line_end":257,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274741,"byte_end":274744,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms(23, 59, 59);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274749,"byte_end":274816,"line_start":259,"line_end":259,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(dt.timestamp(), -1);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274821,"byte_end":274856,"line_start":260,"line_end":260,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274861,"byte_end":274864,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(-1, 1, 1).and_hms(0, 0, 0);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274869,"byte_end":274929,"line_start":262,"line_end":262,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp(), -62198755200);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274934,"byte_end":274979,"line_start":263,"line_end":263,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274984,"byte_end":274992,"line_start":264,"line_end":264,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":274997,"byte_end":275006,"line_start":265,"line_end":265,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":276405,"byte_end":276421,"line_start":298,"line_end":298,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<NaiveDateTime>::timestamp_millis","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":275329,"byte_end":275413,"line_start":273,"line_end":273,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":275418,"byte_end":275421,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":275426,"byte_end":275481,"line_start":275,"line_end":275,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":275486,"byte_end":275574,"line_start":276,"line_end":276,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":275579,"byte_end":275582,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":275587,"byte_end":275654,"line_start":278,"line_end":278,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 Million. (If this is a problem,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":275659,"byte_end":275732,"line_start":279,"line_end":279,"column_start":5,"column_end":78}},{"value":"/ please file an issue to let me know what domain needs millisecond","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":275737,"byte_end":275806,"line_start":280,"line_end":280,"column_start":5,"column_end":74}},{"value":"/ precision over billions of years, I'm curious.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":275811,"byte_end":275862,"line_start":281,"line_end":281,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":275867,"byte_end":275870,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":275875,"byte_end":275888,"line_start":283,"line_end":283,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":275893,"byte_end":275896,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":275901,"byte_end":275909,"line_start":285,"line_end":285,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":275914,"byte_end":275940,"line_start":286,"line_end":286,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":275945,"byte_end":275948,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":275953,"byte_end":276026,"line_start":288,"line_end":288,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":276031,"byte_end":276076,"line_start":289,"line_end":289,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":276081,"byte_end":276084,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":276089,"byte_end":276164,"line_start":291,"line_end":291,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":276169,"byte_end":276226,"line_start":292,"line_end":292,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":276231,"byte_end":276234,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms_milli(23, 59, 59, 100);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":276239,"byte_end":276317,"line_start":294,"line_end":294,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(dt.timestamp_millis(), -900);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":276322,"byte_end":276366,"line_start":295,"line_end":295,"column_start":5,"column_end":49}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":276371,"byte_end":276379,"line_start":296,"line_end":296,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":276384,"byte_end":276393,"line_start":297,"line_end":297,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277481,"byte_end":277496,"line_start":325,"line_end":325,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<NaiveDateTime>::timestamp_nanos","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":276552,"byte_end":276635,"line_start":303,"line_end":303,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":276640,"byte_end":276643,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":276648,"byte_end":276703,"line_start":305,"line_end":305,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":276708,"byte_end":276796,"line_start":306,"line_end":306,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":276801,"byte_end":276804,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":276809,"byte_end":276876,"line_start":308,"line_end":308,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584. (If this is a problem,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":276881,"byte_end":276946,"line_start":309,"line_end":309,"column_start":5,"column_end":70}},{"value":"/ please file an issue to let me know what domain needs nanosecond","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":276951,"byte_end":277019,"line_start":310,"line_end":310,"column_start":5,"column_end":73}},{"value":"/ precision over millenia, I'm curious.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277024,"byte_end":277066,"line_start":311,"line_end":311,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277071,"byte_end":277074,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277079,"byte_end":277092,"line_start":313,"line_end":313,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277097,"byte_end":277100,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277105,"byte_end":277113,"line_start":315,"line_end":315,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277118,"byte_end":277144,"line_start":316,"line_end":316,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277149,"byte_end":277152,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277157,"byte_end":277229,"line_start":318,"line_end":318,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277234,"byte_end":277286,"line_start":319,"line_end":319,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277291,"byte_end":277294,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277299,"byte_end":277373,"line_start":321,"line_end":321,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_000_000_000_555);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277378,"byte_end":277442,"line_start":322,"line_end":322,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277447,"byte_end":277455,"line_start":323,"line_end":323,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277460,"byte_end":277469,"line_start":324,"line_end":324,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278274,"byte_end":278297,"line_start":347,"line_end":347,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<NaiveDateTime>::timestamp_subsec_millis","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last whole non-leap second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277635,"byte_end":277711,"line_start":330,"line_end":330,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277716,"byte_end":277719,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277724,"byte_end":277766,"line_start":332,"line_end":332,"column_start":5,"column_end":47}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277771,"byte_end":277853,"line_start":333,"line_end":333,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277858,"byte_end":277861,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277866,"byte_end":277879,"line_start":335,"line_end":335,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277884,"byte_end":277887,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277892,"byte_end":277900,"line_start":337,"line_end":337,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277905,"byte_end":277931,"line_start":338,"line_end":338,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277936,"byte_end":277939,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":277944,"byte_end":278026,"line_start":340,"line_end":340,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 123);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278031,"byte_end":278081,"line_start":341,"line_end":341,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278086,"byte_end":278089,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278094,"byte_end":278178,"line_start":343,"line_end":343,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 1_234);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278183,"byte_end":278235,"line_start":344,"line_end":344,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278240,"byte_end":278248,"line_start":345,"line_end":345,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278253,"byte_end":278262,"line_start":346,"line_end":346,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279030,"byte_end":279053,"line_start":368,"line_end":368,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<NaiveDateTime>::timestamp_subsec_micros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last whole non-leap second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278375,"byte_end":278451,"line_start":351,"line_end":351,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278456,"byte_end":278459,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278464,"byte_end":278510,"line_start":353,"line_end":353,"column_start":5,"column_end":51}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278515,"byte_end":278601,"line_start":354,"line_end":354,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278606,"byte_end":278609,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278614,"byte_end":278627,"line_start":356,"line_end":356,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278632,"byte_end":278635,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278640,"byte_end":278648,"line_start":358,"line_end":358,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278653,"byte_end":278679,"line_start":359,"line_end":359,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278684,"byte_end":278687,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278692,"byte_end":278774,"line_start":361,"line_end":361,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 123_456);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278779,"byte_end":278833,"line_start":362,"line_end":362,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278838,"byte_end":278841,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278846,"byte_end":278930,"line_start":364,"line_end":364,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 1_234_567);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278935,"byte_end":278991,"line_start":365,"line_end":365,"column_start":5,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":278996,"byte_end":279004,"line_start":366,"line_end":366,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279009,"byte_end":279018,"line_start":367,"line_end":367,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279795,"byte_end":279817,"line_start":389,"line_end":389,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<NaiveDateTime>::timestamp_subsec_nanos","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279127,"byte_end":279202,"line_start":372,"line_end":372,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279207,"byte_end":279210,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,999,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279215,"byte_end":279265,"line_start":374,"line_end":374,"column_start":5,"column_end":55}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999,999.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279270,"byte_end":279360,"line_start":375,"line_end":375,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279365,"byte_end":279368,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279373,"byte_end":279386,"line_start":377,"line_end":377,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279391,"byte_end":279394,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279399,"byte_end":279407,"line_start":379,"line_end":379,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279412,"byte_end":279438,"line_start":380,"line_end":380,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279443,"byte_end":279446,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279451,"byte_end":279533,"line_start":382,"line_end":382,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 123_456_789);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279538,"byte_end":279595,"line_start":383,"line_end":383,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279600,"byte_end":279603,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279608,"byte_end":279692,"line_start":385,"line_end":385,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 1_234_567_890);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279697,"byte_end":279756,"line_start":386,"line_end":386,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279761,"byte_end":279769,"line_start":387,"line_end":387,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279774,"byte_end":279783,"line_start":388,"line_end":388,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":283196,"byte_end":283214,"line_start":467,"line_end":467,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDateTime>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279876,"byte_end":279931,"line_start":393,"line_end":393,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279936,"byte_end":279939,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":279944,"byte_end":280039,"line_start":395,"line_end":395,"column_start":5,"column_end":100}},{"value":"/ the addition assumes that **there is no leap second ever**,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280044,"byte_end":280107,"line_start":396,"line_end":396,"column_start":5,"column_end":68}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280112,"byte_end":280179,"line_start":397,"line_end":397,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280184,"byte_end":280277,"line_start":398,"line_end":398,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280282,"byte_end":280285,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280290,"byte_end":280341,"line_start":400,"line_end":400,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280346,"byte_end":280349,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280354,"byte_end":280367,"line_start":402,"line_end":402,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280372,"byte_end":280375,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280380,"byte_end":280388,"line_start":404,"line_end":404,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280393,"byte_end":280450,"line_start":405,"line_end":405,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280455,"byte_end":280481,"line_start":406,"line_end":406,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280486,"byte_end":280509,"line_start":407,"line_end":407,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280514,"byte_end":280517,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280522,"byte_end":280561,"line_start":409,"line_end":409,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280566,"byte_end":280569,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280574,"byte_end":280607,"line_start":411,"line_end":411,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280612,"byte_end":280655,"line_start":412,"line_end":412,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::zero()),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280660,"byte_end":280725,"line_start":413,"line_end":413,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280730,"byte_end":280765,"line_start":414,"line_end":414,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(1)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280770,"byte_end":280839,"line_start":415,"line_end":415,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280844,"byte_end":280879,"line_start":416,"line_end":416,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(-1)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280884,"byte_end":280954,"line_start":417,"line_end":417,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280959,"byte_end":280994,"line_start":418,"line_end":418,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":280999,"byte_end":281076,"line_start":419,"line_end":419,"column_start":5,"column_end":82}},{"value":"/            Some(hms(4, 6, 7)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281081,"byte_end":281116,"line_start":420,"line_end":420,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(86_400)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281121,"byte_end":281195,"line_start":421,"line_end":421,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms(3, 5, 7)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281200,"byte_end":281260,"line_start":422,"line_end":422,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281265,"byte_end":281268,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281273,"byte_end":281337,"line_start":424,"line_end":424,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 980).checked_add_signed(Duration::milliseconds(450)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281342,"byte_end":281424,"line_start":425,"line_end":425,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 8, 430)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281429,"byte_end":281470,"line_start":426,"line_end":426,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281475,"byte_end":281482,"line_start":427,"line_end":427,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281487,"byte_end":281495,"line_start":428,"line_end":428,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281500,"byte_end":281503,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281508,"byte_end":281536,"line_start":430,"line_end":430,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281541,"byte_end":281544,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281549,"byte_end":281557,"line_start":432,"line_end":432,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281562,"byte_end":281619,"line_start":433,"line_end":433,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281624,"byte_end":281652,"line_start":434,"line_end":434,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281657,"byte_end":281682,"line_start":435,"line_end":435,"column_start":5,"column_end":30}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281687,"byte_end":281762,"line_start":436,"line_end":436,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281767,"byte_end":281852,"line_start":437,"line_end":437,"column_start":5,"column_end":90}},{"value":"/ # }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281857,"byte_end":281864,"line_start":438,"line_end":438,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281869,"byte_end":281877,"line_start":439,"line_end":439,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281882,"byte_end":281885,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281890,"byte_end":281919,"line_start":441,"line_end":441,"column_start":5,"column_end":34}},{"value":"/ but the addition assumes that it is the only leap second happened.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281924,"byte_end":281994,"line_start":442,"line_end":442,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":281999,"byte_end":282002,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":282007,"byte_end":282015,"line_start":444,"line_end":444,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":282020,"byte_end":282077,"line_start":445,"line_end":445,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":282082,"byte_end":282110,"line_start":446,"line_end":446,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":282115,"byte_end":282140,"line_start":447,"line_end":447,"column_start":5,"column_end":30}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":282145,"byte_end":282186,"line_start":448,"line_end":448,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":282191,"byte_end":282276,"line_start":449,"line_end":449,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":282281,"byte_end":282318,"line_start":450,"line_end":450,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::zero()),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":282323,"byte_end":282380,"line_start":451,"line_end":451,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":282385,"byte_end":282429,"line_start":452,"line_end":452,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(-500)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":282434,"byte_end":282503,"line_start":453,"line_end":453,"column_start":5,"column_end":74}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":282508,"byte_end":282550,"line_start":454,"line_end":454,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(500)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":282555,"byte_end":282623,"line_start":455,"line_end":455,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_800)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":282628,"byte_end":282672,"line_start":456,"line_end":456,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(800)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":282677,"byte_end":282745,"line_start":457,"line_end":457,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 6, 0, 100)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":282750,"byte_end":282791,"line_start":458,"line_end":458,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(10)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":282796,"byte_end":282858,"line_start":459,"line_end":459,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 6, 9, 300)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":282863,"byte_end":282904,"line_start":460,"line_end":460,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(-10)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":282909,"byte_end":282972,"line_start":461,"line_end":461,"column_start":5,"column_end":68}},{"value":"/            Some(hmsm(3, 5, 50, 300)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":282977,"byte_end":283019,"line_start":462,"line_end":462,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::days(1)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":283024,"byte_end":283082,"line_start":463,"line_end":463,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms_milli(3, 5, 59, 300)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":283087,"byte_end":283159,"line_start":464,"line_end":464,"column_start":5,"column_end":77}},{"value":"/ # }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":283164,"byte_end":283171,"line_start":465,"line_end":465,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":283176,"byte_end":283184,"line_start":466,"line_end":466,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":286758,"byte_end":286776,"line_start":549,"line_end":549,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDateTime>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":283661,"byte_end":283723,"line_start":479,"line_end":479,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":283728,"byte_end":283731,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":283736,"byte_end":283831,"line_start":481,"line_end":481,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":283836,"byte_end":283902,"line_start":482,"line_end":482,"column_start":5,"column_end":71}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":283907,"byte_end":283974,"line_start":483,"line_end":483,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":283979,"byte_end":284072,"line_start":484,"line_end":484,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284077,"byte_end":284080,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284085,"byte_end":284136,"line_start":486,"line_end":486,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284141,"byte_end":284144,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284149,"byte_end":284162,"line_start":488,"line_end":488,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284167,"byte_end":284170,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284175,"byte_end":284183,"line_start":490,"line_end":490,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284188,"byte_end":284245,"line_start":491,"line_end":491,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284250,"byte_end":284276,"line_start":492,"line_end":492,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284281,"byte_end":284304,"line_start":493,"line_end":493,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284309,"byte_end":284312,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284317,"byte_end":284356,"line_start":495,"line_end":495,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284361,"byte_end":284364,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284369,"byte_end":284402,"line_start":497,"line_end":497,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284407,"byte_end":284450,"line_start":498,"line_end":498,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::zero()),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284455,"byte_end":284520,"line_start":499,"line_end":499,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284525,"byte_end":284560,"line_start":500,"line_end":500,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(1)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284565,"byte_end":284634,"line_start":501,"line_end":501,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284639,"byte_end":284674,"line_start":502,"line_end":502,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(-1)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284679,"byte_end":284749,"line_start":503,"line_end":503,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284754,"byte_end":284789,"line_start":504,"line_end":504,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284794,"byte_end":284871,"line_start":505,"line_end":505,"column_start":5,"column_end":82}},{"value":"/            Some(hms(2, 4, 7)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284876,"byte_end":284911,"line_start":506,"line_end":506,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(86_400)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284916,"byte_end":284990,"line_start":507,"line_end":507,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms(3, 5, 7)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":284995,"byte_end":285055,"line_start":508,"line_end":508,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285060,"byte_end":285063,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285068,"byte_end":285132,"line_start":510,"line_end":510,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 450).checked_sub_signed(Duration::milliseconds(670)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285137,"byte_end":285219,"line_start":511,"line_end":511,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 6, 780)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285224,"byte_end":285265,"line_start":512,"line_end":512,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285270,"byte_end":285277,"line_start":513,"line_end":513,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285282,"byte_end":285290,"line_start":514,"line_end":514,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285295,"byte_end":285298,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285303,"byte_end":285331,"line_start":516,"line_end":516,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285336,"byte_end":285339,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285344,"byte_end":285352,"line_start":518,"line_end":518,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285357,"byte_end":285414,"line_start":519,"line_end":519,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285419,"byte_end":285447,"line_start":520,"line_end":520,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285452,"byte_end":285477,"line_start":521,"line_end":521,"column_start":5,"column_end":30}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285482,"byte_end":285557,"line_start":522,"line_end":522,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285562,"byte_end":285647,"line_start":523,"line_end":523,"column_start":5,"column_end":90}},{"value":"/ # }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285652,"byte_end":285659,"line_start":524,"line_end":524,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285664,"byte_end":285672,"line_start":525,"line_end":525,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285677,"byte_end":285680,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285685,"byte_end":285714,"line_start":527,"line_end":527,"column_start":5,"column_end":34}},{"value":"/ but the subtraction assumes that it is the only leap second happened.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285719,"byte_end":285792,"line_start":528,"line_end":528,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285797,"byte_end":285800,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285805,"byte_end":285813,"line_start":530,"line_end":530,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285818,"byte_end":285875,"line_start":531,"line_end":531,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285880,"byte_end":285908,"line_start":532,"line_end":532,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285913,"byte_end":285938,"line_start":533,"line_end":533,"column_start":5,"column_end":30}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285943,"byte_end":285984,"line_start":534,"line_end":534,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":285989,"byte_end":286074,"line_start":535,"line_end":535,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":286079,"byte_end":286116,"line_start":536,"line_end":536,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::zero()),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":286121,"byte_end":286178,"line_start":537,"line_end":537,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":286183,"byte_end":286227,"line_start":538,"line_end":538,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(200)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":286232,"byte_end":286300,"line_start":539,"line_end":539,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_100)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":286305,"byte_end":286349,"line_start":540,"line_end":540,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(500)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":286354,"byte_end":286422,"line_start":541,"line_end":541,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":286427,"byte_end":286469,"line_start":542,"line_end":542,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::seconds(60)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":286474,"byte_end":286536,"line_start":543,"line_end":543,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 5, 0, 300)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":286541,"byte_end":286582,"line_start":544,"line_end":544,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::days(1)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":286587,"byte_end":286645,"line_start":545,"line_end":545,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms_milli(3, 6, 0, 300)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":286650,"byte_end":286721,"line_start":546,"line_end":546,"column_start":5,"column_end":76}},{"value":"/ # }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":286726,"byte_end":286733,"line_start":547,"line_end":547,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":286738,"byte_end":286746,"line_start":548,"line_end":548,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":289185,"byte_end":289206,"line_start":605,"line_end":605,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDateTime>::signed_duration_since","value":"fn (self, rhs: NaiveDateTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDateTime` from the current date and time.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDateTime` from the current date and time.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":287223,"byte_end":287292,"line_start":561,"line_end":561,"column_start":5,"column_end":74}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":287297,"byte_end":287344,"line_start":562,"line_end":562,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":287349,"byte_end":287352,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":287357,"byte_end":287452,"line_start":564,"line_end":564,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":287457,"byte_end":287523,"line_start":565,"line_end":565,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveDateTime`s themselves represents a leap second","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":287528,"byte_end":287607,"line_start":566,"line_end":566,"column_start":5,"column_end":84}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":287612,"byte_end":287657,"line_start":567,"line_end":567,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":287662,"byte_end":287721,"line_start":568,"line_end":568,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":287726,"byte_end":287729,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":287734,"byte_end":287747,"line_start":570,"line_end":570,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":287752,"byte_end":287755,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":287760,"byte_end":287768,"line_start":572,"line_end":572,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":287773,"byte_end":287830,"line_start":573,"line_end":573,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":287835,"byte_end":287861,"line_start":574,"line_end":574,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":287866,"byte_end":287889,"line_start":575,"line_end":575,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":287894,"byte_end":287897,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":287902,"byte_end":287941,"line_start":577,"line_end":577,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":287946,"byte_end":287949,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":287954,"byte_end":287987,"line_start":579,"line_end":579,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(d.and_hms(3, 5, 7).signed_duration_since(d.and_hms(2, 4, 6)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":287992,"byte_end":288068,"line_start":580,"line_end":580,"column_start":5,"column_end":81}},{"value":"/            Duration::seconds(3600 + 60 + 1));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":288073,"byte_end":288122,"line_start":581,"line_end":581,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":288127,"byte_end":288130,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ // July 8 is 190th day in the year 2016","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":288135,"byte_end":288178,"line_start":583,"line_end":583,"column_start":5,"column_end":48}},{"value":"/ let d0 = from_ymd(2016, 1, 1);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":288183,"byte_end":288217,"line_start":584,"line_end":584,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(d.and_hms_milli(0, 7, 6, 500).signed_duration_since(d0.and_hms(0, 0, 0)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":288222,"byte_end":288310,"line_start":585,"line_end":585,"column_start":5,"column_end":93}},{"value":"/            Duration::seconds(189 * 86_400 + 7 * 60 + 6) + Duration::milliseconds(500));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":288315,"byte_end":288406,"line_start":586,"line_end":586,"column_start":5,"column_end":96}},{"value":"/ # }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":288411,"byte_end":288418,"line_start":587,"line_end":587,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":288423,"byte_end":288431,"line_start":588,"line_end":588,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":288436,"byte_end":288439,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":288444,"byte_end":288506,"line_start":590,"line_end":590,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":288511,"byte_end":288557,"line_start":591,"line_end":591,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":288562,"byte_end":288565,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":288570,"byte_end":288578,"line_start":593,"line_end":593,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":288583,"byte_end":288640,"line_start":594,"line_end":594,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":288645,"byte_end":288673,"line_start":595,"line_end":595,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":288678,"byte_end":288703,"line_start":596,"line_end":596,"column_start":5,"column_end":30}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":288708,"byte_end":288749,"line_start":597,"line_end":597,"column_start":5,"column_end":46}},{"value":"/ let leap = from_ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_500);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":288754,"byte_end":288824,"line_start":598,"line_end":598,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(leap.signed_duration_since(from_ymd(2015, 6, 30).and_hms(23, 0, 0)),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":288829,"byte_end":288912,"line_start":599,"line_end":599,"column_start":5,"column_end":88}},{"value":"/            Duration::seconds(3600) + Duration::milliseconds(500));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":288917,"byte_end":288987,"line_start":600,"line_end":600,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ymd(2015, 7, 1).and_hms(1, 0, 0).signed_duration_since(leap),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":288992,"byte_end":289073,"line_start":601,"line_end":601,"column_start":5,"column_end":86}},{"value":"/            Duration::seconds(3600) - Duration::milliseconds(500));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":289078,"byte_end":289148,"line_start":602,"line_end":602,"column_start":5,"column_end":75}},{"value":"/ # }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":289153,"byte_end":289160,"line_start":603,"line_end":603,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":289165,"byte_end":289173,"line_start":604,"line_end":604,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":290586,"byte_end":290603,"line_start":637,"line_end":637,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDateTime>::format_with_items","value":"fn <'a, I> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n Otherwise it is same to the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":289355,"byte_end":289430,"line_start":609,"line_end":609,"column_start":5,"column_end":80}},{"value":"/ Otherwise it is same to the ordinary [`format`](#method.format) method.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":289435,"byte_end":289510,"line_start":610,"line_end":610,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":289515,"byte_end":289518,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":289523,"byte_end":289573,"line_start":612,"line_end":612,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":289578,"byte_end":289656,"line_start":613,"line_end":613,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":289661,"byte_end":289664,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":289669,"byte_end":289682,"line_start":615,"line_end":615,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":289687,"byte_end":289690,"line_start":616,"line_end":616,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":289695,"byte_end":289703,"line_start":617,"line_end":617,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":289708,"byte_end":289734,"line_start":618,"line_end":618,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":289739,"byte_end":289787,"line_start":619,"line_end":619,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":289792,"byte_end":289795,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":289800,"byte_end":289854,"line_start":621,"line_end":621,"column_start":5,"column_end":59}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":289859,"byte_end":289923,"line_start":622,"line_end":622,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format_with_items(fmt.clone()).to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":289928,"byte_end":290013,"line_start":623,"line_end":623,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(),    \"2015-09-05 23:56:04\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":290018,"byte_end":290103,"line_start":624,"line_end":624,"column_start":5,"column_end":90}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":290108,"byte_end":290116,"line_start":625,"line_end":625,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":290121,"byte_end":290124,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":290129,"byte_end":290213,"line_start":627,"line_end":627,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":290218,"byte_end":290221,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":290226,"byte_end":290234,"line_start":629,"line_end":629,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":290239,"byte_end":290267,"line_start":630,"line_end":630,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":290272,"byte_end":290322,"line_start":631,"line_end":631,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\").clone();","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":290327,"byte_end":290391,"line_start":632,"line_end":632,"column_start":5,"column_end":69}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":290396,"byte_end":290462,"line_start":633,"line_end":633,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format_with_items(fmt)), \"2015-09-05 23:56:04\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":290467,"byte_end":290547,"line_start":634,"line_end":634,"column_start":5,"column_end":85}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":290552,"byte_end":290560,"line_start":635,"line_end":635,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":290565,"byte_end":290574,"line_start":636,"line_end":636,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":292314,"byte_end":292320,"line_start":675,"line_end":675,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDateTime>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":290782,"byte_end":290854,"line_start":642,"line_end":642,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":290859,"byte_end":290929,"line_start":643,"line_end":643,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":290934,"byte_end":290972,"line_start":644,"line_end":644,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":290977,"byte_end":290980,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":290985,"byte_end":291020,"line_start":646,"line_end":646,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291025,"byte_end":291098,"line_start":647,"line_end":647,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291103,"byte_end":291160,"line_start":648,"line_end":648,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291165,"byte_end":291227,"line_start":649,"line_end":649,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291232,"byte_end":291292,"line_start":650,"line_end":650,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291297,"byte_end":291300,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291305,"byte_end":291369,"line_start":652,"line_end":652,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291374,"byte_end":291437,"line_start":653,"line_end":653,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291442,"byte_end":291517,"line_start":654,"line_end":654,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291522,"byte_end":291525,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291530,"byte_end":291543,"line_start":656,"line_end":656,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291548,"byte_end":291551,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291556,"byte_end":291564,"line_start":658,"line_end":658,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291569,"byte_end":291595,"line_start":659,"line_end":659,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291600,"byte_end":291603,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291608,"byte_end":291672,"line_start":661,"line_end":661,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291677,"byte_end":291759,"line_start":662,"line_end":662,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.format(\"around %l %p on %b %-d\").to_string(), \"around 11 PM on Sep 5\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291764,"byte_end":291853,"line_start":663,"line_end":663,"column_start":5,"column_end":94}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291858,"byte_end":291866,"line_start":664,"line_end":664,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291871,"byte_end":291874,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291879,"byte_end":291963,"line_start":666,"line_end":666,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291968,"byte_end":291971,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291976,"byte_end":291984,"line_start":668,"line_end":668,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":291989,"byte_end":292017,"line_start":669,"line_end":669,"column_start":5,"column_end":33}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":292022,"byte_end":292088,"line_start":670,"line_end":670,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"%Y-%m-%d %H:%M:%S\")), \"2015-09-05 23:56:04\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":292093,"byte_end":292178,"line_start":671,"line_end":671,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"around %l %p on %b %-d\")), \"around 11 PM on Sep 5\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":292183,"byte_end":292275,"line_start":672,"line_end":672,"column_start":5,"column_end":97}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":292280,"byte_end":292288,"line_start":673,"line_end":673,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":292293,"byte_end":292302,"line_start":674,"line_end":674,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1521},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":358274,"byte_end":358278,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"Date","qualname":"::date::Date","value":"Date {  }","parent":null,"children":[{"krate":0,"index":1523},{"krate":0,"index":1524}],"decl_id":null,"docs":" ISO 8601 calendar date with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date with time zone.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":356901,"byte_end":356943,"line_start":17,"line_end":17,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":356944,"byte_end":356947,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This type should be considered ambiguous at best,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":356948,"byte_end":357001,"line_start":19,"line_end":19,"column_start":1,"column_end":54}},{"value":"/ due to the inherent lack of precision required for the time zone resolution.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":357002,"byte_end":357082,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ For serialization and deserialization uses, it is best to use `NaiveDate` instead.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":357083,"byte_end":357169,"line_start":21,"line_end":21,"column_start":1,"column_end":87}},{"value":"/ There are some guarantees on the usage of `Date<Tz>`:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":357170,"byte_end":357227,"line_start":22,"line_end":22,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":357228,"byte_end":357231,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ - If properly constructed via `TimeZone::ymd` and others without an error,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":357232,"byte_end":357310,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/   the corresponding local date should exist for at least a moment.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":357311,"byte_end":357381,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/   (It may still have a gap from the offset changes.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":357382,"byte_end":357438,"line_start":26,"line_end":26,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":357439,"byte_end":357442,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ - The `TimeZone` is free to assign *any* `Offset` to the local date,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":357443,"byte_end":357515,"line_start":28,"line_end":28,"column_start":1,"column_end":73}},{"value":"/   as long as that offset did occur in given day.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":357516,"byte_end":357568,"line_start":29,"line_end":29,"column_start":1,"column_end":53}},{"value":"/   For example, if `2015-03-08T01:59-08:00` is followed by `2015-03-08T03:00-07:00`,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":357569,"byte_end":357656,"line_start":30,"line_end":30,"column_start":1,"column_end":88}},{"value":"/   it may produce either `2015-03-08-08:00` or `2015-03-08-07:00`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":357657,"byte_end":357725,"line_start":31,"line_end":31,"column_start":1,"column_end":69}},{"value":"/   but *not* `2015-03-08+00:00` and others.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":357726,"byte_end":357772,"line_start":32,"line_end":32,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":357773,"byte_end":357776,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ - Once constructed as a full `DateTime`,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":357777,"byte_end":357821,"line_start":34,"line_end":34,"column_start":1,"column_end":45}},{"value":"/   `DateTime::date` and other associated methods should return those for the original `Date`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":357822,"byte_end":357918,"line_start":35,"line_end":35,"column_start":1,"column_end":97}},{"value":"/   For example, if `dt = tz.ymd(y,m,d).hms(h,n,s)` were valid, `dt.date() == tz.ymd(y,m,d)`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":357919,"byte_end":358014,"line_start":36,"line_end":36,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":358015,"byte_end":358018,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ - The date is timezone-agnostic up to one day (i.e. practically always),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":358019,"byte_end":358095,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/   so the local date and UTC date should be equal for most cases","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":358096,"byte_end":358163,"line_start":39,"line_end":39,"column_start":1,"column_end":68}},{"value":"/   even though the raw calculation between `NaiveDate` and `Duration` may not.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":358164,"byte_end":358245,"line_start":40,"line_end":40,"column_start":1,"column_end":82}}]},{"kind":"Const","id":{"krate":0,"index":694},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":358386,"byte_end":358394,"line_start":48,"line_end":48,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::date::MIN_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `Date`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":358343,"byte_end":358375,"line_start":47,"line_end":47,"column_start":1,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":695},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":358496,"byte_end":358504,"line_start":50,"line_end":50,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::date::MAX_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `Date`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":358453,"byte_end":358485,"line_start":49,"line_end":49,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":358853,"byte_end":358861,"line_start":58,"line_end":58,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<Date<Tz>>::from_utc","value":"fn (date: NaiveDate, offset: Tz::Offset) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` with given *UTC* date and offset.\n The local date should be constructed via the `TimeZone` trait.\n","sig":null,"attributes":[{"value":"/ Makes a new `Date` with given *UTC* date and offset.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":358598,"byte_end":358654,"line_start":53,"line_end":53,"column_start":5,"column_end":61}},{"value":"/ The local date should be constructed via the `TimeZone` trait.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":358659,"byte_end":358725,"line_start":54,"line_end":54,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":358832,"byte_end":358841,"line_start":57,"line_end":57,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":359162,"byte_end":359170,"line_start":67,"line_end":67,"column_start":12,"column_end":20},"name":"and_time","qualname":"<Date<Tz>>::and_time","value":"fn (&self, time: NaiveTime) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":358968,"byte_end":359039,"line_start":62,"line_end":62,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":359044,"byte_end":359092,"line_start":63,"line_end":63,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":359097,"byte_end":359100,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid datetime.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":359105,"byte_end":359136,"line_start":65,"line_end":65,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":359141,"byte_end":359150,"line_start":66,"line_end":66,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":359567,"byte_end":359574,"line_start":77,"line_end":77,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<Date<Tz>>::and_hms","value":"fn (&self, hour: u32, min: u32, sec: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":359352,"byte_end":359426,"line_start":72,"line_end":72,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":359431,"byte_end":359479,"line_start":73,"line_end":73,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":359484,"byte_end":359487,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":359492,"byte_end":359541,"line_start":75,"line_end":75,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":359546,"byte_end":359555,"line_start":76,"line_end":76,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":359929,"byte_end":359940,"line_start":86,"line_end":86,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<Date<Tz>>::and_hms_opt","value":"fn (&self, hour: u32, min: u32, sec: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":359706,"byte_end":359780,"line_start":81,"line_end":81,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":359785,"byte_end":359833,"line_start":82,"line_end":82,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":359838,"byte_end":359841,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":359846,"byte_end":359903,"line_start":84,"line_end":84,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":359908,"byte_end":359917,"line_start":85,"line_end":85,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":360427,"byte_end":360440,"line_start":96,"line_end":96,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<Date<Tz>>::and_hms_milli","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":360101,"byte_end":360188,"line_start":90,"line_end":90,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":360193,"byte_end":360273,"line_start":91,"line_end":91,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":360278,"byte_end":360326,"line_start":92,"line_end":92,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":360331,"byte_end":360334,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":360339,"byte_end":360401,"line_start":94,"line_end":94,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":360406,"byte_end":360415,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":360931,"byte_end":360948,"line_start":106,"line_end":106,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<Date<Tz>>::and_hms_milli_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":360597,"byte_end":360684,"line_start":100,"line_end":100,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":360689,"byte_end":360769,"line_start":101,"line_end":101,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":360774,"byte_end":360822,"line_start":102,"line_end":102,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":360827,"byte_end":360830,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":360835,"byte_end":360905,"line_start":104,"line_end":104,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":360910,"byte_end":360919,"line_start":105,"line_end":105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":361493,"byte_end":361506,"line_start":117,"line_end":117,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<Date<Tz>>::and_hms_micro","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":361163,"byte_end":361250,"line_start":111,"line_end":111,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":361255,"byte_end":361339,"line_start":112,"line_end":112,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":361344,"byte_end":361392,"line_start":113,"line_end":113,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":361397,"byte_end":361400,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":361405,"byte_end":361467,"line_start":115,"line_end":115,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":361472,"byte_end":361481,"line_start":116,"line_end":116,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":362001,"byte_end":362018,"line_start":127,"line_end":127,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<Date<Tz>>::and_hms_micro_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":361663,"byte_end":361750,"line_start":121,"line_end":121,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":361755,"byte_end":361839,"line_start":122,"line_end":122,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":361844,"byte_end":361892,"line_start":123,"line_end":123,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":361897,"byte_end":361900,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":361905,"byte_end":361975,"line_start":125,"line_end":125,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":361980,"byte_end":361989,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":362564,"byte_end":362576,"line_start":138,"line_end":138,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<Date<Tz>>::and_hms_nano","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":362233,"byte_end":362319,"line_start":132,"line_end":132,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":362324,"byte_end":362411,"line_start":133,"line_end":133,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":362416,"byte_end":362464,"line_start":134,"line_end":134,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":362469,"byte_end":362472,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":362477,"byte_end":362538,"line_start":136,"line_end":136,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":362543,"byte_end":362552,"line_start":137,"line_end":137,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":363069,"byte_end":363085,"line_start":148,"line_end":148,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<Date<Tz>>::and_hms_nano_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":362730,"byte_end":362816,"line_start":142,"line_end":142,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":362821,"byte_end":362908,"line_start":143,"line_end":143,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":362913,"byte_end":362961,"line_start":144,"line_end":144,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":362966,"byte_end":362969,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":362974,"byte_end":363043,"line_start":146,"line_end":146,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":363048,"byte_end":363057,"line_start":147,"line_end":147,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":363430,"byte_end":363434,"line_start":157,"line_end":157,"column_start":12,"column_end":16},"name":"succ","qualname":"<Date<Tz>>::succ","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":363296,"byte_end":363337,"line_start":153,"line_end":153,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":363342,"byte_end":363345,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":363350,"byte_end":363404,"line_start":155,"line_end":155,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":363409,"byte_end":363418,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":363656,"byte_end":363664,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<Date<Tz>>::succ_opt","value":"fn (&self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":363514,"byte_end":363555,"line_start":161,"line_end":161,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":363560,"byte_end":363563,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":363568,"byte_end":363630,"line_start":163,"line_end":163,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":363635,"byte_end":363644,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":363924,"byte_end":363928,"line_start":173,"line_end":173,"column_start":12,"column_end":16},"name":"pred","qualname":"<Date<Tz>>::pred","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":363788,"byte_end":363830,"line_start":169,"line_end":169,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":363835,"byte_end":363838,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":363843,"byte_end":363898,"line_start":171,"line_end":171,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":363903,"byte_end":363912,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":364152,"byte_end":364160,"line_start":181,"line_end":181,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<Date<Tz>>::pred_opt","value":"fn (&self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":364008,"byte_end":364050,"line_start":177,"line_end":177,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":364055,"byte_end":364058,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":364063,"byte_end":364126,"line_start":179,"line_end":179,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":364131,"byte_end":364140,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":364354,"byte_end":364360,"line_start":187,"line_end":187,"column_start":12,"column_end":18},"name":"offset","qualname":"<Date<Tz>>::offset","value":"fn (&self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":364284,"byte_end":364328,"line_start":185,"line_end":185,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":364333,"byte_end":364342,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":364481,"byte_end":364489,"line_start":193,"line_end":193,"column_start":12,"column_end":20},"name":"timezone","qualname":"<Date<Tz>>::timezone","value":"fn (&self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":364417,"byte_end":364455,"line_start":191,"line_end":191,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":364460,"byte_end":364469,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":364715,"byte_end":364728,"line_start":200,"line_end":200,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<Date<Tz>>::with_timezone","value":"fn <Tz2> (&self, tz: &Tz2) -> Date<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `Date` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":364560,"byte_end":364597,"line_start":197,"line_end":197,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `Date` (but will change the string representation).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":364602,"byte_end":364689,"line_start":198,"line_end":198,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":364694,"byte_end":364703,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":364960,"byte_end":364978,"line_start":208,"line_end":208,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<Date<Tz>>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":364824,"byte_end":364870,"line_start":204,"line_end":204,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":364875,"byte_end":364878,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":364883,"byte_end":364934,"line_start":206,"line_end":206,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":364939,"byte_end":364948,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":365298,"byte_end":365316,"line_start":217,"line_end":217,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<Date<Tz>>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":365155,"byte_end":365208,"line_start":213,"line_end":213,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":365213,"byte_end":365216,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":365221,"byte_end":365272,"line_start":215,"line_end":215,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":365277,"byte_end":365286,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":365817,"byte_end":365838,"line_start":229,"line_end":229,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<Date<Tz>>::signed_duration_since","value":"fn <Tz2> (self, rhs: Date<Tz2>) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `Date` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `Date` from the current date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":365493,"byte_end":365544,"line_start":222,"line_end":222,"column_start":5,"column_end":56}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":365549,"byte_end":365594,"line_start":223,"line_end":223,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":365599,"byte_end":365602,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":365607,"byte_end":365654,"line_start":225,"line_end":225,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":365659,"byte_end":365718,"line_start":226,"line_end":226,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":365796,"byte_end":365805,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":366021,"byte_end":366030,"line_start":235,"line_end":235,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<Date<Tz>>::naive_utc","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC date.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":365954,"byte_end":365995,"line_start":233,"line_end":233,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":366000,"byte_end":366009,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":366336,"byte_end":366347,"line_start":245,"line_end":245,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<Date<Tz>>::naive_local","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local date.","sig":null,"attributes":[{"value":"/ Returns a view to the naive local date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":366082,"byte_end":366125,"line_start":239,"line_end":239,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":366130,"byte_end":366133,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ This is technically same to [`naive_utc`](#method.naive_utc)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":366138,"byte_end":366202,"line_start":241,"line_end":241,"column_start":5,"column_end":69}},{"value":"/ because the offset is restricted to never exceed one day,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":366207,"byte_end":366268,"line_start":242,"line_end":242,"column_start":5,"column_end":66}},{"value":"/ but provided for the consistency.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":366273,"byte_end":366310,"line_start":243,"line_end":243,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":366315,"byte_end":366324,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":366834,"byte_end":366851,"line_start":259,"line_end":259,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<Date<Tz>>::format_with_items","value":"fn <'a, I> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":366751,"byte_end":366808,"line_start":257,"line_end":257,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":366813,"byte_end":366822,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":367251,"byte_end":367257,"line_start":268,"line_end":268,"column_start":12,"column_end":18},"name":"format","qualname":"<Date<Tz>>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":367054,"byte_end":367108,"line_start":264,"line_end":264,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":367113,"byte_end":367182,"line_start":265,"line_end":265,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":367187,"byte_end":367225,"line_start":266,"line_end":266,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":367230,"byte_end":367239,"line_start":267,"line_end":267,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1529},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":371815,"byte_end":371819,"line_start":28,"line_end":28,"column_start":5,"column_end":9},"name":"Secs","qualname":"::datetime::SecondsFormat::Secs","value":"SecondsFormat::Secs","parent":{"krate":0,"index":1528},"children":[],"decl_id":null,"docs":" Format whole seconds only, with no decimal point nor subseconds.\n","sig":null,"attributes":[{"value":"/ Format whole seconds only, with no decimal point nor subseconds.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":371742,"byte_end":371810,"line_start":27,"line_end":27,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1531},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":371958,"byte_end":371964,"line_start":32,"line_end":32,"column_start":5,"column_end":11},"name":"Millis","qualname":"::datetime::SecondsFormat::Millis","value":"SecondsFormat::Millis","parent":{"krate":0,"index":1528},"children":[],"decl_id":null,"docs":" Use fixed 3 subsecond digits. This corresponds to\n [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).\n","sig":null,"attributes":[{"value":"/ Use fixed 3 subsecond digits. This corresponds to","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":371826,"byte_end":371879,"line_start":30,"line_end":30,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":371884,"byte_end":371953,"line_start":31,"line_end":31,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1533},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":372103,"byte_end":372109,"line_start":36,"line_end":36,"column_start":5,"column_end":11},"name":"Micros","qualname":"::datetime::SecondsFormat::Micros","value":"SecondsFormat::Micros","parent":{"krate":0,"index":1528},"children":[],"decl_id":null,"docs":" Use fixed 6 subsecond digits. This corresponds to\n [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).\n","sig":null,"attributes":[{"value":"/ Use fixed 6 subsecond digits. This corresponds to","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":371971,"byte_end":372024,"line_start":34,"line_end":34,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":372029,"byte_end":372098,"line_start":35,"line_end":35,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1535},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":372248,"byte_end":372253,"line_start":40,"line_end":40,"column_start":5,"column_end":10},"name":"Nanos","qualname":"::datetime::SecondsFormat::Nanos","value":"SecondsFormat::Nanos","parent":{"krate":0,"index":1528},"children":[],"decl_id":null,"docs":" Use fixed 9 subsecond digits. This corresponds to\n [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).\n","sig":null,"attributes":[{"value":"/ Use fixed 9 subsecond digits. This corresponds to","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":372116,"byte_end":372169,"line_start":38,"line_end":38,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":372174,"byte_end":372243,"line_start":39,"line_end":39,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1537},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":372489,"byte_end":372495,"line_start":45,"line_end":45,"column_start":5,"column_end":11},"name":"AutoSi","qualname":"::datetime::SecondsFormat::AutoSi","value":"SecondsFormat::AutoSi","parent":{"krate":0,"index":1528},"children":[],"decl_id":null,"docs":" Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to\n display all available non-zero sub-second digits.  This corresponds to\n [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":372260,"byte_end":372333,"line_start":42,"line_end":42,"column_start":5,"column_end":78}},{"value":"/ display all available non-zero sub-second digits.  This corresponds to","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":372338,"byte_end":372412,"line_start":43,"line_end":43,"column_start":5,"column_end":79}},{"value":"/ [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":372417,"byte_end":372484,"line_start":44,"line_end":44,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1539},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":372555,"byte_end":372570,"line_start":49,"line_end":49,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::datetime::SecondsFormat::__NonExhaustive","value":"SecondsFormat::__NonExhaustive","parent":{"krate":0,"index":1528},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1528},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":371722,"byte_end":371735,"line_start":26,"line_end":26,"column_start":10,"column_end":23},"name":"SecondsFormat","qualname":"::datetime::SecondsFormat","value":"SecondsFormat::{Secs, Millis, Micros, Nanos, AutoSi, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":1529},{"krate":0,"index":1531},{"krate":0,"index":1533},{"krate":0,"index":1535},{"krate":0,"index":1537},{"krate":0,"index":1539}],"decl_id":null,"docs":" Specific formatting options for seconds. This may be extended in the\n future, so exhaustive matching in external code is not recommended.","sig":null,"attributes":[{"value":"/ Specific formatting options for seconds. This may be extended in the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":371459,"byte_end":371531,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/ future, so exhaustive matching in external code is not recommended.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":371532,"byte_end":371603,"line_start":22,"line_end":22,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":371604,"byte_end":371607,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ See the `TimeZone::to_rfc3339_opts` function for usage.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":371608,"byte_end":371667,"line_start":24,"line_end":24,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1552},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":372868,"byte_end":372876,"line_start":58,"line_end":58,"column_start":12,"column_end":20},"name":"DateTime","qualname":"::datetime::DateTime","value":"DateTime {  }","parent":null,"children":[{"krate":0,"index":1554},{"krate":0,"index":1555}],"decl_id":null,"docs":" ISO 8601 combined date and time with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time with time zone.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":372575,"byte_end":372626,"line_start":52,"line_end":52,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":372627,"byte_end":372630,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ There are some constructors implemented here (the `from_*` methods), but","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":372631,"byte_end":372707,"line_start":54,"line_end":54,"column_start":1,"column_end":77}},{"value":"/ the general-purpose constructors are all via the methods on the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":372708,"byte_end":372775,"line_start":55,"line_end":55,"column_start":1,"column_end":68}},{"value":"/ [`TimeZone`](./offset/trait.TimeZone.html) implementations.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":372776,"byte_end":372839,"line_start":56,"line_end":56,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":373517,"byte_end":373525,"line_start":78,"line_end":78,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<DateTime<Tz>>::from_utc","value":"fn (datetime: NaiveDateTime, offset: Tz::Offset) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` with given *UTC* datetime and offset.\n The local datetime should be constructed via the `TimeZone` trait.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` with given *UTC* datetime and offset.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":372987,"byte_end":373051,"line_start":64,"line_end":64,"column_start":5,"column_end":69}},{"value":"/ The local datetime should be constructed via the `TimeZone` trait.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":373056,"byte_end":373126,"line_start":65,"line_end":65,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":373131,"byte_end":373134,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":373139,"byte_end":373152,"line_start":67,"line_end":67,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":373157,"byte_end":373160,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":373165,"byte_end":373173,"line_start":69,"line_end":69,"column_start":5,"column_end":13}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":373178,"byte_end":373235,"line_start":70,"line_end":70,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":373240,"byte_end":373243,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":373248,"byte_end":373330,"line_start":72,"line_end":72,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":373335,"byte_end":373376,"line_start":73,"line_end":73,"column_start":5,"column_end":46}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":373381,"byte_end":373389,"line_start":74,"line_end":74,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":373496,"byte_end":373505,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":373713,"byte_end":373717,"line_start":84,"line_end":84,"column_start":12,"column_end":16},"name":"date","qualname":"<DateTime<Tz>>::date","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.\n","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":373656,"byte_end":373687,"line_start":82,"line_end":82,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":373692,"byte_end":373701,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":373942,"byte_end":373946,"line_start":91,"line_end":91,"column_start":12,"column_end":16},"name":"time","qualname":"<DateTime<Tz>>::time","value":"fn (&self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.\n Unlike `date`, this is not associated to the time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":373821,"byte_end":373852,"line_start":88,"line_end":88,"column_start":5,"column_end":36}},{"value":"/ Unlike `date`, this is not associated to the time zone.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":373857,"byte_end":373916,"line_start":89,"line_end":89,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":373921,"byte_end":373930,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374163,"byte_end":374172,"line_start":98,"line_end":98,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<DateTime<Tz>>::timestamp","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n (aka \"UNIX timestamp\").\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374029,"byte_end":374105,"line_start":95,"line_end":95,"column_start":5,"column_end":81}},{"value":"/ (aka \"UNIX timestamp\").","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374110,"byte_end":374137,"line_start":96,"line_end":96,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374142,"byte_end":374151,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374993,"byte_end":375009,"line_start":122,"line_end":122,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<DateTime<Tz>>::timestamp_millis","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-milliseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-milliseconds since January 1, 1970 UTC","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374234,"byte_end":374307,"line_start":102,"line_end":102,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374312,"byte_end":374315,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374320,"byte_end":374394,"line_start":104,"line_end":104,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584 Million. (If this is a problem, please file","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374399,"byte_end":374472,"line_start":105,"line_end":105,"column_start":5,"column_end":78}},{"value":"/ an issue to let me know what domain needs millisecond precision over","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374477,"byte_end":374549,"line_start":106,"line_end":106,"column_start":5,"column_end":77}},{"value":"/ billions of years, I'm curious.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374554,"byte_end":374590,"line_start":107,"line_end":107,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374595,"byte_end":374598,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374603,"byte_end":374616,"line_start":109,"line_end":109,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374621,"byte_end":374624,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374629,"byte_end":374637,"line_start":111,"line_end":111,"column_start":5,"column_end":13}},{"value":"/ use chrono::Utc;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374642,"byte_end":374662,"line_start":112,"line_end":112,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374667,"byte_end":374692,"line_start":113,"line_end":113,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374697,"byte_end":374700,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374705,"byte_end":374766,"line_start":115,"line_end":115,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374771,"byte_end":374816,"line_start":116,"line_end":116,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374821,"byte_end":374824,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374829,"byte_end":374892,"line_start":118,"line_end":118,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374897,"byte_end":374954,"line_start":119,"line_end":119,"column_start":5,"column_end":62}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374959,"byte_end":374967,"line_start":120,"line_end":120,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":374972,"byte_end":374981,"line_start":121,"line_end":121,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375830,"byte_end":375845,"line_start":146,"line_end":146,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<DateTime<Tz>>::timestamp_nanos","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375078,"byte_end":375150,"line_start":126,"line_end":126,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375155,"byte_end":375158,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375163,"byte_end":375237,"line_start":128,"line_end":128,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584. (If this is a problem, please file","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375242,"byte_end":375307,"line_start":129,"line_end":129,"column_start":5,"column_end":70}},{"value":"/ an issue to let me know what domain needs nanosecond precision over","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375312,"byte_end":375383,"line_start":130,"line_end":130,"column_start":5,"column_end":76}},{"value":"/ millenia, I'm curious.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375388,"byte_end":375415,"line_start":131,"line_end":131,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375420,"byte_end":375423,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375428,"byte_end":375441,"line_start":133,"line_end":133,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375446,"byte_end":375449,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375454,"byte_end":375462,"line_start":135,"line_end":135,"column_start":5,"column_end":13}},{"value":"/ use chrono::Utc;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375467,"byte_end":375487,"line_start":136,"line_end":136,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375492,"byte_end":375517,"line_start":137,"line_end":137,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375522,"byte_end":375525,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375530,"byte_end":375590,"line_start":139,"line_end":139,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375595,"byte_end":375647,"line_start":140,"line_end":140,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375652,"byte_end":375655,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375660,"byte_end":375722,"line_start":142,"line_end":142,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_000_000_000_555);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375727,"byte_end":375791,"line_start":143,"line_end":143,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375796,"byte_end":375804,"line_start":144,"line_end":144,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375809,"byte_end":375818,"line_start":145,"line_end":145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":376175,"byte_end":376198,"line_start":156,"line_end":156,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<DateTime<Tz>>::timestamp_subsec_millis","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last second boundary","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375913,"byte_end":375982,"line_start":150,"line_end":150,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375987,"byte_end":375990,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":375995,"byte_end":376054,"line_start":152,"line_end":152,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":376059,"byte_end":376062,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of milliseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":376067,"byte_end":376149,"line_start":154,"line_end":154,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":376154,"byte_end":376163,"line_start":155,"line_end":155,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":851},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":376540,"byte_end":376563,"line_start":166,"line_end":166,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<DateTime<Tz>>::timestamp_subsec_micros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last second boundary","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":376274,"byte_end":376343,"line_start":160,"line_end":160,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":376348,"byte_end":376351,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":376356,"byte_end":376419,"line_start":162,"line_end":162,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":376424,"byte_end":376427,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of microseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":376432,"byte_end":376514,"line_start":164,"line_end":164,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":376519,"byte_end":376528,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":376907,"byte_end":376929,"line_start":176,"line_end":176,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<DateTime<Tz>>::timestamp_subsec_nanos","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last second boundary","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":376639,"byte_end":376707,"line_start":170,"line_end":170,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":376712,"byte_end":376715,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999_999","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":376720,"byte_end":376787,"line_start":172,"line_end":172,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":376792,"byte_end":376795,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of nanoseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":376800,"byte_end":376881,"line_start":174,"line_end":174,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":376886,"byte_end":376895,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":377074,"byte_end":377080,"line_start":182,"line_end":182,"column_start":12,"column_end":18},"name":"offset","qualname":"<DateTime<Tz>>::offset","value":"fn (&self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":377004,"byte_end":377048,"line_start":180,"line_end":180,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":377053,"byte_end":377062,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":377201,"byte_end":377209,"line_start":188,"line_end":188,"column_start":12,"column_end":20},"name":"timezone","qualname":"<DateTime<Tz>>::timezone","value":"fn (&self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":377137,"byte_end":377175,"line_start":186,"line_end":186,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":377180,"byte_end":377189,"line_start":187,"line_end":187,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":855},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":377439,"byte_end":377452,"line_start":195,"line_end":195,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<DateTime<Tz>>::with_timezone","value":"fn <Tz2> (&self, tz: &Tz2) -> DateTime<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `DateTime` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":377280,"byte_end":377317,"line_start":192,"line_end":192,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `DateTime` (but will change the string representation).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":377322,"byte_end":377413,"line_start":193,"line_end":193,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":377418,"byte_end":377427,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":377705,"byte_end":377723,"line_start":203,"line_end":203,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<DateTime<Tz>>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":377560,"byte_end":377615,"line_start":199,"line_end":199,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":377620,"byte_end":377623,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":377628,"byte_end":377679,"line_start":201,"line_end":201,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":377684,"byte_end":377693,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":378076,"byte_end":378094,"line_start":212,"line_end":212,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<DateTime<Tz>>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":377924,"byte_end":377986,"line_start":208,"line_end":208,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":377991,"byte_end":377994,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":377999,"byte_end":378050,"line_start":210,"line_end":210,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":378055,"byte_end":378064,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":378510,"byte_end":378531,"line_start":221,"line_end":221,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<DateTime<Tz>>::signed_duration_since","value":"fn <Tz2> (self, rhs: DateTime<Tz2>) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `DateTime` from the current date and time.\n This does not overflow or underflow at all.\n","sig":null,"attributes":[{"value":"/ Subtracts another `DateTime` from the current date and time.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":378295,"byte_end":378359,"line_start":217,"line_end":217,"column_start":5,"column_end":69}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":378364,"byte_end":378411,"line_start":218,"line_end":218,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":378489,"byte_end":378498,"line_start":220,"line_end":220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":378730,"byte_end":378739,"line_start":227,"line_end":227,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<DateTime<Tz>>::naive_utc","value":"fn (&self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC datetime.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":378659,"byte_end":378704,"line_start":225,"line_end":225,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":378709,"byte_end":378718,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":378872,"byte_end":378883,"line_start":233,"line_end":233,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<DateTime<Tz>>::naive_local","value":"fn (&self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive local datetime.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":378799,"byte_end":378846,"line_start":231,"line_end":231,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":378851,"byte_end":378860,"line_start":232,"line_end":232,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":379486,"byte_end":379504,"line_start":247,"line_end":247,"column_start":12,"column_end":30},"name":"parse_from_rfc2822","qualname":"<DateTime<FixedOffset>>::parse_from_rfc2822","value":"fn (s: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\n then returns a new `DateTime` with a parsed `FixedOffset`.\n","sig":null,"attributes":[{"value":"/ Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":379322,"byte_end":379407,"line_start":245,"line_end":245,"column_start":5,"column_end":90}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":379412,"byte_end":379474,"line_start":246,"line_end":246,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":380143,"byte_end":380161,"line_start":259,"line_end":259,"column_start":12,"column_end":30},"name":"parse_from_rfc3339","qualname":"<DateTime<FixedOffset>>::parse_from_rfc3339","value":"fn (s: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[{"value":"/ Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":379774,"byte_end":379867,"line_start":254,"line_end":254,"column_start":5,"column_end":98}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":379872,"byte_end":379934,"line_start":255,"line_end":255,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":379939,"byte_end":379942,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ Why isn't this named `parse_from_iso8601`? That's because ISO 8601 allows some freedom","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":379947,"byte_end":380037,"line_start":257,"line_end":257,"column_start":5,"column_end":95}},{"value":"/ over the syntax and RFC 3339 exercises that freedom to rigidly define a fixed format.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":380042,"byte_end":380131,"line_start":258,"line_end":258,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":381383,"byte_end":381397,"line_start":286,"line_end":286,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<DateTime<FixedOffset>>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a new `DateTime` with a parsed `FixedOffset`.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":380431,"byte_end":380487,"line_start":266,"line_end":266,"column_start":5,"column_end":61}},{"value":"/ returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":380492,"byte_end":380549,"line_start":267,"line_end":267,"column_start":5,"column_end":62}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":380554,"byte_end":380623,"line_start":268,"line_end":268,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":380628,"byte_end":380666,"line_start":269,"line_end":269,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":380671,"byte_end":380674,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ See also `Offset::datetime_from_str` which gives a local `DateTime` on specific time zone.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":380679,"byte_end":380773,"line_start":271,"line_end":271,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":380778,"byte_end":380781,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ Note that this method *requires a timezone* in the string. See","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":380786,"byte_end":380852,"line_start":273,"line_end":273,"column_start":5,"column_end":71}},{"value":"/ [`NaiveDateTime::parse_from_str`](./naive/struct.NaiveDateTime.html#method.parse_from_str)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":380857,"byte_end":380951,"line_start":274,"line_end":274,"column_start":5,"column_end":99}},{"value":"/ for a version that does not require a timezone in the to-be-parsed str.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":380956,"byte_end":381031,"line_start":275,"line_end":275,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":381036,"byte_end":381039,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":381044,"byte_end":381057,"line_start":277,"line_end":277,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":381062,"byte_end":381065,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":381070,"byte_end":381081,"line_start":279,"line_end":279,"column_start":5,"column_end":16}},{"value":"/ use chrono::{DateTime, FixedOffset, TimeZone};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":381086,"byte_end":381136,"line_start":280,"line_end":280,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":381141,"byte_end":381144,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::parse_from_str(","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":381149,"byte_end":381187,"line_start":282,"line_end":282,"column_start":5,"column_end":43}},{"value":"/     \"1983 Apr 13 12:09:14.274 +0000\", \"%Y %b %d %H:%M:%S%.3f %z\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":381192,"byte_end":381262,"line_start":283,"line_end":283,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(dt, Ok(FixedOffset::east(0).ymd(1983, 4, 13).and_hms_milli(12, 9, 14, 274)));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":381267,"byte_end":381359,"line_start":284,"line_end":284,"column_start":5,"column_end":97}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":381364,"byte_end":381371,"line_start":285,"line_end":285,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":381765,"byte_end":381775,"line_start":295,"line_end":295,"column_start":12,"column_end":22},"name":"to_rfc2822","qualname":"<DateTime<Tz>>::to_rfc2822","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":381667,"byte_end":381753,"line_start":294,"line_end":294,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":382058,"byte_end":382068,"line_start":301,"line_end":301,"column_start":12,"column_end":22},"name":"to_rfc3339","qualname":"<DateTime<Tz>>::to_rfc3339","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":381952,"byte_end":382046,"line_start":300,"line_end":300,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":383482,"byte_end":383497,"line_start":330,"line_end":330,"column_start":12,"column_end":27},"name":"to_rfc3339_opts","qualname":"<DateTime<Tz>>::to_rfc3339_opts","value":"fn (&self, secform: SecondsFormat, use_z: bool) -> String","parent":null,"children":[],"decl_id":null,"docs":" Return an RFC 3339 and ISO 8601 date and time string with subseconds\n formatted as per a `SecondsFormat`. If passed `use_z` true and the\n timezone is UTC (offset 0), use 'Z', as per\n [Fixed::TimezoneOffsetColonZ](format/enum.Fixed.html#variant.TimezoneOffsetColonZ).\n If passed `use_z` false, use\n [Fixed::TimezoneOffsetColon](format/enum.Fixed.html#variant.TimezoneOffsetColon).","sig":null,"attributes":[{"value":"/ Return an RFC 3339 and ISO 8601 date and time string with subseconds","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":382245,"byte_end":382317,"line_start":306,"line_end":306,"column_start":5,"column_end":77}},{"value":"/ formatted as per a `SecondsFormat`. If passed `use_z` true and the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":382322,"byte_end":382392,"line_start":307,"line_end":307,"column_start":5,"column_end":75}},{"value":"/ timezone is UTC (offset 0), use 'Z', as per","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":382397,"byte_end":382444,"line_start":308,"line_end":308,"column_start":5,"column_end":52}},{"value":"/ [Fixed::TimezoneOffsetColonZ](format/enum.Fixed.html#variant.TimezoneOffsetColonZ).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":382449,"byte_end":382536,"line_start":309,"line_end":309,"column_start":5,"column_end":92}},{"value":"/ If passed `use_z` false, use","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":382541,"byte_end":382573,"line_start":310,"line_end":310,"column_start":5,"column_end":37}},{"value":"/ [Fixed::TimezoneOffsetColon](format/enum.Fixed.html#variant.TimezoneOffsetColon).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":382578,"byte_end":382663,"line_start":311,"line_end":311,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":382668,"byte_end":382671,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":382676,"byte_end":382690,"line_start":313,"line_end":313,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":382695,"byte_end":382698,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":382703,"byte_end":382714,"line_start":315,"line_end":315,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{DateTime, FixedOffset, SecondsFormat, TimeZone, Utc};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":382719,"byte_end":382791,"line_start":316,"line_end":316,"column_start":5,"column_end":77}},{"value":"/ let dt = Utc.ymd(2018, 1, 26).and_hms_micro(18, 30, 9, 453_829);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":382796,"byte_end":382864,"line_start":317,"line_end":317,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, false),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":382869,"byte_end":382933,"line_start":318,"line_end":318,"column_start":5,"column_end":69}},{"value":"/            \"2018-01-26T18:30:09.453+00:00\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":382938,"byte_end":382986,"line_start":319,"line_end":319,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, true),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":382991,"byte_end":383054,"line_start":320,"line_end":320,"column_start":5,"column_end":68}},{"value":"/            \"2018-01-26T18:30:09.453Z\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":383059,"byte_end":383102,"line_start":321,"line_end":321,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":383107,"byte_end":383168,"line_start":322,"line_end":322,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T18:30:09Z\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":383173,"byte_end":383212,"line_start":323,"line_end":323,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":383217,"byte_end":383220,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ let pst = FixedOffset::east(8 * 60 * 60);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":383225,"byte_end":383270,"line_start":325,"line_end":325,"column_start":5,"column_end":50}},{"value":"/ let dt = pst.ymd(2018, 1, 26).and_hms_micro(10, 30, 9, 453_829);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":383275,"byte_end":383343,"line_start":326,"line_end":326,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":383348,"byte_end":383409,"line_start":327,"line_end":327,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T10:30:09+08:00\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":383414,"byte_end":383458,"line_start":328,"line_end":328,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":383463,"byte_end":383470,"line_start":329,"line_end":329,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":385216,"byte_end":385233,"line_start":382,"line_end":382,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<DateTime<Tz>>::format_with_items","value":"fn <'a, I> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":385115,"byte_end":385190,"line_start":380,"line_end":380,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":385195,"byte_end":385204,"line_start":381,"line_end":381,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":385699,"byte_end":385705,"line_start":392,"line_end":392,"column_start":12,"column_end":18},"name":"format","qualname":"<DateTime<Tz>>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":385484,"byte_end":385556,"line_start":388,"line_end":388,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":385561,"byte_end":385630,"line_start":389,"line_end":389,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":385635,"byte_end":385673,"line_start":390,"line_end":390,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":385678,"byte_end":385687,"line_start":391,"line_end":391,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":986},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"format","qualname":"::format","value":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","parent":null,"children":[{"krate":0,"index":987},{"krate":0,"index":988},{"krate":0,"index":989},{"krate":0,"index":990},{"krate":0,"index":995},{"krate":0,"index":998},{"krate":0,"index":1001},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006},{"krate":0,"index":1559},{"krate":0,"index":1566},{"krate":0,"index":1563},{"krate":0,"index":1564},{"krate":0,"index":1560},{"krate":0,"index":1561},{"krate":0,"index":1568},{"krate":0,"index":1585},{"krate":0,"index":1583},{"krate":0,"index":1580},{"krate":0,"index":1581},{"krate":0,"index":1577},{"krate":0,"index":1578},{"krate":0,"index":1575},{"krate":0,"index":1586},{"krate":0,"index":1639},{"krate":0,"index":1635},{"krate":0,"index":1636},{"krate":0,"index":1632},{"krate":0,"index":1633},{"krate":0,"index":1630},{"krate":0,"index":1007},{"krate":0,"index":1009},{"krate":0,"index":1011},{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1641},{"krate":0,"index":1688},{"krate":0,"index":1684},{"krate":0,"index":1685},{"krate":0,"index":1681},{"krate":0,"index":1682},{"krate":0,"index":1679},{"krate":0,"index":1690},{"krate":0,"index":1701},{"krate":0,"index":1699},{"krate":0,"index":1695},{"krate":0,"index":1696},{"krate":0,"index":1692},{"krate":0,"index":1693},{"krate":0,"index":1703},{"krate":0,"index":1720},{"krate":0,"index":1718},{"krate":0,"index":1715},{"krate":0,"index":1716},{"krate":0,"index":1712},{"krate":0,"index":1713},{"krate":0,"index":1722},{"krate":0,"index":1759},{"krate":0,"index":1753},{"krate":0,"index":1755},{"krate":0,"index":1748},{"krate":0,"index":1750},{"krate":0,"index":1745},{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1019},{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1022},{"krate":0,"index":1762},{"krate":0,"index":1775},{"krate":0,"index":1773},{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1766},{"krate":0,"index":1767},{"krate":0,"index":1765},{"krate":0,"index":1777},{"krate":0,"index":1801},{"krate":0,"index":1799},{"krate":0,"index":1796},{"krate":0,"index":1797},{"krate":0,"index":1793},{"krate":0,"index":1794},{"krate":0,"index":1792},{"krate":0,"index":1023},{"krate":0,"index":1025},{"krate":0,"index":1027},{"krate":0,"index":1029},{"krate":0,"index":1030},{"krate":0,"index":1031},{"krate":0,"index":1032},{"krate":0,"index":1033},{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1089},{"krate":0,"index":1158},{"krate":0,"index":1202},{"krate":0,"index":1233},{"krate":0,"index":1855},{"krate":0,"index":1861},{"krate":0,"index":1257},{"krate":0,"index":1263},{"krate":0,"index":1267}],"decl_id":null,"docs":" Formatting (and parsing) utilities for date and time.","sig":null,"attributes":[{"value":"! Formatting (and parsing) utilities for date and time.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":434061,"byte_end":434118,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":434119,"byte_end":434122,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! This module provides the common types and routines to implement,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":434123,"byte_end":434191,"line_start":6,"line_end":6,"column_start":1,"column_end":69}},{"value":"! for example, [`DateTime::format`](../struct.DateTime.html#method.format) or","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":434192,"byte_end":434271,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"! [`DateTime::parse_from_str`](../struct.DateTime.html#method.parse_from_str) methods.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":434272,"byte_end":434360,"line_start":8,"line_end":8,"column_start":1,"column_end":89}},{"value":"! For most cases you should use these high-level interfaces.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":434361,"byte_end":434423,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":434424,"byte_end":434427,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! Internally the formatting and parsing shares the same abstract **formatting items**,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":434428,"byte_end":434516,"line_start":11,"line_end":11,"column_start":1,"column_end":89}},{"value":"! which are just an [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":434517,"byte_end":434610,"line_start":12,"line_end":12,"column_start":1,"column_end":94}},{"value":"! the [`Item`](./enum.Item.html) type.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":434611,"byte_end":434651,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"! They are generated from more readable **format strings**;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":434652,"byte_end":434713,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"! currently Chrono supports [one built-in syntax closely resembling","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":434714,"byte_end":434783,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"! C's `strftime` format](./strftime/index.html).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":434784,"byte_end":434834,"line_start":16,"line_end":16,"column_start":1,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1569},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":435403,"byte_end":435407,"line_start":39,"line_end":39,"column_start":5,"column_end":9},"name":"None","qualname":"::format::Pad::None","value":"Pad::None","parent":{"krate":0,"index":1568},"children":[],"decl_id":null,"docs":" No padding.\n","sig":null,"attributes":[{"value":"/ No padding.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":435383,"byte_end":435398,"line_start":38,"line_end":38,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1571},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":435441,"byte_end":435445,"line_start":41,"line_end":41,"column_start":5,"column_end":9},"name":"Zero","qualname":"::format::Pad::Zero","value":"Pad::Zero","parent":{"krate":0,"index":1568},"children":[],"decl_id":null,"docs":" Zero (`0`) padding.\n","sig":null,"attributes":[{"value":"/ Zero (`0`) padding.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":435413,"byte_end":435436,"line_start":40,"line_end":40,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1573},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":435474,"byte_end":435479,"line_start":43,"line_end":43,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Pad::Space","value":"Pad::Space","parent":{"krate":0,"index":1568},"children":[],"decl_id":null,"docs":" Space padding.\n","sig":null,"attributes":[{"value":"/ Space padding.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":435451,"byte_end":435469,"line_start":42,"line_end":42,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":1568},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":435373,"byte_end":435376,"line_start":37,"line_end":37,"column_start":10,"column_end":13},"name":"Pad","qualname":"::format::Pad","value":"Pad::{None, Zero, Space}","parent":null,"children":[{"krate":0,"index":1569},{"krate":0,"index":1571},{"krate":0,"index":1573}],"decl_id":null,"docs":" Padding characters for numeric items.\n","sig":null,"attributes":[{"value":"/ Padding characters for numeric items.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":435277,"byte_end":435318,"line_start":35,"line_end":35,"column_start":1,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1587},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":436376,"byte_end":436380,"line_start":63,"line_end":63,"column_start":5,"column_end":9},"name":"Year","qualname":"::format::Numeric::Year","value":"Numeric::Year","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Full Gregorian year (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Full Gregorian year (FW=4, PW=∞).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":436253,"byte_end":436292,"line_start":61,"line_end":61,"column_start":5,"column_end":42}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":436297,"byte_end":436371,"line_start":62,"line_end":62,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1589},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":436482,"byte_end":436492,"line_start":65,"line_end":65,"column_start":5,"column_end":15},"name":"YearDiv100","qualname":"::format::Numeric::YearDiv100","value":"Numeric::YearDiv100","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":436386,"byte_end":436477,"line_start":64,"line_end":64,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1591},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":436563,"byte_end":436573,"line_start":67,"line_end":67,"column_start":5,"column_end":15},"name":"YearMod100","qualname":"::format::Numeric::YearMod100","value":"Numeric::YearMod100","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Gregorian year modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Gregorian year modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":436498,"byte_end":436558,"line_start":66,"line_end":66,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1593},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":436708,"byte_end":436715,"line_start":70,"line_end":70,"column_start":5,"column_end":12},"name":"IsoYear","qualname":"::format::Numeric::IsoYear","value":"Numeric::IsoYear","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Year in the ISO week date (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date (FW=4, PW=∞).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":436579,"byte_end":436624,"line_start":68,"line_end":68,"column_start":5,"column_end":48}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":436629,"byte_end":436703,"line_start":69,"line_end":69,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1595},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":436813,"byte_end":436826,"line_start":72,"line_end":72,"column_start":5,"column_end":18},"name":"IsoYearDiv100","qualname":"::format::Numeric::IsoYearDiv100","value":"Numeric::IsoYearDiv100","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":436721,"byte_end":436808,"line_start":71,"line_end":71,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1597},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":436909,"byte_end":436922,"line_start":74,"line_end":74,"column_start":5,"column_end":18},"name":"IsoYearMod100","qualname":"::format::Numeric::IsoYearMod100","value":"Numeric::IsoYearMod100","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":436832,"byte_end":436904,"line_start":73,"line_end":73,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1599},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":436953,"byte_end":436958,"line_start":76,"line_end":76,"column_start":5,"column_end":10},"name":"Month","qualname":"::format::Numeric::Month","value":"Numeric::Month","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Month (FW=PW=2).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":436928,"byte_end":436948,"line_start":75,"line_end":75,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1601},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437000,"byte_end":437003,"line_start":78,"line_end":78,"column_start":5,"column_end":8},"name":"Day","qualname":"::format::Numeric::Day","value":"Numeric::Day","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Day of the month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Day of the month (FW=PW=2).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":436964,"byte_end":436995,"line_start":77,"line_end":77,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1603},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437096,"byte_end":437107,"line_start":80,"line_end":80,"column_start":5,"column_end":16},"name":"WeekFromSun","qualname":"::format::Numeric::WeekFromSun","value":"Numeric::WeekFromSun","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437009,"byte_end":437091,"line_start":79,"line_end":79,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1605},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437200,"byte_end":437211,"line_start":82,"line_end":82,"column_start":5,"column_end":16},"name":"WeekFromMon","qualname":"::format::Numeric::WeekFromMon","value":"Numeric::WeekFromMon","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January (FW=PW=2).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437113,"byte_end":437195,"line_start":81,"line_end":81,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1607},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437269,"byte_end":437276,"line_start":84,"line_end":84,"column_start":5,"column_end":12},"name":"IsoWeek","qualname":"::format::Numeric::IsoWeek","value":"Numeric::IsoWeek","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Week number in the ISO week date (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number in the ISO week date (FW=PW=2).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437217,"byte_end":437264,"line_start":83,"line_end":83,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1609},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437352,"byte_end":437366,"line_start":86,"line_end":86,"column_start":5,"column_end":19},"name":"NumDaysFromSun","qualname":"::format::Numeric::NumDaysFromSun","value":"Numeric::NumDaysFromSun","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437282,"byte_end":437347,"line_start":85,"line_end":85,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1611},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437440,"byte_end":437454,"line_start":88,"line_end":88,"column_start":5,"column_end":19},"name":"WeekdayFromMon","qualname":"::format::Numeric::WeekdayFromMon","value":"Numeric::WeekdayFromMon","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437372,"byte_end":437435,"line_start":87,"line_end":87,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1613},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437495,"byte_end":437502,"line_start":90,"line_end":90,"column_start":5,"column_end":12},"name":"Ordinal","qualname":"::format::Numeric::Ordinal","value":"Numeric::Ordinal","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Day of the year (FW=PW=3).\n","sig":null,"attributes":[{"value":"/ Day of the year (FW=PW=3).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437460,"byte_end":437490,"line_start":89,"line_end":89,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1615},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437561,"byte_end":437565,"line_start":92,"line_end":92,"column_start":5,"column_end":9},"name":"Hour","qualname":"::format::Numeric::Hour","value":"Numeric::Hour","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Hour number in the 24-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 24-hour clocks (FW=PW=2).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437508,"byte_end":437556,"line_start":91,"line_end":91,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1617},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437624,"byte_end":437630,"line_start":94,"line_end":94,"column_start":5,"column_end":11},"name":"Hour12","qualname":"::format::Numeric::Hour12","value":"Numeric::Hour12","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Hour number in the 12-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 12-hour clocks (FW=PW=2).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437571,"byte_end":437619,"line_start":93,"line_end":93,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1619},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437703,"byte_end":437709,"line_start":96,"line_end":96,"column_start":5,"column_end":11},"name":"Minute","qualname":"::format::Numeric::Minute","value":"Numeric::Minute","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" The number of minutes since the last whole hour (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of minutes since the last whole hour (FW=PW=2).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437636,"byte_end":437698,"line_start":95,"line_end":95,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1621},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437784,"byte_end":437790,"line_start":98,"line_end":98,"column_start":5,"column_end":11},"name":"Second","qualname":"::format::Numeric::Second","value":"Numeric::Second","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" The number of seconds since the last whole minute (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of seconds since the last whole minute (FW=PW=2).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437715,"byte_end":437779,"line_start":97,"line_end":97,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1623},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437993,"byte_end":438003,"line_start":102,"line_end":102,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Numeric::Nanosecond","value":"Numeric::Nanosecond","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the last whole second (FW=PW=9).\n Note that this is *not* left-aligned;\n see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the last whole second (FW=PW=9).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437796,"byte_end":437864,"line_start":99,"line_end":99,"column_start":5,"column_end":73}},{"value":"/ Note that this is *not* left-aligned;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437869,"byte_end":437910,"line_start":100,"line_end":100,"column_start":5,"column_end":46}},{"value":"/ see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":437915,"byte_end":437988,"line_start":101,"line_end":101,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1625},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":438183,"byte_end":438192,"line_start":105,"line_end":105,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::format::Numeric::Timestamp","value":"Numeric::Timestamp","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\n For formatting, it assumes UTC upon the absence of time zone offset.\n","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":438009,"byte_end":438101,"line_start":103,"line_end":103,"column_start":5,"column_end":95}},{"value":"/ For formatting, it assumes UTC upon the absence of time zone offset.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":438106,"byte_end":438178,"line_start":104,"line_end":104,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1627},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":438411,"byte_end":438419,"line_start":111,"line_end":111,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Numeric::Internal","value":"Numeric::Internal(InternalNumeric)","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":438199,"byte_end":438222,"line_start":107,"line_end":107,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":438227,"byte_end":438230,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":438235,"byte_end":438311,"line_start":109,"line_end":109,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":438316,"byte_end":438406,"line_start":110,"line_end":110,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":1586},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":436239,"byte_end":436246,"line_start":60,"line_end":60,"column_start":10,"column_end":17},"name":"Numeric","qualname":"::format::Numeric","value":"Numeric::{Year, YearDiv100, YearMod100, IsoYear, IsoYearDiv100, IsoYearMod100, Month, Day, WeekFromSun, WeekFromMon, IsoWeek, NumDaysFromSun, WeekdayFromMon, Ordinal, Hour, Hour12, Minute, Second, Nanosecond, Timestamp, Internal}","parent":null,"children":[{"krate":0,"index":1587},{"krate":0,"index":1589},{"krate":0,"index":1591},{"krate":0,"index":1593},{"krate":0,"index":1595},{"krate":0,"index":1597},{"krate":0,"index":1599},{"krate":0,"index":1601},{"krate":0,"index":1603},{"krate":0,"index":1605},{"krate":0,"index":1607},{"krate":0,"index":1609},{"krate":0,"index":1611},{"krate":0,"index":1613},{"krate":0,"index":1615},{"krate":0,"index":1617},{"krate":0,"index":1619},{"krate":0,"index":1621},{"krate":0,"index":1623},{"krate":0,"index":1625},{"krate":0,"index":1627}],"decl_id":null,"docs":" Numeric item types.\n They have associated formatting width (FW) and parsing width (PW).","sig":null,"attributes":[{"value":"/ Numeric item types.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":435484,"byte_end":435507,"line_start":46,"line_end":46,"column_start":1,"column_end":24}},{"value":"/ They have associated formatting width (FW) and parsing width (PW).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":435508,"byte_end":435578,"line_start":47,"line_end":47,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":435579,"byte_end":435582,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ The **formatting width** is the minimal width to be formatted.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":435583,"byte_end":435649,"line_start":49,"line_end":49,"column_start":1,"column_end":67}},{"value":"/ If the number is too short, and the padding is not [`Pad::None`](./enum.Pad.html#variant.None),","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":435650,"byte_end":435749,"line_start":50,"line_end":50,"column_start":1,"column_end":100}},{"value":"/ then it is left-padded.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":435750,"byte_end":435777,"line_start":51,"line_end":51,"column_start":1,"column_end":28}},{"value":"/ If the number is too long or (in some cases) negative, it is printed as is.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":435778,"byte_end":435857,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":435858,"byte_end":435861,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ The **parsing width** is the maximal width to be scanned.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":435862,"byte_end":435923,"line_start":54,"line_end":54,"column_start":1,"column_end":62}},{"value":"/ The parser only tries to consume from one to given number of digits (greedily).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":435924,"byte_end":436007,"line_start":55,"line_end":55,"column_start":1,"column_end":84}},{"value":"/ It also trims the preceding whitespaces if any.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":436008,"byte_end":436059,"line_start":56,"line_end":56,"column_start":1,"column_end":52}},{"value":"/ It cannot parse the negative number, so some date and time cannot be formatted then","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":436060,"byte_end":436147,"line_start":57,"line_end":57,"column_start":1,"column_end":88}},{"value":"/ parsed with the same formatting items.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":436148,"byte_end":436190,"line_start":58,"line_end":58,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1007},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":438527,"byte_end":438542,"line_start":115,"line_end":115,"column_start":12,"column_end":27},"name":"InternalNumeric","qualname":"::format::InternalNumeric","value":"InternalNumeric {  }","parent":null,"children":[{"krate":0,"index":1008}],"decl_id":null,"docs":" An opaque type representing numeric item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing numeric item types for internal uses only.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":438441,"byte_end":438515,"line_start":114,"line_end":114,"column_start":1,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1642},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439341,"byte_end":439355,"line_start":149,"line_end":149,"column_start":5,"column_end":19},"name":"ShortMonthName","qualname":"::format::Fixed::ShortMonthName","value":"Fixed::ShortMonthName","parent":{"krate":0,"index":1641},"children":[],"decl_id":null,"docs":" Abbreviated month names.","sig":null,"attributes":[{"value":"/ Abbreviated month names.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439208,"byte_end":439236,"line_start":146,"line_end":146,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439241,"byte_end":439244,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439249,"byte_end":439336,"line_start":148,"line_end":148,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1644},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439488,"byte_end":439501,"line_start":153,"line_end":153,"column_start":5,"column_end":18},"name":"LongMonthName","qualname":"::format::Fixed::LongMonthName","value":"Fixed::LongMonthName","parent":{"krate":0,"index":1641},"children":[],"decl_id":null,"docs":" Full month names.","sig":null,"attributes":[{"value":"/ Full month names.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439361,"byte_end":439382,"line_start":150,"line_end":150,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439387,"byte_end":439390,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439395,"byte_end":439483,"line_start":152,"line_end":152,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1646},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439650,"byte_end":439666,"line_start":157,"line_end":157,"column_start":5,"column_end":21},"name":"ShortWeekdayName","qualname":"::format::Fixed::ShortWeekdayName","value":"Fixed::ShortWeekdayName","parent":{"krate":0,"index":1641},"children":[],"decl_id":null,"docs":" Abbreviated day of the week names.","sig":null,"attributes":[{"value":"/ Abbreviated day of the week names.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439507,"byte_end":439545,"line_start":154,"line_end":154,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439550,"byte_end":439553,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439558,"byte_end":439645,"line_start":156,"line_end":156,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1648},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439809,"byte_end":439824,"line_start":161,"line_end":161,"column_start":5,"column_end":20},"name":"LongWeekdayName","qualname":"::format::Fixed::LongWeekdayName","value":"Fixed::LongWeekdayName","parent":{"krate":0,"index":1641},"children":[],"decl_id":null,"docs":" Full day of the week names.","sig":null,"attributes":[{"value":"/ Full day of the week names.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439672,"byte_end":439703,"line_start":158,"line_end":158,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439708,"byte_end":439711,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439716,"byte_end":439804,"line_start":160,"line_end":160,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1650},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439902,"byte_end":439911,"line_start":165,"line_end":165,"column_start":5,"column_end":14},"name":"LowerAmPm","qualname":"::format::Fixed::LowerAmPm","value":"Fixed::LowerAmPm","parent":{"krate":0,"index":1641},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439830,"byte_end":439840,"line_start":162,"line_end":162,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439845,"byte_end":439848,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ Prints in lower case, reads in any case.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439853,"byte_end":439897,"line_start":164,"line_end":164,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1652},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439989,"byte_end":439998,"line_start":169,"line_end":169,"column_start":5,"column_end":14},"name":"UpperAmPm","qualname":"::format::Fixed::UpperAmPm","value":"Fixed::UpperAmPm","parent":{"krate":0,"index":1641},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439917,"byte_end":439927,"line_start":166,"line_end":166,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439932,"byte_end":439935,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ Prints in upper case, reads in any case.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439940,"byte_end":439984,"line_start":168,"line_end":168,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1654},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":440245,"byte_end":440255,"line_start":173,"line_end":173,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Fixed::Nanosecond","value":"Fixed::Nanosecond","parent":{"krate":0,"index":1641},"children":[],"decl_id":null,"docs":" An optional dot plus one or more digits for left-aligned nanoseconds.\n May print nothing, 3, 6 or 9 digits according to the available accuracy.\n See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ An optional dot plus one or more digits for left-aligned nanoseconds.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":440004,"byte_end":440077,"line_start":170,"line_end":170,"column_start":5,"column_end":78}},{"value":"/ May print nothing, 3, 6 or 9 digits according to the available accuracy.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":440082,"byte_end":440158,"line_start":171,"line_end":171,"column_start":5,"column_end":81}},{"value":"/ See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":440163,"byte_end":440240,"line_start":172,"line_end":172,"column_start":5,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1656},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":440345,"byte_end":440356,"line_start":175,"line_end":175,"column_start":5,"column_end":16},"name":"Nanosecond3","qualname":"::format::Fixed::Nanosecond3","value":"Fixed::Nanosecond3","parent":{"krate":0,"index":1641},"children":[],"decl_id":null,"docs":" Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.\n","sig":null,"attributes":[{"value":"/ Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":440261,"byte_end":440340,"line_start":174,"line_end":174,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1658},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":440446,"byte_end":440457,"line_start":177,"line_end":177,"column_start":5,"column_end":16},"name":"Nanosecond6","qualname":"::format::Fixed::Nanosecond6","value":"Fixed::Nanosecond6","parent":{"krate":0,"index":1641},"children":[],"decl_id":null,"docs":" Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.\n","sig":null,"attributes":[{"value":"/ Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":440362,"byte_end":440441,"line_start":176,"line_end":176,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1660},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":440547,"byte_end":440558,"line_start":179,"line_end":179,"column_start":5,"column_end":16},"name":"Nanosecond9","qualname":"::format::Fixed::Nanosecond9","value":"Fixed::Nanosecond9","parent":{"krate":0,"index":1641},"children":[],"decl_id":null,"docs":" Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.\n","sig":null,"attributes":[{"value":"/ Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":440463,"byte_end":440542,"line_start":178,"line_end":178,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1662},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":440679,"byte_end":440691,"line_start":183,"line_end":183,"column_start":5,"column_end":17},"name":"TimezoneName","qualname":"::format::Fixed::TimezoneName","value":"Fixed::TimezoneName","parent":{"krate":0,"index":1641},"children":[],"decl_id":null,"docs":" Timezone name.","sig":null,"attributes":[{"value":"/ Timezone name.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":440564,"byte_end":440582,"line_start":180,"line_end":180,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":440587,"byte_end":440590,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ It does not support parsing, its use in the parser is an immediate failure.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":440595,"byte_end":440674,"line_start":182,"line_end":182,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1664},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":441023,"byte_end":441042,"line_start":189,"line_end":189,"column_start":5,"column_end":24},"name":"TimezoneOffsetColon","qualname":"::format::Fixed::TimezoneOffsetColon","value":"Fixed::TimezoneOffsetColon","parent":{"krate":0,"index":1641},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":440697,"byte_end":440770,"line_start":184,"line_end":184,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":440775,"byte_end":440778,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespaces.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":440783,"byte_end":440876,"line_start":186,"line_end":186,"column_start":5,"column_end":98}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":440881,"byte_end":440933,"line_start":187,"line_end":187,"column_start":5,"column_end":57}},{"value":"/ which is same to [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":440938,"byte_end":441018,"line_start":188,"line_end":188,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1666},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":441431,"byte_end":441451,"line_start":196,"line_end":196,"column_start":5,"column_end":25},"name":"TimezoneOffsetColonZ","qualname":"::format::Fixed::TimezoneOffsetColonZ","value":"Fixed::TimezoneOffsetColonZ","parent":{"krate":0,"index":1641},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":441048,"byte_end":441116,"line_start":190,"line_end":190,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":441121,"byte_end":441124,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespaces,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":441129,"byte_end":441222,"line_start":192,"line_end":192,"column_start":5,"column_end":98}},{"value":"/ and `Z` can be either in upper case or in lower case.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":441227,"byte_end":441284,"line_start":193,"line_end":193,"column_start":5,"column_end":62}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":441289,"byte_end":441341,"line_start":194,"line_end":194,"column_start":5,"column_end":57}},{"value":"/ which is same to [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":441346,"byte_end":441426,"line_start":195,"line_end":195,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1668},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":441590,"byte_end":441604,"line_start":199,"line_end":199,"column_start":5,"column_end":19},"name":"TimezoneOffset","qualname":"::format::Fixed::TimezoneOffset","value":"Fixed::TimezoneOffset","parent":{"krate":0,"index":1641},"children":[],"decl_id":null,"docs":" Same to [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same to [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":441457,"byte_end":441543,"line_start":197,"line_end":197,"column_start":5,"column_end":91}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":441548,"byte_end":441585,"line_start":198,"line_end":198,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1670},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":441745,"byte_end":441760,"line_start":202,"line_end":202,"column_start":5,"column_end":20},"name":"TimezoneOffsetZ","qualname":"::format::Fixed::TimezoneOffsetZ","value":"Fixed::TimezoneOffsetZ","parent":{"krate":0,"index":1641},"children":[],"decl_id":null,"docs":" Same to [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same to [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":441610,"byte_end":441698,"line_start":200,"line_end":200,"column_start":5,"column_end":93}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":441703,"byte_end":441740,"line_start":201,"line_end":201,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1672},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":441853,"byte_end":441860,"line_start":204,"line_end":204,"column_start":5,"column_end":12},"name":"RFC2822","qualname":"::format::Fixed::RFC2822","value":"Fixed::RFC2822","parent":{"krate":0,"index":1641},"children":[],"decl_id":null,"docs":" RFC 2822 date and time syntax. Commonly used for email and MIME date and time.\n","sig":null,"attributes":[{"value":"/ RFC 2822 date and time syntax. Commonly used for email and MIME date and time.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":441766,"byte_end":441848,"line_start":203,"line_end":203,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1674},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":441916,"byte_end":441923,"line_start":206,"line_end":206,"column_start":5,"column_end":12},"name":"RFC3339","qualname":"::format::Fixed::RFC3339","value":"Fixed::RFC3339","parent":{"krate":0,"index":1641},"children":[],"decl_id":null,"docs":" RFC 3339 & ISO 8601 date and time syntax.\n","sig":null,"attributes":[{"value":"/ RFC 3339 & ISO 8601 date and time syntax.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":441866,"byte_end":441911,"line_start":205,"line_end":205,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1676},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":442142,"byte_end":442150,"line_start":212,"line_end":212,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Fixed::Internal","value":"Fixed::Internal(InternalFixed)","parent":{"krate":0,"index":1641},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":441930,"byte_end":441953,"line_start":208,"line_end":208,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":441958,"byte_end":441961,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":441966,"byte_end":442042,"line_start":210,"line_end":210,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":442047,"byte_end":442137,"line_start":211,"line_end":211,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":1641},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439196,"byte_end":439201,"line_start":145,"line_end":145,"column_start":10,"column_end":15},"name":"Fixed","qualname":"::format::Fixed","value":"Fixed::{ShortMonthName, LongMonthName, ShortWeekdayName, LongWeekdayName, LowerAmPm, UpperAmPm, Nanosecond, Nanosecond3, Nanosecond6, Nanosecond9, TimezoneName, TimezoneOffsetColon, TimezoneOffsetColonZ, TimezoneOffset, TimezoneOffsetZ, RFC2822, RFC3339, Internal}","parent":null,"children":[{"krate":0,"index":1642},{"krate":0,"index":1644},{"krate":0,"index":1646},{"krate":0,"index":1648},{"krate":0,"index":1650},{"krate":0,"index":1652},{"krate":0,"index":1654},{"krate":0,"index":1656},{"krate":0,"index":1658},{"krate":0,"index":1660},{"krate":0,"index":1662},{"krate":0,"index":1664},{"krate":0,"index":1666},{"krate":0,"index":1668},{"krate":0,"index":1670},{"krate":0,"index":1672},{"krate":0,"index":1674},{"krate":0,"index":1676}],"decl_id":null,"docs":" Fixed-format item types.","sig":null,"attributes":[{"value":"/ Fixed-format item types.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":438973,"byte_end":439001,"line_start":140,"line_end":140,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439002,"byte_end":439005,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ They have their own rules of formatting and parsing.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439006,"byte_end":439062,"line_start":142,"line_end":142,"column_start":1,"column_end":57}},{"value":"/ Otherwise noted, they print in the specified cases but parse case-insensitively.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":439063,"byte_end":439147,"line_start":143,"line_end":143,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":1690},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":442300,"byte_end":442313,"line_start":217,"line_end":217,"column_start":12,"column_end":25},"name":"InternalFixed","qualname":"::format::InternalFixed","value":"InternalFixed {  }","parent":null,"children":[{"krate":0,"index":1691}],"decl_id":null,"docs":" An opaque type representing fixed-format item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing fixed-format item types for internal uses only.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":442170,"byte_end":442249,"line_start":215,"line_end":215,"column_start":1,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1724},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":443329,"byte_end":443336,"line_start":244,"line_end":244,"column_start":5,"column_end":12},"name":"Literal","qualname":"::format::Item::Literal","value":"Item::Literal(&'a str)","parent":{"krate":0,"index":1722},"children":[],"decl_id":null,"docs":" A literally printed and parsed text.\n","sig":null,"attributes":[{"value":"/ A literally printed and parsed text.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":443284,"byte_end":443324,"line_start":243,"line_end":243,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1727},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":443416,"byte_end":443428,"line_start":246,"line_end":246,"column_start":5,"column_end":17},"name":"OwnedLiteral","qualname":"::format::Item::OwnedLiteral","value":"Item::OwnedLiteral(Box<str>)","parent":{"krate":0,"index":1722},"children":[],"decl_id":null,"docs":" Same to `Literal` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same to `Literal` but with the string owned by the item.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":443351,"byte_end":443411,"line_start":245,"line_end":245,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1730},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":443516,"byte_end":443521,"line_start":248,"line_end":248,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Item::Space","value":"Item::Space(&'a str)","parent":{"krate":0,"index":1722},"children":[],"decl_id":null,"docs":" Whitespace. Prints literally but reads zero or more whitespace.\n","sig":null,"attributes":[{"value":"/ Whitespace. Prints literally but reads zero or more whitespace.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":443444,"byte_end":443511,"line_start":247,"line_end":247,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1733},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":443599,"byte_end":443609,"line_start":250,"line_end":250,"column_start":5,"column_end":15},"name":"OwnedSpace","qualname":"::format::Item::OwnedSpace","value":"Item::OwnedSpace(Box<str>)","parent":{"krate":0,"index":1722},"children":[],"decl_id":null,"docs":" Same to `Space` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same to `Space` but with the string owned by the item.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":443536,"byte_end":443594,"line_start":249,"line_end":249,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1736},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":443788,"byte_end":443795,"line_start":253,"line_end":253,"column_start":5,"column_end":12},"name":"Numeric","qualname":"::format::Item::Numeric","value":"Item::Numeric(Numeric, Pad)","parent":{"krate":0,"index":1722},"children":[],"decl_id":null,"docs":" Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\n the parser simply ignores any padded whitespace and zeroes.\n","sig":null,"attributes":[{"value":"/ Numeric item. Can be optionally padded to the maximal length (if any) when formatting;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":443625,"byte_end":443715,"line_start":251,"line_end":251,"column_start":5,"column_end":95}},{"value":"/ the parser simply ignores any padded whitespace and zeroes.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":443720,"byte_end":443783,"line_start":252,"line_end":252,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1740},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":443842,"byte_end":443847,"line_start":255,"line_end":255,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::format::Item::Fixed","value":"Item::Fixed(Fixed)","parent":{"krate":0,"index":1722},"children":[],"decl_id":null,"docs":" Fixed-format item.\n","sig":null,"attributes":[{"value":"/ Fixed-format item.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":443815,"byte_end":443837,"line_start":254,"line_end":254,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1743},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":443936,"byte_end":443941,"line_start":257,"line_end":257,"column_start":5,"column_end":10},"name":"Error","qualname":"::format::Item::Error","value":"Item::Error","parent":{"krate":0,"index":1722},"children":[],"decl_id":null,"docs":" Issues a formatting error. Used to signal an invalid format string.\n","sig":null,"attributes":[{"value":"/ Issues a formatting error. Used to signal an invalid format string.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":443860,"byte_end":443931,"line_start":256,"line_end":256,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":1722},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":443269,"byte_end":443273,"line_start":242,"line_end":242,"column_start":10,"column_end":14},"name":"Item","qualname":"::format::Item","value":"Item::{Literal, OwnedLiteral, Space, OwnedSpace, Numeric, Fixed, Error}","parent":null,"children":[{"krate":0,"index":1724},{"krate":0,"index":1727},{"krate":0,"index":1730},{"krate":0,"index":1733},{"krate":0,"index":1736},{"krate":0,"index":1740},{"krate":0,"index":1743}],"decl_id":null,"docs":" A single formatting item. This is used for both formatting and parsing.\n","sig":null,"attributes":[{"value":"/ A single formatting item. This is used for both formatting and parsing.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":443145,"byte_end":443220,"line_start":240,"line_end":240,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":1762},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":444560,"byte_end":444570,"line_start":270,"line_end":270,"column_start":12,"column_end":22},"name":"ParseError","qualname":"::format::ParseError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error from the `parse` function.\n","sig":null,"attributes":[{"value":"/ An error from the `parse` function.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":444464,"byte_end":444503,"line_start":268,"line_end":268,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":1023},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":445806,"byte_end":445817,"line_start":304,"line_end":304,"column_start":10,"column_end":21},"name":"ParseResult","qualname":"::format::ParseResult","value":"Result<T, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Same to `Result<T, ParseError>`.\n","sig":null,"attributes":[{"value":"/ Same to `Result<T, ParseError>`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":445760,"byte_end":445796,"line_start":303,"line_end":303,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":1036},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":447266,"byte_end":447272,"line_start":337,"line_end":337,"column_start":8,"column_end":14},"name":"format","qualname":"::format::format","value":"fn <'a, I> (w: &mut fmt::Formatter, date: Option<&NaiveDate>, time: Option<&NaiveTime>, off: Option<&(String, FixedOffset)>, items: I) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Tries to format given arguments with given formatting items.\n Internally used by `DelayedFormat`.\n","sig":null,"attributes":[{"value":"/ Tries to format given arguments with given formatting items.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":447154,"byte_end":447218,"line_start":335,"line_end":335,"column_start":1,"column_end":65}},{"value":"/ Internally used by `DelayedFormat`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":447219,"byte_end":447258,"line_start":336,"line_end":336,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":1803},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":462366,"byte_end":462372,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"name":"Parsed","qualname":"::format::parsed::Parsed","value":"Parsed { year, year_div_100, year_mod_100, isoyear, isoyear_div_100, isoyear_mod_100, month, week_from_sun, week_from_mon, isoweek, weekday, ordinal, day, hour_div_12, hour_mod_12, minute, second, nanosecond, timestamp, offset }","parent":null,"children":[{"krate":0,"index":1804},{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1807},{"krate":0,"index":1808},{"krate":0,"index":1809},{"krate":0,"index":1810},{"krate":0,"index":1811},{"krate":0,"index":1812},{"krate":0,"index":1813},{"krate":0,"index":1814},{"krate":0,"index":1815},{"krate":0,"index":1816},{"krate":0,"index":1817},{"krate":0,"index":1818},{"krate":0,"index":1819},{"krate":0,"index":1820},{"krate":0,"index":1821},{"krate":0,"index":1822},{"krate":0,"index":1823},{"krate":0,"index":1824}],"decl_id":null,"docs":" Parsed parts of date and time. There are two classes of methods:","sig":null,"attributes":[{"value":"/ Parsed parts of date and time. There are two classes of methods:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":461848,"byte_end":461916,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":461917,"byte_end":461920,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ - `set_*` methods try to set given field(s) while checking for the consistency.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":461921,"byte_end":462004,"line_start":20,"line_end":20,"column_start":1,"column_end":84}},{"value":"/   It may or may not check for the range constraint immediately (for efficiency reasons).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":462005,"byte_end":462097,"line_start":21,"line_end":21,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":462098,"byte_end":462101,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - `to_*` methods try to make a concrete date and time value out of set fields.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":462102,"byte_end":462184,"line_start":23,"line_end":23,"column_start":1,"column_end":83}},{"value":"/   It fully checks any remaining out-of-range conditions and inconsistent/impossible fields.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":462185,"byte_end":462280,"line_start":24,"line_end":24,"column_start":1,"column_end":96}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":462281,"byte_end":462319,"line_start":25,"line_end":25,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1804},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":462549,"byte_end":462553,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"name":"year","qualname":"::format::parsed::Parsed::year","value":"std::option::Option<i32>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Year.","sig":null,"attributes":[{"value":"/ Year.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":462379,"byte_end":462388,"line_start":28,"line_end":28,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":462393,"byte_end":462396,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`year_div_100`](#structfield.year_div_100)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":462401,"byte_end":462476,"line_start":30,"line_end":30,"column_start":5,"column_end":80}},{"value":"/ and [`year_mod_100`](#structfield.year_mod_100) fields.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":462481,"byte_end":462540,"line_start":31,"line_end":31,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":1805},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":462857,"byte_end":462869,"line_start":39,"line_end":39,"column_start":9,"column_end":21},"name":"year_div_100","qualname":"::format::parsed::Parsed::year_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Year divided by 100. Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year divided by 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":462573,"byte_end":462641,"line_start":34,"line_end":34,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":462646,"byte_end":462649,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":462654,"byte_end":462711,"line_start":36,"line_end":36,"column_start":5,"column_end":62}},{"value":"/ [`year_mod_100`](#structfield.year_mod_100) is present,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":462716,"byte_end":462775,"line_start":37,"line_end":37,"column_start":5,"column_end":64}},{"value":"/ it is inferred to 19 when `year_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":462780,"byte_end":462848,"line_start":38,"line_end":38,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":1806},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":462962,"byte_end":462974,"line_start":42,"line_end":42,"column_start":9,"column_end":21},"name":"year_mod_100","qualname":"::format::parsed::Parsed::year_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Year modulo 100. Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year modulo 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":462889,"byte_end":462953,"line_start":41,"line_end":41,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":1807},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":463241,"byte_end":463248,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"isoyear","qualname":"::format::parsed::Parsed::isoyear","value":"std::option::Option<i32>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":462994,"byte_end":463068,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":463073,"byte_end":463076,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`isoyear_div_100`](#structfield.isoyear_div_100) and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":463081,"byte_end":463166,"line_start":46,"line_end":46,"column_start":5,"column_end":90}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) fields.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":463171,"byte_end":463232,"line_start":47,"line_end":47,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":1808},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":463635,"byte_end":463650,"line_start":56,"line_end":56,"column_start":9,"column_end":24},"name":"isoyear_div_100","qualname":"::format::parsed::Parsed::isoyear_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.\n Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":463268,"byte_end":463358,"line_start":50,"line_end":50,"column_start":5,"column_end":95}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":463363,"byte_end":463410,"line_start":51,"line_end":51,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":463415,"byte_end":463418,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":463423,"byte_end":463480,"line_start":53,"line_end":53,"column_start":5,"column_end":62}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) is present,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":463485,"byte_end":463550,"line_start":54,"line_end":54,"column_start":5,"column_end":70}},{"value":"/ it is inferred to 19 when `isoyear_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":463555,"byte_end":463626,"line_start":55,"line_end":55,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":1809},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":463817,"byte_end":463832,"line_start":60,"line_end":60,"column_start":9,"column_end":24},"name":"isoyear_mod_100","qualname":"::format::parsed::Parsed::isoyear_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.\n Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":463670,"byte_end":463756,"line_start":58,"line_end":58,"column_start":5,"column_end":91}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":463761,"byte_end":463808,"line_start":59,"line_end":59,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":1810},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":463879,"byte_end":463884,"line_start":63,"line_end":63,"column_start":9,"column_end":14},"name":"month","qualname":"::format::parsed::Parsed::month","value":"std::option::Option<u32>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Month (1--12).\n","sig":null,"attributes":[{"value":"/ Month (1--12).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":463852,"byte_end":463870,"line_start":62,"line_end":62,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1811},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464039,"byte_end":464052,"line_start":67,"line_end":67,"column_start":9,"column_end":22},"name":"week_from_sun","qualname":"::format::parsed::Parsed::week_from_sun","value":"std::option::Option<u32>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":463904,"byte_end":463975,"line_start":65,"line_end":65,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":463980,"byte_end":464030,"line_start":66,"line_end":66,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1812},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464207,"byte_end":464220,"line_start":71,"line_end":71,"column_start":9,"column_end":22},"name":"week_from_mon","qualname":"::format::parsed::Parsed::week_from_mon","value":"std::option::Option<u32>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464072,"byte_end":464143,"line_start":69,"line_end":69,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464148,"byte_end":464198,"line_start":70,"line_end":70,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1813},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464360,"byte_end":464367,"line_start":75,"line_end":75,"column_start":9,"column_end":16},"name":"isoweek","qualname":"::format::parsed::Parsed::isoweek","value":"std::option::Option<u32>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" [ISO week number](../naive/struct.NaiveDate.html#week-date)\n (1--52 or 1--53 depending on the year).\n","sig":null,"attributes":[{"value":"/ [ISO week number](../naive/struct.NaiveDate.html#week-date)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464240,"byte_end":464303,"line_start":73,"line_end":73,"column_start":5,"column_end":68}},{"value":"/ (1--52 or 1--53 depending on the year).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464308,"byte_end":464351,"line_start":74,"line_end":74,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":1814},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464416,"byte_end":464423,"line_start":78,"line_end":78,"column_start":9,"column_end":16},"name":"weekday","qualname":"::format::parsed::Parsed::weekday","value":"std::option::Option<Weekday>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Day of the week.\n","sig":null,"attributes":[{"value":"/ Day of the week.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464387,"byte_end":464407,"line_start":77,"line_end":77,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":1815},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464517,"byte_end":464524,"line_start":81,"line_end":81,"column_start":9,"column_end":16},"name":"ordinal","qualname":"::format::parsed::Parsed::ordinal","value":"std::option::Option<u32>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Day of the year (1--365 or 1--366 depending on the year).\n","sig":null,"attributes":[{"value":"/ Day of the year (1--365 or 1--366 depending on the year).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464447,"byte_end":464508,"line_start":80,"line_end":80,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":1816},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464628,"byte_end":464631,"line_start":84,"line_end":84,"column_start":9,"column_end":12},"name":"day","qualname":"::format::parsed::Parsed::day","value":"std::option::Option<u32>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).\n","sig":null,"attributes":[{"value":"/ Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464544,"byte_end":464619,"line_start":83,"line_end":83,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":1817},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464732,"byte_end":464743,"line_start":87,"line_end":87,"column_start":9,"column_end":20},"name":"hour_div_12","qualname":"::format::parsed::Parsed::hour_div_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.\n","sig":null,"attributes":[{"value":"/ Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464651,"byte_end":464723,"line_start":86,"line_end":86,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":1818},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464806,"byte_end":464817,"line_start":90,"line_end":90,"column_start":9,"column_end":20},"name":"hour_mod_12","qualname":"::format::parsed::Parsed::hour_mod_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Hour number modulo 12 (0--11).\n","sig":null,"attributes":[{"value":"/ Hour number modulo 12 (0--11).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464763,"byte_end":464797,"line_start":89,"line_end":89,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1819},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464872,"byte_end":464878,"line_start":93,"line_end":93,"column_start":9,"column_end":15},"name":"minute","qualname":"::format::parsed::Parsed::minute","value":"std::option::Option<u32>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Minute number (0--59).\n","sig":null,"attributes":[{"value":"/ Minute number (0--59).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464837,"byte_end":464863,"line_start":92,"line_end":92,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1820},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464962,"byte_end":464968,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"name":"second","qualname":"::format::parsed::Parsed::second","value":"std::option::Option<u32>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Second number (0--60, accounting for leap seconds).\n","sig":null,"attributes":[{"value":"/ Second number (0--60, accounting for leap seconds).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464898,"byte_end":464953,"line_start":95,"line_end":95,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":1821},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":465067,"byte_end":465077,"line_start":99,"line_end":99,"column_start":9,"column_end":19},"name":"nanosecond","qualname":"::format::parsed::Parsed::nanosecond","value":"std::option::Option<u32>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the whole second (0--999,999,999).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the whole second (0--999,999,999).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":464988,"byte_end":465058,"line_start":98,"line_end":98,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":1822},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":465280,"byte_end":465289,"line_start":104,"line_end":104,"column_start":9,"column_end":18},"name":"timestamp","qualname":"::format::parsed::Parsed::timestamp","value":"std::option::Option<i64>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970.","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":465097,"byte_end":465174,"line_start":101,"line_end":101,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":465179,"byte_end":465182,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ This can be off by one if [`second`](#structfield.second) is 60 (a leap second).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":465187,"byte_end":465271,"line_start":103,"line_end":103,"column_start":5,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":1823},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":465368,"byte_end":465374,"line_start":107,"line_end":107,"column_start":9,"column_end":15},"name":"offset","qualname":"::format::parsed::Parsed::offset","value":"std::option::Option<i32>","parent":{"krate":0,"index":1803},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC, in seconds.\n","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC, in seconds.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":465309,"byte_end":465359,"line_start":106,"line_end":106,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1117},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":466469,"byte_end":466472,"line_start":139,"line_end":139,"column_start":12,"column_end":15},"name":"new","qualname":"<Parsed>::new","value":"fn () -> Parsed","parent":null,"children":[],"decl_id":null,"docs":" Returns the initial value of parsed parts.\n","sig":null,"attributes":[{"value":"/ Returns the initial value of parsed parts.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":466411,"byte_end":466457,"line_start":138,"line_end":138,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":466608,"byte_end":466616,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"name":"set_year","qualname":"<Parsed>::set_year","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year`](#structfield.year) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year`](#structfield.year) field from given value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":466524,"byte_end":466596,"line_start":143,"line_end":143,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1119},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":466856,"byte_end":466872,"line_start":149,"line_end":149,"column_start":12,"column_end":28},"name":"set_year_div_100","qualname":"<Parsed>::set_year_div_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":466756,"byte_end":466844,"line_start":148,"line_end":148,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":467171,"byte_end":467187,"line_start":155,"line_end":155,"column_start":12,"column_end":28},"name":"set_year_mod_100","qualname":"<Parsed>::set_year_mod_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":467071,"byte_end":467159,"line_start":154,"line_end":154,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1121},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":467476,"byte_end":467487,"line_start":161,"line_end":161,"column_start":12,"column_end":23},"name":"set_isoyear","qualname":"<Parsed>::set_isoyear","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear`](#structfield.isoyear) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear`](#structfield.isoyear) field from given value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":467386,"byte_end":467464,"line_start":160,"line_end":160,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":467736,"byte_end":467755,"line_start":166,"line_end":166,"column_start":12,"column_end":31},"name":"set_isoyear_div_100","qualname":"<Parsed>::set_isoyear_div_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":467630,"byte_end":467724,"line_start":165,"line_end":165,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":468063,"byte_end":468082,"line_start":172,"line_end":172,"column_start":12,"column_end":31},"name":"set_isoyear_mod_100","qualname":"<Parsed>::set_isoyear_mod_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":467957,"byte_end":468051,"line_start":171,"line_end":171,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":468370,"byte_end":468379,"line_start":178,"line_end":178,"column_start":12,"column_end":21},"name":"set_month","qualname":"<Parsed>::set_month","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`month`](#structfield.month) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`month`](#structfield.month) field from given value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":468284,"byte_end":468358,"line_start":177,"line_end":177,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1125},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":468622,"byte_end":468639,"line_start":183,"line_end":183,"column_start":12,"column_end":29},"name":"set_week_from_sun","qualname":"<Parsed>::set_week_from_sun","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":468520,"byte_end":468610,"line_start":182,"line_end":182,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":468890,"byte_end":468907,"line_start":188,"line_end":188,"column_start":12,"column_end":29},"name":"set_week_from_mon","qualname":"<Parsed>::set_week_from_mon","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":468788,"byte_end":468878,"line_start":187,"line_end":187,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":1127},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":469146,"byte_end":469157,"line_start":193,"line_end":193,"column_start":12,"column_end":23},"name":"set_isoweek","qualname":"<Parsed>::set_isoweek","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoweek`](#structfield.isoweek) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoweek`](#structfield.isoweek) field from given value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":469056,"byte_end":469134,"line_start":192,"line_end":192,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":469390,"byte_end":469401,"line_start":198,"line_end":198,"column_start":12,"column_end":23},"name":"set_weekday","qualname":"<Parsed>::set_weekday","value":"fn (&mut self, value: Weekday) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`weekday`](#structfield.weekday) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`weekday`](#structfield.weekday) field from given value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":469300,"byte_end":469378,"line_start":197,"line_end":197,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1129},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":469603,"byte_end":469614,"line_start":203,"line_end":203,"column_start":12,"column_end":23},"name":"set_ordinal","qualname":"<Parsed>::set_ordinal","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`ordinal`](#structfield.ordinal) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`ordinal`](#structfield.ordinal) field from given value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":469513,"byte_end":469591,"line_start":202,"line_end":202,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":469839,"byte_end":469846,"line_start":208,"line_end":208,"column_start":12,"column_end":19},"name":"set_day","qualname":"<Parsed>::set_day","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`day`](#structfield.day) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`day`](#structfield.day) field from given value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":469757,"byte_end":469827,"line_start":207,"line_end":207,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1131},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":470123,"byte_end":470131,"line_start":214,"line_end":214,"column_start":12,"column_end":20},"name":"set_ampm","qualname":"<Parsed>::set_ampm","value":"fn (&mut self, value: bool) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.\n (`false` for AM, `true` for PM)\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":469985,"byte_end":470071,"line_start":212,"line_end":212,"column_start":5,"column_end":91}},{"value":"/ (`false` for AM, `true` for PM)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":470076,"byte_end":470111,"line_start":213,"line_end":213,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":470390,"byte_end":470400,"line_start":220,"line_end":220,"column_start":12,"column_end":22},"name":"set_hour12","qualname":"<Parsed>::set_hour12","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from\n given hour number in 12-hour clocks.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":470260,"byte_end":470333,"line_start":218,"line_end":218,"column_start":5,"column_end":78}},{"value":"/ given hour number in 12-hour clocks.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":470338,"byte_end":470378,"line_start":219,"line_end":219,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1133},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":470743,"byte_end":470751,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"name":"set_hour","qualname":"<Parsed>::set_hour","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set both [`hour_div_12`](#structfield.hour_div_12) and\n [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set both [`hour_div_12`](#structfield.hour_div_12) and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":470589,"byte_end":470656,"line_start":225,"line_end":225,"column_start":5,"column_end":72}},{"value":"/ [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":470661,"byte_end":470731,"line_start":226,"line_end":226,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1134},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":471096,"byte_end":471106,"line_start":235,"line_end":235,"column_start":12,"column_end":22},"name":"set_minute","qualname":"<Parsed>::set_minute","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`minute`](#structfield.minute) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`minute`](#structfield.minute) field from given value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":471008,"byte_end":471084,"line_start":234,"line_end":234,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1135},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":471336,"byte_end":471346,"line_start":240,"line_end":240,"column_start":12,"column_end":22},"name":"set_second","qualname":"<Parsed>::set_second","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`second`](#structfield.second) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`second`](#structfield.second) field from given value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":471248,"byte_end":471324,"line_start":239,"line_end":239,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1136},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":471584,"byte_end":471598,"line_start":245,"line_end":245,"column_start":12,"column_end":26},"name":"set_nanosecond","qualname":"<Parsed>::set_nanosecond","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":471488,"byte_end":471572,"line_start":244,"line_end":244,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1137},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":471838,"byte_end":471851,"line_start":250,"line_end":250,"column_start":12,"column_end":25},"name":"set_timestamp","qualname":"<Parsed>::set_timestamp","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`timestamp`](#structfield.timestamp) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`timestamp`](#structfield.timestamp) field from given value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":471744,"byte_end":471826,"line_start":249,"line_end":249,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1138},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":472049,"byte_end":472059,"line_start":255,"line_end":255,"column_start":12,"column_end":22},"name":"set_offset","qualname":"<Parsed>::set_offset","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`offset`](#structfield.offset) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`offset`](#structfield.offset) field from given value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":471961,"byte_end":472037,"line_start":254,"line_end":254,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1139},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":472708,"byte_end":472721,"line_start":270,"line_end":270,"column_start":12,"column_end":25},"name":"to_naive_date","qualname":"<Parsed>::to_naive_date","value":"fn (&self) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date out of given fields.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":472201,"byte_end":472253,"line_start":259,"line_end":259,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":472258,"byte_end":472261,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the date from given subset of fields:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":472266,"byte_end":472340,"line_start":261,"line_end":261,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":472345,"byte_end":472348,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ - Year, month, day.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":472353,"byte_end":472376,"line_start":263,"line_end":263,"column_start":5,"column_end":28}},{"value":"/ - Year, day of the year (ordinal).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":472381,"byte_end":472419,"line_start":264,"line_end":264,"column_start":5,"column_end":43}},{"value":"/ - Year, week number counted from Sunday or Monday, day of the week.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":472424,"byte_end":472495,"line_start":265,"line_end":265,"column_start":5,"column_end":76}},{"value":"/ - ISO week date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":472500,"byte_end":472520,"line_start":266,"line_end":266,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":472525,"byte_end":472528,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ Gregorian year and ISO week date year can have their century number (`*_div_100`) omitted,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":472533,"byte_end":472627,"line_start":268,"line_end":268,"column_start":5,"column_end":99}},{"value":"/ the two-digit year is used to guess the century number then.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":472632,"byte_end":472696,"line_start":269,"line_end":269,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1147},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":481759,"byte_end":481772,"line_start":455,"line_end":455,"column_start":12,"column_end":25},"name":"to_naive_time","qualname":"<Parsed>::to_naive_time","value":"fn (&self) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive time out of given fields.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":481356,"byte_end":481408,"line_start":446,"line_end":446,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":481413,"byte_end":481416,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the time from given subset of fields:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":481421,"byte_end":481495,"line_start":448,"line_end":448,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":481500,"byte_end":481503,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ - Hour, minute. (second and nanosecond assumed to be 0)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":481508,"byte_end":481567,"line_start":450,"line_end":450,"column_start":5,"column_end":64}},{"value":"/ - Hour, minute, second. (nanosecond assumed to be 0)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":481572,"byte_end":481628,"line_start":451,"line_end":451,"column_start":5,"column_end":61}},{"value":"/ - Hour, minute, second, nanosecond.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":481633,"byte_end":481672,"line_start":452,"line_end":452,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":481677,"byte_end":481680,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ It is able to handle leap seconds when given second is 60.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":481685,"byte_end":481747,"line_start":454,"line_end":454,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1148},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":483555,"byte_end":483584,"line_start":497,"line_end":497,"column_start":12,"column_end":41},"name":"to_naive_datetime_with_offset","qualname":"<Parsed>::to_naive_datetime_with_offset","value":"fn (&self, offset: i32) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date and time out of given fields,\n except for the [`offset`](#structfield.offset) field (assumed to have a given value).\n This is required for parsing a local time or other known-timezone inputs.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date and time out of given fields,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":483070,"byte_end":483131,"line_start":490,"line_end":490,"column_start":5,"column_end":66}},{"value":"/ except for the [`offset`](#structfield.offset) field (assumed to have a given value).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":483136,"byte_end":483225,"line_start":491,"line_end":491,"column_start":5,"column_end":94}},{"value":"/ This is required for parsing a local time or other known-timezone inputs.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":483230,"byte_end":483307,"line_start":492,"line_end":492,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":483312,"byte_end":483315,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":483320,"byte_end":483383,"line_start":494,"line_end":494,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":483388,"byte_end":483474,"line_start":495,"line_end":495,"column_start":5,"column_end":91}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":483479,"byte_end":483543,"line_start":496,"line_end":496,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1153},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":487006,"byte_end":487021,"line_start":567,"line_end":567,"column_start":12,"column_end":27},"name":"to_fixed_offset","qualname":"<Parsed>::to_fixed_offset","value":"fn (&self) -> ParseResult<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed fixed time zone offset out of given fields.\n","sig":null,"attributes":[{"value":"/ Returns a parsed fixed time zone offset out of given fields.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":486930,"byte_end":486994,"line_start":566,"line_end":566,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":487493,"byte_end":487504,"line_start":577,"line_end":577,"column_start":12,"column_end":23},"name":"to_datetime","qualname":"<Parsed>::to_datetime","value":"fn (&self) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":487142,"byte_end":487212,"line_start":571,"line_end":571,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":487217,"byte_end":487220,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":487225,"byte_end":487288,"line_start":573,"line_end":573,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":487293,"byte_end":487379,"line_start":574,"line_end":574,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":487384,"byte_end":487412,"line_start":575,"line_end":575,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":487417,"byte_end":487481,"line_start":576,"line_end":576,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1155},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":488547,"byte_end":488572,"line_start":597,"line_end":597,"column_start":12,"column_end":37},"name":"to_datetime_with_timezone","qualname":"<Parsed>::to_datetime_with_timezone","value":"fn <Tz> (&self, tz: &Tz) -> ParseResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields,\n with an additional `TimeZone` used to interpret and validate the local date.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":487990,"byte_end":488060,"line_start":588,"line_end":588,"column_start":5,"column_end":75}},{"value":"/ with an additional `TimeZone` used to interpret and validate the local date.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":488065,"byte_end":488145,"line_start":589,"line_end":589,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":488150,"byte_end":488153,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":488158,"byte_end":488221,"line_start":591,"line_end":591,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":488226,"byte_end":488312,"line_start":592,"line_end":592,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":488317,"byte_end":488345,"line_start":593,"line_end":593,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":488350,"byte_end":488414,"line_start":594,"line_end":594,"column_start":5,"column_end":69}},{"value":"/ If parsed fields include an UTC offset, it also has to be consistent to","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":488419,"byte_end":488494,"line_start":595,"line_end":595,"column_start":5,"column_end":80}},{"value":"/ [`offset`](#structfield.offset).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":488499,"byte_end":488535,"line_start":596,"line_end":596,"column_start":5,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1226},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parse.rs","byte_start":535484,"byte_end":535489,"line_start":205,"line_end":205,"column_start":8,"column_end":13},"name":"parse","qualname":"::format::parse::parse","value":"fn <'a, I> (parsed: &mut Parsed, mut s: &str, items: I) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to parse given string into `parsed` with given formatting items.\n Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\n There should be no trailing string after parsing;\n use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","sig":null,"attributes":[{"value":"/ Tries to parse given string into `parsed` with given formatting items.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parse.rs","byte_start":534581,"byte_end":534655,"line_start":189,"line_end":189,"column_start":1,"column_end":75}},{"value":"/ Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parse.rs","byte_start":534656,"byte_end":534752,"line_start":190,"line_end":190,"column_start":1,"column_end":97}},{"value":"/ There should be no trailing string after parsing;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parse.rs","byte_start":534753,"byte_end":534806,"line_start":191,"line_end":191,"column_start":1,"column_end":54}},{"value":"/ use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parse.rs","byte_start":534807,"byte_end":534891,"line_start":192,"line_end":192,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parse.rs","byte_start":534892,"byte_end":534895,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ This particular date and time parser is:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parse.rs","byte_start":534896,"byte_end":534940,"line_start":194,"line_end":194,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parse.rs","byte_start":534941,"byte_end":534944,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ - Greedy. It will consume the longest possible prefix.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parse.rs","byte_start":534945,"byte_end":535003,"line_start":196,"line_end":196,"column_start":1,"column_end":59}},{"value":"/   For example, `April` is always consumed entirely when the long month name is requested;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parse.rs","byte_start":535004,"byte_end":535097,"line_start":197,"line_end":197,"column_start":1,"column_end":94}},{"value":"/   it equally accepts `Apr`, but prefers the longer prefix in this case.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parse.rs","byte_start":535098,"byte_end":535173,"line_start":198,"line_end":198,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parse.rs","byte_start":535174,"byte_end":535177,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ - Padding-agnostic (for numeric items).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parse.rs","byte_start":535178,"byte_end":535221,"line_start":200,"line_end":200,"column_start":1,"column_end":44}},{"value":"/   The [`Pad`](./enum.Pad.html) field is completely ignored,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parse.rs","byte_start":535222,"byte_end":535285,"line_start":201,"line_end":201,"column_start":1,"column_end":64}},{"value":"/   so one can prepend any number of whitespace then any number of zeroes before numbers.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parse.rs","byte_start":535286,"byte_end":535377,"line_start":202,"line_end":202,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parse.rs","byte_start":535378,"byte_end":535381,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ - (Still) obeying the intrinsic parsing width. This allows, for example, parsing `HHMMSS`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parse.rs","byte_start":535382,"byte_end":535476,"line_start":204,"line_end":204,"column_start":1,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":1233},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/strftime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"strftime","qualname":"::format::strftime","value":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/strftime.rs","parent":null,"children":[{"krate":0,"index":1234},{"krate":0,"index":1836},{"krate":0,"index":1843},{"krate":0,"index":1840},{"krate":0,"index":1241},{"krate":0,"index":1246},{"krate":0,"index":1247}],"decl_id":null,"docs":"`strftime`/`strptime`-inspired date and time formatting syntax.","sig":null,"attributes":[{"value":"!\n`strftime`/`strptime`-inspired date and time formatting syntax.\n\n## Specifiers\n\nThe following specifiers are available both to formatting and parsing.\n\n| Spec. | Example  | Description                                                                |\n|-------|----------|----------------------------------------------------------------------------|\n|       |          | **DATE SPECIFIERS:**                                                       |\n| `%Y`  | `2001`   | The full proleptic Gregorian year, zero-padded to 4 digits. [1]            |\n| `%C`  | `20`     | The proleptic Gregorian year divided by 100, zero-padded to 2 digits. [2]  |\n| `%y`  | `01`     | The proleptic Gregorian year modulo 100, zero-padded to 2 digits. [2]      |\n|       |          |                                                                            |\n| `%m`  | `07`     | Month number (01--12), zero-padded to 2 digits.                            |\n| `%b`  | `Jul`    | Abbreviated month name. Always 3 letters.                                  |\n| `%B`  | `July`   | Full month name. Also accepts corresponding abbreviation in parsing.       |\n| `%h`  | `Jul`    | Same to `%b`.                                                              |\n|       |          |                                                                            |\n| `%d`  | `08`     | Day number (01--31), zero-padded to 2 digits.                              |\n| `%e`  | ` 8`     | Same to `%d` but space-padded. Same to `%_d`.                              |\n|       |          |                                                                            |\n| `%a`  | `Sun`    | Abbreviated weekday name. Always 3 letters.                                |\n| `%A`  | `Sunday` | Full weekday name. Also accepts corresponding abbreviation in parsing.     |\n| `%w`  | `0`      | Sunday = 0, Monday = 1, ..., Saturday = 6.                                 |\n| `%u`  | `7`      | Monday = 1, Tuesday = 2, ..., Sunday = 7. (ISO 8601)                       |\n|       |          |                                                                            |\n| `%U`  | `28`     | Week number starting with Sunday (00--53), zero-padded to 2 digits. [3]    |\n| `%W`  | `27`     | Same to `%U`, but week 1 starts with the first Monday in that year instead.|\n|       |          |                                                                            |\n| `%G`  | `2001`   | Same to `%Y` but uses the year number in ISO 8601 week date. [4]           |\n| `%g`  | `01`     | Same to `%y` but uses the year number in ISO 8601 week date. [4]           |\n| `%V`  | `27`     | Same to `%U` but uses the week number in ISO 8601 week date (01--53). [4]  |\n|       |          |                                                                            |\n| `%j`  | `189`    | Day of the year (001--366), zero-padded to 3 digits.                       |\n|       |          |                                                                            |\n| `%D`  | `07/08/01`    | Month-day-year format. Same to `%m/%d/%y`.                            |\n| `%x`  | `07/08/01`    | Same to `%D`.                                                         |\n| `%F`  | `2001-07-08`  | Year-month-day format (ISO 8601). Same to `%Y-%m-%d`.                 |\n| `%v`  | ` 8-Jul-2001` | Day-month-year format. Same to `%e-%b-%Y`.                            |\n|       |          |                                                                            |\n|       |          | **TIME SPECIFIERS:**                                                       |\n| `%H`  | `00`     | Hour number (00--23), zero-padded to 2 digits.                             |\n| `%k`  | ` 0`     | Same to `%H` but space-padded. Same to `%_H`.                              |\n| `%I`  | `12`     | Hour number in 12-hour clocks (01--12), zero-padded to 2 digits.           |\n| `%l`  | `12`     | Same to `%I` but space-padded. Same to `%_I`.                              |\n|       |          |                                                                            |\n| `%P`  | `am`     | `am` or `pm` in 12-hour clocks.                                            |\n| `%p`  | `AM`     | `AM` or `PM` in 12-hour clocks.                                            |\n|       |          |                                                                            |\n| `%M`  | `34`     | Minute number (00--59), zero-padded to 2 digits.                           |\n| `%S`  | `60`     | Second number (00--60), zero-padded to 2 digits. [5]                       |\n| `%f`  | `026490000`   | The fractional seconds (in nanoseconds) since last whole second. [8]  |\n| `%.f` | `.026490`| Similar to `.%f` but left-aligned. These all consume the leading dot. [8]  |\n| `%.3f`| `.026`        | Similar to `.%f` but left-aligned but fixed to a length of 3. [8]     |\n| `%.6f`| `.026490`     | Similar to `.%f` but left-aligned but fixed to a length of 6. [8]     |\n| `%.9f`| `.026490000`  | Similar to `.%f` but left-aligned but fixed to a length of 9. [8]     |\n| `%3f` | `026`         | Similar to `%.3f` but without the leading dot. [8]                    |\n| `%6f` | `026490`      | Similar to `%.6f` but without the leading dot. [8]                    |\n| `%9f` | `026490000`   | Similar to `%.9f` but without the leading dot. [8]                    |\n|       |               |                                                                       |\n| `%R`  | `00:34`       | Hour-minute format. Same to `%H:%M`.                                  |\n| `%T`  | `00:34:60`    | Hour-minute-second format. Same to `%H:%M:%S`.                        |\n| `%X`  | `00:34:60`    | Same to `%T`.                                                         |\n| `%r`  | `12:34:60 AM` | Hour-minute-second format in 12-hour clocks. Same to `%I:%M:%S %p`.   |\n|       |          |                                                                            |\n|       |          | **TIME ZONE SPECIFIERS:**                                                  |\n| `%Z`  | `ACST`   | *Formatting only:* Local time zone name.                                   |\n| `%z`  | `+0930`  | Offset from the local time to UTC (with UTC being `+0000`).                |\n| `%:z` | `+09:30` | Same to `%z` but with a colon.                                             |\n| `%#z` | `+09`    | *Parsing only:* Same to `%z` but allows minutes to be missing or present.  |\n|       |          |                                                                            |\n|       |          | **DATE & TIME SPECIFIERS:**                                                |\n|`%c`|`Sun Jul  8 00:34:60 2001`|`ctime` date & time format. Same to `%a %b %e %T %Y` sans `\\n`.|\n| `%+`  | `2001-07-08T00:34:60.026490+09:30` | ISO 8601 / RFC 3339 date & time format. [6]      |\n|       |               |                                                                       |\n| `%s`  | `994518299`   | UNIX timestamp, the number of seconds since 1970-01-01 00:00 UTC. [7] |\n|       |          |                                                                            |\n|       |          | **SPECIAL SPECIFIERS:**                                                    |\n| `%t`  |          | Literal tab (`\\t`).                                                        |\n| `%n`  |          | Literal newline (`\\n`).                                                    |\n| `%%`  |          | Literal percent sign.                                                      |\n\nIt is possible to override the default padding behavior of numeric specifiers `%?`.\nThis is not allowed for other specifiers and will result in the `BAD_FORMAT` error.\n\nModifier | Description\n-------- | -----------\n`%-?`    | Suppresses any padding including spaces and zeroes. (e.g. `%j` = `012`, `%-j` = `12`)\n`%_?`    | Uses spaces as a padding. (e.g. `%j` = `012`, `%_j` = ` 12`)\n`%0?`    | Uses zeroes as a padding. (e.g. `%e` = ` 9`, `%0e` = `09`)\n\nNotes:\n\n1. `%Y`:\n   Negative years are allowed in formatting but not in parsing.\n\n2. `%C`, `%y`:\n   This is floor division, so 100 BCE (year number -99) will print `-1` and `99` respectively.\n\n3. `%U`:\n   Week 1 starts with the first Sunday in that year.\n   It is possible to have week 0 for days before the first Sunday.\n\n4. `%G`, `%g`, `%V`:\n   Week 1 is the first week with at least 4 days in that year.\n   Week 0 does not exist, so this should be used with `%G` or `%g`.\n\n5. `%S`:\n   It accounts for leap seconds, so `60` is possible.\n\n6. `%+`:\n   Same to `%Y-%m-%dT%H:%M:%S%.f%:z`,\n   i.e. 0, 3, 6 or 9 fractional digits for seconds and colons in the time zone offset.\n\n   The typical `strftime` implementations have\n   different (and locale-dependent) formats for this specifier.\n   While Chrono's format for `%+` is far more stable,\n   it is best to avoid this specifier if you want to control the exact output.\n\n7. `%s`:\n   This is not padded and can be negative.\n   For the purpose of Chrono, it only accounts for non-leap seconds\n   so it slightly differs from ISO C `strftime` behavior.\n\n8. `%f`, `%.f`, `%.3f`, `%.6f`, `%.9f`, `%3f`, `%6f`, `%9f`:\n\n   The default `%f` is right-aligned and always zero-padded to 9 digits\n   for the compatibility with glibc and others,\n   so it always counts the number of nanoseconds since the last whole second.\n   E.g. 7ms after the last second will print `007000000`,\n   and parsing `7000000` will yield the same.\n\n   The variant `%.f` is left-aligned and print 0, 3, 6 or 9 fractional digits\n   according to the precision.\n   E.g. 70ms after the last second under `%.f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can print or read nothing if the fractional part is zero or\n   the next character is not `.`.\n\n   The variant `%.3f`, `%.6f` and `%.9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`.\n   E.g. 70ms after the last second under `%.3f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero or\n   the next character is not `.` however will print with the specified length.\n\n   The variant `%3f`, `%6f` and `%9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`, but without the leading dot.\n   E.g. 70ms after the last second under `%3f` will print `070` (note: not `07`),\n   and parsing `07`, `070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero.\n\n*/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/strftime.rs","byte_start":565322,"byte_end":575914,"line_start":4,"line_end":157,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1836},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/strftime.rs","byte_start":576082,"byte_end":576095,"line_start":163,"line_end":163,"column_start":12,"column_end":25},"name":"StrftimeItems","qualname":"::format::strftime::StrftimeItems","value":"StrftimeItems {  }","parent":null,"children":[{"krate":0,"index":1838},{"krate":0,"index":1839}],"decl_id":null,"docs":" Parsing iterator for `strftime`-like format strings.\n","sig":null,"attributes":[{"value":"/ Parsing iterator for `strftime`-like format strings.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/strftime.rs","byte_start":575990,"byte_end":576046,"line_start":161,"line_end":161,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1243},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/strftime.rs","byte_start":576571,"byte_end":576574,"line_start":174,"line_end":174,"column_start":12,"column_end":15},"name":"new","qualname":"<StrftimeItems>::new","value":"fn (s: &'a str) -> StrftimeItems<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new parsing iterator from the `strftime`-like format string.\n","sig":null,"attributes":[{"value":"/ Creates a new parsing iterator from the `strftime`-like format string.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/strftime.rs","byte_start":576485,"byte_end":576559,"line_start":173,"line_end":173,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":1855},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":459015,"byte_end":459028,"line_start":557,"line_end":557,"column_start":12,"column_end":25},"name":"DelayedFormat","qualname":"::format::DelayedFormat","value":"DelayedFormat {  }","parent":null,"children":[{"krate":0,"index":1857},{"krate":0,"index":1858},{"krate":0,"index":1859},{"krate":0,"index":1860}],"decl_id":null,"docs":" A *temporary* object which can be used as an argument to `format!` or others.\n This is normally constructed via `format` methods of each date and time type.\n","sig":null,"attributes":[{"value":"/ A *temporary* object which can be used as an argument to `format!` or others.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":458823,"byte_end":458904,"line_start":554,"line_end":554,"column_start":1,"column_end":82}},{"value":"/ This is normally constructed via `format` methods of each date and time type.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":458905,"byte_end":458986,"line_start":555,"line_end":555,"column_start":1,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1260},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":459484,"byte_end":459487,"line_start":570,"line_end":570,"column_start":12,"column_end":15},"name":"new","qualname":"<DelayedFormat<I>>::new","value":"fn (date: Option<NaiveDate>, time: Option<NaiveTime>, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":459407,"byte_end":459472,"line_start":569,"line_end":569,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1261},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":459747,"byte_end":459762,"line_start":575,"line_end":575,"column_start":12,"column_end":27},"name":"new_with_offset","qualname":"<DelayedFormat<I>>::new_with_offset","value":"fn <Off> (date: Option<NaiveDate>, time: Option<NaiveTime>, offset: &Off, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time and UTC offset.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time and UTC offset.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":459655,"byte_end":459735,"line_start":574,"line_end":574,"column_start":5,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":1276},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":591457,"byte_end":591468,"line_start":14,"line_end":14,"column_start":11,"column_end":22},"name":"SubsecRound","qualname":"::round::SubsecRound","value":"SubsecRound","parent":null,"children":[{"krate":0,"index":1277},{"krate":0,"index":1278}],"decl_id":null,"docs":" Extension trait for subsecond rounding or truncation to a maximum number\n of digits. Rounding can be used to decrease the error variance when\n serializing/persisting to lower precision. Truncation is the default\n behavior in Chrono display formatting.  Either can be used to guarantee\n equality (e.g. for testing) when round-tripping through a lower precision\n format.\n","sig":null,"attributes":[{"value":"/ Extension trait for subsecond rounding or truncation to a maximum number","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":591059,"byte_end":591135,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/ of digits. Rounding can be used to decrease the error variance when","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":591136,"byte_end":591207,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"/ serializing/persisting to lower precision. Truncation is the default","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":591208,"byte_end":591280,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/ behavior in Chrono display formatting.  Either can be used to guarantee","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":591281,"byte_end":591356,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/ equality (e.g. for testing) when round-tripping through a lower precision","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":591357,"byte_end":591434,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ format.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":591435,"byte_end":591446,"line_start":13,"line_end":13,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1277},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":591998,"byte_end":592011,"line_start":26,"line_end":26,"column_start":8,"column_end":21},"name":"round_subsecs","qualname":"::round::SubsecRound::round_subsecs","value":"fn (self, digits: u16) -> Self","parent":{"krate":0,"index":1276},"children":[],"decl_id":null,"docs":" Return a copy rounded to the specified number of subsecond digits. With\n 9 or more digits, self is returned unmodified. Halfway values are\n rounded up (away from zero).","sig":null,"attributes":[{"value":"/ Return a copy rounded to the specified number of subsecond digits. With","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":591475,"byte_end":591550,"line_start":15,"line_end":15,"column_start":5,"column_end":80}},{"value":"/ 9 or more digits, self is returned unmodified. Halfway values are","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":591555,"byte_end":591624,"line_start":16,"line_end":16,"column_start":5,"column_end":74}},{"value":"/ rounded up (away from zero).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":591629,"byte_end":591661,"line_start":17,"line_end":17,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":591666,"byte_end":591669,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":591674,"byte_end":591687,"line_start":19,"line_end":19,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":591692,"byte_end":591704,"line_start":20,"line_end":20,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":591709,"byte_end":591776,"line_start":21,"line_end":21,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":591781,"byte_end":591844,"line_start":22,"line_end":22,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.round_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":591849,"byte_end":591911,"line_start":23,"line_end":23,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.round_subsecs(1).nanosecond(), 200_000_000);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":591916,"byte_end":591978,"line_start":24,"line_end":24,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":591983,"byte_end":591990,"line_start":25,"line_end":25,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1278},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":592514,"byte_end":592527,"line_start":38,"line_end":38,"column_start":8,"column_end":21},"name":"trunc_subsecs","qualname":"::round::SubsecRound::trunc_subsecs","value":"fn (self, digits: u16) -> Self","parent":{"krate":0,"index":1276},"children":[],"decl_id":null,"docs":" Return a copy truncated to the specified number of subsecond\n digits. With 9 or more digits, self is returned unmodified.","sig":null,"attributes":[{"value":"/ Return a copy truncated to the specified number of subsecond","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":592045,"byte_end":592109,"line_start":28,"line_end":28,"column_start":5,"column_end":69}},{"value":"/ digits. With 9 or more digits, self is returned unmodified.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":592114,"byte_end":592177,"line_start":29,"line_end":29,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":592182,"byte_end":592185,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":592190,"byte_end":592203,"line_start":31,"line_end":31,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":592208,"byte_end":592220,"line_start":32,"line_end":32,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":592225,"byte_end":592292,"line_start":33,"line_end":33,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":592297,"byte_end":592360,"line_start":34,"line_end":34,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.trunc_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":592365,"byte_end":592427,"line_start":35,"line_end":35,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.trunc_subsecs(1).nanosecond(), 100_000_000);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":592432,"byte_end":592494,"line_start":36,"line_end":36,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":592499,"byte_end":592506,"line_start":37,"line_end":37,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1865},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22295,"byte_end":22298,"line_start":515,"line_end":515,"column_start":5,"column_end":8},"name":"Mon","qualname":"::Weekday::Mon","value":"Weekday::Mon","parent":{"krate":0,"index":1864},"children":[],"decl_id":null,"docs":" Monday.\n","sig":null,"attributes":[{"value":"/ Monday.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22279,"byte_end":22290,"line_start":514,"line_end":514,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1868},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22325,"byte_end":22328,"line_start":517,"line_end":517,"column_start":5,"column_end":8},"name":"Tue","qualname":"::Weekday::Tue","value":"Weekday::Tue","parent":{"krate":0,"index":1864},"children":[],"decl_id":null,"docs":" Tuesday.\n","sig":null,"attributes":[{"value":"/ Tuesday.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22308,"byte_end":22320,"line_start":516,"line_end":516,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1871},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22357,"byte_end":22360,"line_start":519,"line_end":519,"column_start":5,"column_end":8},"name":"Wed","qualname":"::Weekday::Wed","value":"Weekday::Wed","parent":{"krate":0,"index":1864},"children":[],"decl_id":null,"docs":" Wednesday.\n","sig":null,"attributes":[{"value":"/ Wednesday.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22338,"byte_end":22352,"line_start":518,"line_end":518,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1874},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22388,"byte_end":22391,"line_start":521,"line_end":521,"column_start":5,"column_end":8},"name":"Thu","qualname":"::Weekday::Thu","value":"Weekday::Thu","parent":{"krate":0,"index":1864},"children":[],"decl_id":null,"docs":" Thursday.\n","sig":null,"attributes":[{"value":"/ Thursday.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22370,"byte_end":22383,"line_start":520,"line_end":520,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1877},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22417,"byte_end":22420,"line_start":523,"line_end":523,"column_start":5,"column_end":8},"name":"Fri","qualname":"::Weekday::Fri","value":"Weekday::Fri","parent":{"krate":0,"index":1864},"children":[],"decl_id":null,"docs":" Friday.\n","sig":null,"attributes":[{"value":"/ Friday.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22401,"byte_end":22412,"line_start":522,"line_end":522,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1880},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22448,"byte_end":22451,"line_start":525,"line_end":525,"column_start":5,"column_end":8},"name":"Sat","qualname":"::Weekday::Sat","value":"Weekday::Sat","parent":{"krate":0,"index":1864},"children":[],"decl_id":null,"docs":" Saturday.\n","sig":null,"attributes":[{"value":"/ Saturday.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22430,"byte_end":22443,"line_start":524,"line_end":524,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1883},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22477,"byte_end":22480,"line_start":527,"line_end":527,"column_start":5,"column_end":8},"name":"Sun","qualname":"::Weekday::Sun","value":"Weekday::Sun","parent":{"krate":0,"index":1864},"children":[],"decl_id":null,"docs":" Sunday.\n","sig":null,"attributes":[{"value":"/ Sunday.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22461,"byte_end":22472,"line_start":526,"line_end":526,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":1864},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22265,"byte_end":22272,"line_start":513,"line_end":513,"column_start":10,"column_end":17},"name":"Weekday","qualname":"::Weekday","value":"Weekday::{Mon, Tue, Wed, Thu, Fri, Sat, Sun}","parent":null,"children":[{"krate":0,"index":1865},{"krate":0,"index":1868},{"krate":0,"index":1871},{"krate":0,"index":1874},{"krate":0,"index":1877},{"krate":0,"index":1880},{"krate":0,"index":1883}],"decl_id":null,"docs":" The day of week.","sig":null,"attributes":[{"value":"/ The day of week.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":21870,"byte_end":21890,"line_start":506,"line_end":506,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":21891,"byte_end":21894,"line_start":507,"line_end":507,"column_start":1,"column_end":4}},{"value":"/ The order of the days of week depends on the context.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":21895,"byte_end":21952,"line_start":508,"line_end":508,"column_start":1,"column_end":58}},{"value":"/ (This is why this type does *not* implement `PartialOrd` or `Ord` traits.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":21953,"byte_end":22031,"line_start":509,"line_end":509,"column_start":1,"column_end":79}},{"value":"/ One should prefer `*_from_monday` or `*_from_sunday` methods to get the correct result.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22032,"byte_end":22123,"line_start":510,"line_end":510,"column_start":1,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1285},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22799,"byte_end":22803,"line_start":537,"line_end":537,"column_start":12,"column_end":16},"name":"succ","qualname":"<Weekday>::succ","value":"fn (&self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The next day in the week.","sig":null,"attributes":[{"value":"/ The next day in the week.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22508,"byte_end":22537,"line_start":531,"line_end":531,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22542,"byte_end":22545,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22550,"byte_end":22621,"line_start":533,"line_end":533,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22626,"byte_end":22697,"line_start":534,"line_end":534,"column_start":5,"column_end":76}},{"value":"/ `w.succ()`: | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun` | `Mon`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22702,"byte_end":22773,"line_start":535,"line_end":535,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22778,"byte_end":22787,"line_start":536,"line_end":536,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":23456,"byte_end":23460,"line_start":555,"line_end":555,"column_start":12,"column_end":16},"name":"pred","qualname":"<Weekday>::pred","value":"fn (&self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The previous day in the week.","sig":null,"attributes":[{"value":"/ The previous day in the week.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":23161,"byte_end":23194,"line_start":549,"line_end":549,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":23199,"byte_end":23202,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":23207,"byte_end":23278,"line_start":551,"line_end":551,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":23283,"byte_end":23354,"line_start":552,"line_end":552,"column_start":5,"column_end":76}},{"value":"/ `w.pred()`: | `Sun` | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":23359,"byte_end":23430,"line_start":553,"line_end":553,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":23435,"byte_end":23444,"line_start":554,"line_end":554,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1287},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":24202,"byte_end":24220,"line_start":573,"line_end":573,"column_start":12,"column_end":30},"name":"number_from_monday","qualname":"<Weekday>::number_from_monday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":23818,"byte_end":23902,"line_start":567,"line_end":567,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":23907,"byte_end":23910,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":23915,"byte_end":24000,"line_start":569,"line_end":569,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":24005,"byte_end":24090,"line_start":570,"line_end":570,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_monday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 7","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":24095,"byte_end":24176,"line_start":571,"line_end":571,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":24181,"byte_end":24190,"line_start":572,"line_end":572,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":24855,"byte_end":24873,"line_start":591,"line_end":591,"column_start":12,"column_end":30},"name":"number_from_sunday","qualname":"<Weekday>::number_from_sunday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 1.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 1.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":24497,"byte_end":24555,"line_start":585,"line_end":585,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":24560,"byte_end":24563,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":24568,"byte_end":24653,"line_start":587,"line_end":587,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":24658,"byte_end":24743,"line_start":588,"line_end":588,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_sunday()`: | 2     | 3     | 4     | 5     | 6     | 7     | 1","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":24748,"byte_end":24829,"line_start":589,"line_end":589,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":24834,"byte_end":24843,"line_start":590,"line_end":590,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1289},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":25514,"byte_end":25534,"line_start":609,"line_end":609,"column_start":12,"column_end":32},"name":"num_days_from_monday","qualname":"<Weekday>::num_days_from_monday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 0.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":25150,"byte_end":25208,"line_start":603,"line_end":603,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":25213,"byte_end":25216,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":25221,"byte_end":25308,"line_start":605,"line_end":605,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":25313,"byte_end":25400,"line_start":606,"line_end":606,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_monday()`: | 0     | 1     | 2     | 3     | 4     | 5     | 6","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":25405,"byte_end":25488,"line_start":607,"line_end":607,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":25493,"byte_end":25502,"line_start":608,"line_end":608,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":26175,"byte_end":26195,"line_start":627,"line_end":627,"column_start":12,"column_end":32},"name":"num_days_from_sunday","qualname":"<Weekday>::num_days_from_sunday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 0.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":25811,"byte_end":25869,"line_start":621,"line_end":621,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":25874,"byte_end":25877,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":25882,"byte_end":25969,"line_start":623,"line_end":623,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":25974,"byte_end":26061,"line_start":624,"line_end":624,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_sunday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 0","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":26066,"byte_end":26149,"line_start":625,"line_end":625,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":26154,"byte_end":26163,"line_start":626,"line_end":626,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1900},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":27643,"byte_end":27660,"line_start":677,"line_end":677,"column_start":12,"column_end":29},"name":"ParseWeekdayError","qualname":"::ParseWeekdayError","value":"ParseWeekdayError {  }","parent":null,"children":[{"krate":0,"index":1901}],"decl_id":null,"docs":" An error resulting from reading `Weekday` value with `FromStr`.\n","sig":null,"attributes":[{"value":"/ An error resulting from reading `Weekday` value with `FromStr`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":27536,"byte_end":27603,"line_start":675,"line_end":675,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":1297},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":30778,"byte_end":30786,"line_start":796,"line_end":796,"column_start":11,"column_end":19},"name":"Datelike","qualname":"::Datelike","value":"Datelike: Sized","parent":null,"children":[{"krate":0,"index":1298},{"krate":0,"index":1299},{"krate":0,"index":1300},{"krate":0,"index":1301},{"krate":0,"index":1302},{"krate":0,"index":1303},{"krate":0,"index":1304},{"krate":0,"index":1305},{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311},{"krate":0,"index":1312},{"krate":0,"index":1313},{"krate":0,"index":1314},{"krate":0,"index":1315}],"decl_id":null,"docs":" The common set of methods for date component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for date component.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":30718,"byte_end":30767,"line_start":795,"line_end":795,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1298},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":30904,"byte_end":30908,"line_start":798,"line_end":798,"column_start":8,"column_end":12},"name":"year","qualname":"::Datelike::year","value":"fn (&self) -> i32","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).\n","sig":null,"attributes":[{"value":"/ Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":30800,"byte_end":30896,"line_start":797,"line_end":797,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":1299},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31117,"byte_end":31124,"line_start":803,"line_end":803,"column_start":8,"column_end":15},"name":"year_ce","qualname":"::Datelike::year_ce","value":"fn (&self) -> (bool, u32)","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Returns the absolute year number starting from 1 with a boolean flag,\n which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).\n","sig":null,"attributes":[{"value":"/ Returns the absolute year number starting from 1 with a boolean flag,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":30929,"byte_end":31002,"line_start":800,"line_end":800,"column_start":5,"column_end":78}},{"value":"/ which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31007,"byte_end":31095,"line_start":801,"line_end":801,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31100,"byte_end":31109,"line_start":802,"line_end":802,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1300},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31419,"byte_end":31424,"line_start":815,"line_end":815,"column_start":8,"column_end":13},"name":"month","qualname":"::Datelike::month","value":"fn (&self) -> u32","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Returns the month number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 1.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31312,"byte_end":31357,"line_start":812,"line_end":812,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31362,"byte_end":31365,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 12.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31370,"byte_end":31411,"line_start":814,"line_end":814,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1301},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31552,"byte_end":31558,"line_start":820,"line_end":820,"column_start":8,"column_end":14},"name":"month0","qualname":"::Datelike::month0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Returns the month number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 0.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31445,"byte_end":31490,"line_start":817,"line_end":817,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31495,"byte_end":31498,"line_start":818,"line_end":818,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 11.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31503,"byte_end":31544,"line_start":819,"line_end":819,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1302},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31729,"byte_end":31732,"line_start":825,"line_end":825,"column_start":8,"column_end":11},"name":"day","qualname":"::Datelike::day","value":"fn (&self) -> u32","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 1.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31579,"byte_end":31624,"line_start":822,"line_end":822,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31629,"byte_end":31632,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 31. (The last day of month differs by months.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31637,"byte_end":31721,"line_start":824,"line_end":824,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1303},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31903,"byte_end":31907,"line_start":830,"line_end":830,"column_start":8,"column_end":12},"name":"day0","qualname":"::Datelike::day0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 0.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31753,"byte_end":31798,"line_start":827,"line_end":827,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31803,"byte_end":31806,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 30. (The last day of month differs by months.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31811,"byte_end":31895,"line_start":829,"line_end":829,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1304},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":32076,"byte_end":32083,"line_start":835,"line_end":835,"column_start":8,"column_end":15},"name":"ordinal","qualname":"::Datelike::ordinal","value":"fn (&self) -> u32","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 1.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31928,"byte_end":31972,"line_start":832,"line_end":832,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31977,"byte_end":31980,"line_start":833,"line_end":833,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 366. (The last day of year differs by years.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":31985,"byte_end":32068,"line_start":834,"line_end":834,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1305},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":32252,"byte_end":32260,"line_start":840,"line_end":840,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"::Datelike::ordinal0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 0.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":32104,"byte_end":32148,"line_start":837,"line_end":837,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":32153,"byte_end":32156,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 365. (The last day of year differs by years.)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":32161,"byte_end":32244,"line_start":839,"line_end":839,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1306},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":32317,"byte_end":32324,"line_start":843,"line_end":843,"column_start":8,"column_end":15},"name":"weekday","qualname":"::Datelike::weekday","value":"fn (&self) -> Weekday","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Returns the day of week.\n","sig":null,"attributes":[{"value":"/ Returns the day of week.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":32281,"byte_end":32309,"line_start":842,"line_end":842,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1307},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":32382,"byte_end":32390,"line_start":846,"line_end":846,"column_start":8,"column_end":16},"name":"iso_week","qualname":"::Datelike::iso_week","value":"fn (&self) -> IsoWeek","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Returns the ISO week.\n","sig":null,"attributes":[{"value":"/ Returns the ISO week.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":32349,"byte_end":32374,"line_start":845,"line_end":845,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":32548,"byte_end":32557,"line_start":851,"line_end":851,"column_start":8,"column_end":17},"name":"with_year","qualname":"::Datelike::with_year","value":"fn (&self, year: i32) -> Option<Self>","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Makes a new value with the year number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the year number changed.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":32415,"byte_end":32466,"line_start":848,"line_end":848,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":32471,"byte_end":32474,"line_start":849,"line_end":849,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":32479,"byte_end":32540,"line_start":850,"line_end":850,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1309},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":32750,"byte_end":32760,"line_start":856,"line_end":856,"column_start":8,"column_end":18},"name":"with_month","qualname":"::Datelike::with_month","value":"fn (&self, month: u32) -> Option<Self>","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 1) changed.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":32598,"byte_end":32668,"line_start":853,"line_end":853,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":32673,"byte_end":32676,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":32681,"byte_end":32742,"line_start":855,"line_end":855,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1310},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":32954,"byte_end":32965,"line_start":861,"line_end":861,"column_start":8,"column_end":19},"name":"with_month0","qualname":"::Datelike::with_month0","value":"fn (&self, month0: u32) -> Option<Self>","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 0) changed.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":32802,"byte_end":32872,"line_start":858,"line_end":858,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":32877,"byte_end":32880,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":32885,"byte_end":32946,"line_start":860,"line_end":860,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33160,"byte_end":33168,"line_start":866,"line_end":866,"column_start":8,"column_end":16},"name":"with_day","qualname":"::Datelike::with_day","value":"fn (&self, day: u32) -> Option<Self>","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 1) changed.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33008,"byte_end":33078,"line_start":863,"line_end":863,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33083,"byte_end":33086,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33091,"byte_end":33152,"line_start":865,"line_end":865,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33360,"byte_end":33369,"line_start":871,"line_end":871,"column_start":8,"column_end":17},"name":"with_day0","qualname":"::Datelike::with_day0","value":"fn (&self, day0: u32) -> Option<Self>","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 0) changed.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33208,"byte_end":33278,"line_start":868,"line_end":868,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33283,"byte_end":33286,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33291,"byte_end":33352,"line_start":870,"line_end":870,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1313},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33561,"byte_end":33573,"line_start":876,"line_end":876,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"::Datelike::with_ordinal","value":"fn (&self, ordinal: u32) -> Option<Self>","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 1) changed.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33410,"byte_end":33479,"line_start":873,"line_end":873,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33484,"byte_end":33487,"line_start":874,"line_end":874,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33492,"byte_end":33553,"line_start":875,"line_end":875,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1314},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33768,"byte_end":33781,"line_start":881,"line_end":881,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"::Datelike::with_ordinal0","value":"fn (&self, ordinal0: u32) -> Option<Self>","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 0) changed.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33617,"byte_end":33686,"line_start":878,"line_end":878,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33691,"byte_end":33694,"line_start":879,"line_end":879,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33699,"byte_end":33760,"line_start":880,"line_end":880,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1315},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":34202,"byte_end":34218,"line_start":893,"line_end":893,"column_start":8,"column_end":24},"name":"num_days_from_ce","qualname":"::Datelike::num_days_from_ce","value":"fn (&self) -> i32","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":" Returns the number of days since January 1, Year 1 (aka Day 1) in the\n proleptic Gregorian calendar.","sig":null,"attributes":[{"value":"/ Returns the number of days since January 1, Year 1 (aka Day 1) in the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33826,"byte_end":33899,"line_start":883,"line_end":883,"column_start":5,"column_end":78}},{"value":"/ proleptic Gregorian calendar.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33904,"byte_end":33937,"line_start":884,"line_end":884,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33942,"byte_end":33945,"line_start":885,"line_end":885,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33950,"byte_end":33964,"line_start":886,"line_end":886,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33969,"byte_end":33972,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ ~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33977,"byte_end":33984,"line_start":888,"line_end":888,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":33989,"byte_end":34027,"line_start":889,"line_end":889,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(NaiveDate::from_ymd(1970, 1, 1).num_days_from_ce(), 719163);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":34032,"byte_end":34107,"line_start":890,"line_end":890,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(NaiveDate::from_ymd(0, 1, 1).num_days_from_ce(), -365);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":34112,"byte_end":34182,"line_start":891,"line_end":891,"column_start":5,"column_end":75}},{"value":"/ ~~~","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":34187,"byte_end":34194,"line_start":892,"line_end":892,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":1316},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":34753,"byte_end":34761,"line_start":909,"line_end":909,"column_start":11,"column_end":19},"name":"Timelike","qualname":"::Timelike","value":"Timelike: Sized","parent":null,"children":[{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1319},{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1326}],"decl_id":null,"docs":" The common set of methods for time component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for time component.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":34693,"byte_end":34742,"line_start":908,"line_end":908,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1317},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":34824,"byte_end":34828,"line_start":911,"line_end":911,"column_start":8,"column_end":12},"name":"hour","qualname":"::Timelike::hour","value":"fn (&self) -> u32","parent":{"krate":0,"index":1316},"children":[],"decl_id":null,"docs":" Returns the hour number from 0 to 23.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 0 to 23.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":34775,"byte_end":34816,"line_start":910,"line_end":910,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1318},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":34979,"byte_end":34985,"line_start":916,"line_end":916,"column_start":8,"column_end":14},"name":"hour12","qualname":"::Timelike::hour12","value":"fn (&self) -> (bool, u32)","parent":{"krate":0,"index":1316},"children":[],"decl_id":null,"docs":" Returns the hour number from 1 to 12 with a boolean flag,\n which is false for AM and true for PM.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 1 to 12 with a boolean flag,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":34849,"byte_end":34910,"line_start":913,"line_end":913,"column_start":5,"column_end":66}},{"value":"/ which is false for AM and true for PM.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":34915,"byte_end":34957,"line_start":914,"line_end":914,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":34962,"byte_end":34971,"line_start":915,"line_end":915,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1319},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":35229,"byte_end":35235,"line_start":926,"line_end":926,"column_start":8,"column_end":14},"name":"minute","qualname":"::Timelike::minute","value":"fn (&self) -> u32","parent":{"krate":0,"index":1316},"children":[],"decl_id":null,"docs":" Returns the minute number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the minute number from 0 to 59.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":35178,"byte_end":35221,"line_start":925,"line_end":925,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1320},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":35307,"byte_end":35313,"line_start":929,"line_end":929,"column_start":8,"column_end":14},"name":"second","qualname":"::Timelike::second","value":"fn (&self) -> u32","parent":{"krate":0,"index":1316},"children":[],"decl_id":null,"docs":" Returns the second number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the second number from 0 to 59.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":35256,"byte_end":35299,"line_start":928,"line_end":928,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1321},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":35556,"byte_end":35566,"line_start":934,"line_end":934,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"::Timelike::nanosecond","value":"fn (&self) -> u32","parent":{"krate":0,"index":1316},"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the whole non-leap second.\n The range from 1,000,000,000 to 1,999,999,999 represents\n the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).\n","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the whole non-leap second.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":35334,"byte_end":35404,"line_start":931,"line_end":931,"column_start":5,"column_end":75}},{"value":"/ The range from 1,000,000,000 to 1,999,999,999 represents","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":35409,"byte_end":35469,"line_start":932,"line_end":932,"column_start":5,"column_end":65}},{"value":"/ the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":35474,"byte_end":35548,"line_start":933,"line_end":933,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1322},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":35720,"byte_end":35729,"line_start":939,"line_end":939,"column_start":8,"column_end":17},"name":"with_hour","qualname":"::Timelike::with_hour","value":"fn (&self, hour: u32) -> Option<Self>","parent":{"krate":0,"index":1316},"children":[],"decl_id":null,"docs":" Makes a new value with the hour number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the hour number changed.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":35587,"byte_end":35638,"line_start":936,"line_end":936,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":35643,"byte_end":35646,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":35651,"byte_end":35712,"line_start":938,"line_end":938,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":35905,"byte_end":35916,"line_start":944,"line_end":944,"column_start":8,"column_end":19},"name":"with_minute","qualname":"::Timelike::with_minute","value":"fn (&self, min: u32) -> Option<Self>","parent":{"krate":0,"index":1316},"children":[],"decl_id":null,"docs":" Makes a new value with the minute number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the minute number changed.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":35770,"byte_end":35823,"line_start":941,"line_end":941,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":35828,"byte_end":35831,"line_start":942,"line_end":942,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":35836,"byte_end":35897,"line_start":943,"line_end":943,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1324},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":36203,"byte_end":36214,"line_start":951,"line_end":951,"column_start":8,"column_end":19},"name":"with_second","qualname":"::Timelike::with_second","value":"fn (&self, sec: u32) -> Option<Self>","parent":{"krate":0,"index":1316},"children":[],"decl_id":null,"docs":" Makes a new value with the second number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the second number changed.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":35956,"byte_end":36009,"line_start":946,"line_end":946,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":36014,"byte_end":36017,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":36022,"byte_end":36083,"line_start":948,"line_end":948,"column_start":5,"column_end":66}},{"value":"/ As with the [`second`](#tymethod.second) method,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":36088,"byte_end":36140,"line_start":949,"line_end":949,"column_start":5,"column_end":57}},{"value":"/ the input range is restricted to 0 through 59.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":36145,"byte_end":36195,"line_start":950,"line_end":950,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1325},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":36547,"byte_end":36562,"line_start":958,"line_end":958,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"::Timelike::with_nanosecond","value":"fn (&self, nano: u32) -> Option<Self>","parent":{"krate":0,"index":1316},"children":[],"decl_id":null,"docs":" Makes a new value with nanoseconds since the whole non-leap second changed.","sig":null,"attributes":[{"value":"/ Makes a new value with nanoseconds since the whole non-leap second changed.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":36254,"byte_end":36333,"line_start":953,"line_end":953,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":36338,"byte_end":36341,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":36346,"byte_end":36407,"line_start":955,"line_end":955,"column_start":5,"column_end":66}},{"value":"/ As with the [`nanosecond`](#tymethod.nanosecond) method,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":36412,"byte_end":36472,"line_start":956,"line_end":956,"column_start":5,"column_end":65}},{"value":"/ the input range can exceed 1,000,000,000 for leap seconds.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":36477,"byte_end":36539,"line_start":957,"line_end":957,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":36691,"byte_end":36716,"line_start":962,"line_end":962,"column_start":8,"column_end":33},"name":"num_seconds_from_midnight","qualname":"::Timelike::num_seconds_from_midnight","value":"fn (&self) -> u32","parent":{"krate":0,"index":1316},"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds past the last midnight.\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds past the last midnight.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":36603,"byte_end":36669,"line_start":960,"line_end":960,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":36674,"byte_end":36683,"line_start":961,"line_end":961,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":40939,"byte_end":40950,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":42030,"byte_end":42041,"line_start":67,"line_end":67,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":45233,"byte_end":45244,"line_start":141,"line_end":141,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57715,"byte_end":57718,"line_start":36,"line_end":36,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":58129,"byte_end":58132,"line_start":48,"line_end":48,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":58616,"byte_end":58619,"line_start":64,"line_end":64,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":58703,"byte_end":58706,"line_start":68,"line_end":68,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":58810,"byte_end":58813,"line_start":72,"line_end":72,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":59678,"byte_end":59689,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":62218,"byte_end":62229,"line_start":99,"line_end":99,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":62781,"byte_end":62792,"line_start":115,"line_end":115,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":62861,"byte_end":62872,"line_start":119,"line_end":119,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":63366,"byte_end":63377,"line_start":133,"line_end":133,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":64126,"byte_end":64135,"line_start":151,"line_end":151,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":64323,"byte_end":64332,"line_start":160,"line_end":160,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":64521,"byte_end":64534,"line_start":169,"line_end":169,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":64730,"byte_end":64743,"line_start":178,"line_end":178,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":64954,"byte_end":64962,"line_start":187,"line_end":187,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":65174,"byte_end":65182,"line_start":196,"line_end":196,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":204},{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":69061,"byte_end":69066,"line_start":83,"line_end":83,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":69376,"byte_end":69381,"line_start":95,"line_end":95,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/internals.rs","byte_start":78650,"byte_end":78659,"line_start":110,"line_end":110,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/internals.rs","byte_start":79436,"byte_end":79445,"line_start":143,"line_end":143,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":285}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/internals.rs","byte_start":87838,"byte_end":87840,"line_start":280,"line_end":280,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/internals.rs","byte_start":89874,"byte_end":89876,"line_start":365,"line_end":365,"column_start":21,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/internals.rs","byte_start":90420,"byte_end":90423,"line_start":381,"line_end":381,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/internals.rs","byte_start":92296,"byte_end":92299,"line_start":462,"line_end":462,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":110118,"byte_end":110127,"line_start":125,"line_end":125,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":143683,"byte_end":143692,"line_start":963,"line_end":963,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":156024,"byte_end":156033,"line_start":1330,"line_end":1330,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":428},{"krate":0,"index":429}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":156252,"byte_end":156261,"line_start":1339,"line_end":1339,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":157672,"byte_end":157681,"line_start":1372,"line_end":1372,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":157900,"byte_end":157909,"line_start":1381,"line_end":1381,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":159166,"byte_end":159175,"line_start":1415,"line_end":1415,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":438},{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":160164,"byte_end":160173,"line_start":1446,"line_end":1446,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":161428,"byte_end":161437,"line_start":1481,"line_end":1481,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":162027,"byte_end":162036,"line_start":1501,"line_end":1501,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":190657,"byte_end":190664,"line_start":46,"line_end":46,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":193206,"byte_end":193213,"line_start":128,"line_end":128,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":201922,"byte_end":201931,"line_start":180,"line_end":180,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":504},{"krate":0,"index":507},{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":226071,"byte_end":226080,"line_start":779,"line_end":779,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":233294,"byte_end":233303,"line_start":985,"line_end":985,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":521}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":236310,"byte_end":236319,"line_start":1050,"line_end":1050,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":236500,"byte_end":236509,"line_start":1059,"line_end":1059,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":239108,"byte_end":239117,"line_start":1120,"line_end":1120,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":529},{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":239298,"byte_end":239307,"line_start":1129,"line_end":1129,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":241842,"byte_end":241851,"line_start":1187,"line_end":1187,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":243235,"byte_end":243244,"line_start":1224,"line_end":1224,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":245098,"byte_end":245107,"line_start":1274,"line_end":1274,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":245867,"byte_end":245876,"line_start":1297,"line_end":1297,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":541},{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266561,"byte_end":266574,"line_start":56,"line_end":56,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":599}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":292467,"byte_end":292480,"line_start":680,"line_end":680,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":613},{"krate":0,"index":615},{"krate":0,"index":617},{"krate":0,"index":619},{"krate":0,"index":621},{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":303536,"byte_end":303549,"line_start":998,"line_end":998,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":632},{"krate":0,"index":634},{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":309810,"byte_end":309823,"line_start":1171,"line_end":1171,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":312438,"byte_end":312451,"line_start":1233,"line_end":1233,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":642},{"krate":0,"index":643}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":312682,"byte_end":312695,"line_start":1242,"line_end":1242,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":645}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":315202,"byte_end":315215,"line_start":1303,"line_end":1303,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":647},{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":315446,"byte_end":315459,"line_start":1312,"line_end":1312,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":317397,"byte_end":317410,"line_start":1365,"line_end":1365,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":652},{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":318614,"byte_end":318627,"line_start":1401,"line_end":1401,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":655}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":319719,"byte_end":319732,"line_start":1432,"line_end":1432,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":320470,"byte_end":320483,"line_start":1454,"line_end":1454,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":659},{"krate":0,"index":660}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":358583,"byte_end":358587,"line_start":52,"line_end":52,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":726},{"krate":0,"index":727}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":366705,"byte_end":366709,"line_start":256,"line_end":256,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":734},{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":367418,"byte_end":367422,"line_start":273,"line_end":273,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":752},{"krate":0,"index":754},{"krate":0,"index":756},{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":369113,"byte_end":369117,"line_start":321,"line_end":321,"column_start":29,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":369197,"byte_end":369201,"line_start":322,"line_end":322,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":369306,"byte_end":369310,"line_start":324,"line_end":324,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":369418,"byte_end":369422,"line_start":328,"line_end":328,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":369466,"byte_end":369470,"line_start":331,"line_end":331,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":776}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":369622,"byte_end":369626,"line_start":337,"line_end":337,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":369749,"byte_end":369753,"line_start":341,"line_end":341,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":369880,"byte_end":369884,"line_start":345,"line_end":345,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":786},{"krate":0,"index":787}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":370108,"byte_end":370112,"line_start":354,"line_end":354,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":790},{"krate":0,"index":791}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":370333,"byte_end":370337,"line_start":363,"line_end":363,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":794},{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":370522,"byte_end":370526,"line_start":372,"line_end":372,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":370700,"byte_end":370704,"line_start":378,"line_end":378,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":372968,"byte_end":372976,"line_start":63,"line_end":63,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":861},{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":379294,"byte_end":379302,"line_start":244,"line_end":244,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":381617,"byte_end":381625,"line_start":293,"line_end":293,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":875},{"krate":0,"index":877},{"krate":0,"index":879},{"krate":0,"index":884},{"krate":0,"index":887}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":385866,"byte_end":385874,"line_start":397,"line_end":397,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":906},{"krate":0,"index":908},{"krate":0,"index":910},{"krate":0,"index":912}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":387587,"byte_end":387595,"line_start":444,"line_end":444,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":922},{"krate":0,"index":924},{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":388571,"byte_end":388579,"line_start":472,"line_end":472,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":388659,"byte_end":388667,"line_start":473,"line_end":473,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":388776,"byte_end":388784,"line_start":475,"line_end":475,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":935}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":388904,"byte_end":388912,"line_start":479,"line_end":479,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":388956,"byte_end":388964,"line_start":482,"line_end":482,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":940}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":389128,"byte_end":389136,"line_start":488,"line_end":488,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":943}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":389271,"byte_end":389279,"line_start":492,"line_end":492,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":946}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":389410,"byte_end":389418,"line_start":496,"line_end":496,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":950},{"krate":0,"index":951}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":389654,"byte_end":389662,"line_start":505,"line_end":505,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":954},{"krate":0,"index":955}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":389899,"byte_end":389907,"line_start":514,"line_end":514,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":958},{"krate":0,"index":959}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":390096,"byte_end":390104,"line_start":523,"line_end":523,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":962}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":390278,"byte_end":390286,"line_start":529,"line_end":529,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":965}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":390474,"byte_end":390482,"line_start":535,"line_end":535,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":967},{"krate":0,"index":968}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":391682,"byte_end":391690,"line_start":562,"line_end":562,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":971},{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":391914,"byte_end":391922,"line_start":571,"line_end":571,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":975},{"krate":0,"index":976}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":392132,"byte_end":392140,"line_start":579,"line_end":579,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":979}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":392775,"byte_end":392783,"line_start":598,"line_end":598,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":392947,"byte_end":392957,"line_start":604,"line_end":604,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":438581,"byte_end":438596,"line_start":119,"line_end":119,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1010}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":438686,"byte_end":438701,"line_start":125,"line_end":125,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1012}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":438807,"byte_end":438822,"line_start":131,"line_end":131,"column_start":13,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":438848,"byte_end":438863,"line_start":134,"line_end":134,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1015}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":445869,"byte_end":445879,"line_start":306,"line_end":306,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1026}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":445999,"byte_end":446009,"line_start":312,"line_end":312,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":465896,"byte_end":465902,"line_start":124,"line_end":124,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1115}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":466398,"byte_end":466404,"line_start":137,"line_end":137,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1137},{"krate":0,"index":1138},{"krate":0,"index":1139},{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/strftime.rs","byte_start":576461,"byte_end":576474,"line_start":172,"line_end":172,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1243}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/strftime.rs","byte_start":576793,"byte_end":576806,"line_start":182,"line_end":182,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1249},{"krate":0,"index":1250}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":459384,"byte_end":459397,"line_start":568,"line_end":568,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1260},{"krate":0,"index":1261}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":460165,"byte_end":460178,"line_start":583,"line_end":583,"column_start":63,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":1266}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":461067,"byte_end":461074,"line_start":615,"line_end":615,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1268},{"krate":0,"index":1269}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":592583,"byte_end":592584,"line_start":41,"line_end":41,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1281},{"krate":0,"index":1282}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22494,"byte_end":22501,"line_start":530,"line_end":530,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1285},{"krate":0,"index":1286},{"krate":0,"index":1287},{"krate":0,"index":1288},{"krate":0,"index":1289},{"krate":0,"index":1290}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":26757,"byte_end":26764,"line_start":643,"line_end":643,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1292},{"krate":0,"index":1293}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":27702,"byte_end":27719,"line_start":681,"line_end":681,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1296}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":20242,"byte_end":20248,"line_start":452,"line_end":452,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":58}},{"kind":"Mod","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":21428,"byte_end":21434,"line_start":490,"line_end":490,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":986}},{"kind":"Mod","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":458812,"byte_end":458820,"line_start":552,"line_end":552,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1233}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":40939,"byte_end":40950,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1327},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":42030,"byte_end":42041,"line_start":67,"line_end":67,"column_start":20,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1327},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":45233,"byte_end":45244,"line_start":141,"line_end":141,"column_start":21,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1327},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":45705,"byte_end":45710,"line_start":155,"line_end":155,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1908},"to":{"krate":0,"index":91}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":45713,"byte_end":45718,"line_start":155,"line_end":155,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1604},"to":{"krate":0,"index":91}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":45726,"byte_end":45731,"line_start":155,"line_end":155,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":6176},"to":{"krate":0,"index":91}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46021,"byte_end":46026,"line_start":164,"line_end":164,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1908},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/mod.rs","byte_start":46029,"byte_end":46034,"line_start":164,"line_end":164,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1604},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":57715,"byte_end":57718,"line_start":36,"line_end":36,"column_start":6,"column_end":9},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":58129,"byte_end":58132,"line_start":48,"line_end":48,"column_start":19,"column_end":22},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1350},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":58616,"byte_end":58619,"line_start":64,"line_end":64,"column_start":17,"column_end":20},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1350},"to":{"krate":0,"index":91}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":58703,"byte_end":58706,"line_start":68,"line_end":68,"column_start":21,"column_end":24},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1350},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/utc.rs","byte_start":58810,"byte_end":58813,"line_start":72,"line_end":72,"column_start":23,"column_end":26},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1350},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":59678,"byte_end":59689,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":62218,"byte_end":62229,"line_start":99,"line_end":99,"column_start":19,"column_end":30},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1361},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":62781,"byte_end":62792,"line_start":115,"line_end":115,"column_start":17,"column_end":28},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1361},"to":{"krate":0,"index":91}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":62861,"byte_end":62872,"line_start":119,"line_end":119,"column_start":21,"column_end":32},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1361},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":63366,"byte_end":63377,"line_start":133,"line_end":133,"column_start":23,"column_end":34},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1361},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":64126,"byte_end":64135,"line_start":151,"line_end":151,"column_start":27,"column_end":36},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1471},"to":{"krate":2,"index":1968}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":64323,"byte_end":64332,"line_start":160,"line_end":160,"column_start":27,"column_end":36},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1471},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":64521,"byte_end":64534,"line_start":169,"line_end":169,"column_start":27,"column_end":40},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1496},"to":{"krate":2,"index":1968}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":64730,"byte_end":64743,"line_start":178,"line_end":178,"column_start":27,"column_end":40},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1496},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":64954,"byte_end":64962,"line_start":187,"line_end":187,"column_start":41,"column_end":49},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1552},"to":{"krate":2,"index":1968}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/fixed.rs","byte_start":65174,"byte_end":65182,"line_start":196,"line_end":196,"column_start":41,"column_end":49},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1552},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":69061,"byte_end":69066,"line_start":83,"line_end":83,"column_start":6,"column_end":11},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/offset/local.rs","byte_start":69376,"byte_end":69381,"line_start":95,"line_end":95,"column_start":19,"column_end":24},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1376},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/internals.rs","byte_start":78650,"byte_end":78659,"line_start":110,"line_end":110,"column_start":6,"column_end":15},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/internals.rs","byte_start":79436,"byte_end":79445,"line_start":143,"line_end":143,"column_start":21,"column_end":30},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1383},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/internals.rs","byte_start":87838,"byte_end":87840,"line_start":280,"line_end":280,"column_start":6,"column_end":8},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1396},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/internals.rs","byte_start":89874,"byte_end":89876,"line_start":365,"line_end":365,"column_start":21,"column_end":23},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1396},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/internals.rs","byte_start":90420,"byte_end":90423,"line_start":381,"line_end":381,"column_start":6,"column_end":9},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1412},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/internals.rs","byte_start":92296,"byte_end":92299,"line_start":462,"line_end":462,"column_start":21,"column_end":24},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1412},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":110118,"byte_end":110127,"line_start":125,"line_end":125,"column_start":6,"column_end":15},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1428},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":143683,"byte_end":143692,"line_start":963,"line_end":963,"column_start":19,"column_end":28},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1428},"to":{"krate":0,"index":1297}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":156024,"byte_end":156033,"line_start":1330,"line_end":1330,"column_start":27,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1428},"to":{"krate":2,"index":1968}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":156252,"byte_end":156261,"line_start":1339,"line_end":1339,"column_start":33,"column_end":42},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1428},"to":{"krate":2,"index":1999}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":157672,"byte_end":157681,"line_start":1372,"line_end":1372,"column_start":27,"column_end":36},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1428},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":157900,"byte_end":157909,"line_start":1381,"line_end":1381,"column_start":33,"column_end":42},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1428},"to":{"krate":2,"index":2003}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":159166,"byte_end":159175,"line_start":1415,"line_end":1415,"column_start":25,"column_end":34},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1428},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":160164,"byte_end":160173,"line_start":1446,"line_end":1446,"column_start":21,"column_end":30},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1428},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":161428,"byte_end":161437,"line_start":1481,"line_end":1481,"column_start":23,"column_end":32},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1428},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/date.rs","byte_start":162027,"byte_end":162036,"line_start":1501,"line_end":1501,"column_start":23,"column_end":32},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1428},"to":{"krate":2,"index":7699}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":190657,"byte_end":190664,"line_start":46,"line_end":46,"column_start":6,"column_end":13},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/isoweek.rs","byte_start":193206,"byte_end":193213,"line_start":128,"line_end":128,"column_start":21,"column_end":28},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1451},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":201922,"byte_end":201931,"line_start":180,"line_end":180,"column_start":6,"column_end":15},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1471},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":226071,"byte_end":226080,"line_start":779,"line_end":779,"column_start":19,"column_end":28},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1471},"to":{"krate":0,"index":1316}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":233294,"byte_end":233303,"line_start":985,"line_end":985,"column_start":21,"column_end":30},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1471},"to":{"krate":2,"index":6364}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":236310,"byte_end":236319,"line_start":1050,"line_end":1050,"column_start":27,"column_end":36},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1471},"to":{"krate":2,"index":1968}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":236500,"byte_end":236509,"line_start":1059,"line_end":1059,"column_start":33,"column_end":42},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1471},"to":{"krate":2,"index":1999}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":239108,"byte_end":239117,"line_start":1120,"line_end":1120,"column_start":27,"column_end":36},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1471},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":239298,"byte_end":239307,"line_start":1129,"line_end":1129,"column_start":33,"column_end":42},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1471},"to":{"krate":2,"index":2003}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":241842,"byte_end":241851,"line_start":1187,"line_end":1187,"column_start":25,"column_end":34},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1471},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":243235,"byte_end":243244,"line_start":1224,"line_end":1224,"column_start":21,"column_end":30},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1471},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":245098,"byte_end":245107,"line_start":1274,"line_end":1274,"column_start":23,"column_end":32},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1471},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/time.rs","byte_start":245867,"byte_end":245876,"line_start":1297,"line_end":1297,"column_start":23,"column_end":32},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1471},"to":{"krate":2,"index":7699}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":266561,"byte_end":266574,"line_start":56,"line_end":56,"column_start":6,"column_end":19},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1496},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":292467,"byte_end":292480,"line_start":680,"line_end":680,"column_start":19,"column_end":32},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1496},"to":{"krate":0,"index":1297}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":303536,"byte_end":303549,"line_start":998,"line_end":998,"column_start":19,"column_end":32},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1496},"to":{"krate":0,"index":1316}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":309810,"byte_end":309823,"line_start":1171,"line_end":1171,"column_start":21,"column_end":34},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1496},"to":{"krate":2,"index":6364}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":312438,"byte_end":312451,"line_start":1233,"line_end":1233,"column_start":27,"column_end":40},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1496},"to":{"krate":2,"index":1968}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":312682,"byte_end":312695,"line_start":1242,"line_end":1242,"column_start":33,"column_end":46},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1496},"to":{"krate":2,"index":1999}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":315202,"byte_end":315215,"line_start":1303,"line_end":1303,"column_start":27,"column_end":40},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1496},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":315446,"byte_end":315459,"line_start":1312,"line_end":1312,"column_start":33,"column_end":46},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1496},"to":{"krate":2,"index":2003}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":317397,"byte_end":317410,"line_start":1365,"line_end":1365,"column_start":29,"column_end":42},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1496},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":318614,"byte_end":318627,"line_start":1401,"line_end":1401,"column_start":21,"column_end":34},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1496},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":319719,"byte_end":319732,"line_start":1432,"line_end":1432,"column_start":23,"column_end":36},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1496},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/naive/datetime.rs","byte_start":320470,"byte_end":320483,"line_start":1454,"line_end":1454,"column_start":23,"column_end":36},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1496},"to":{"krate":2,"index":7699}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":358583,"byte_end":358587,"line_start":52,"line_end":52,"column_start":20,"column_end":24},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1521},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":366705,"byte_end":366709,"line_start":256,"line_end":256,"column_start":20,"column_end":24},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1521},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":367418,"byte_end":367422,"line_start":273,"line_end":273,"column_start":33,"column_end":37},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1521},"to":{"krate":0,"index":1297}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":369113,"byte_end":369117,"line_start":321,"line_end":321,"column_start":29,"column_end":33},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1521},"to":{"krate":2,"index":1913}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":369197,"byte_end":369201,"line_start":322,"line_end":322,"column_start":36,"column_end":40},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1521},"to":{"krate":2,"index":1903}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":369306,"byte_end":369310,"line_start":324,"line_end":324,"column_start":60,"column_end":64},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1521},"to":{"krate":2,"index":1632}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":369418,"byte_end":369422,"line_start":328,"line_end":328,"column_start":27,"column_end":31},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1521},"to":{"krate":2,"index":1637}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":369466,"byte_end":369470,"line_start":331,"line_end":331,"column_start":35,"column_end":39},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1521},"to":{"krate":2,"index":1669}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":369622,"byte_end":369626,"line_start":337,"line_end":337,"column_start":28,"column_end":32},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1521},"to":{"krate":2,"index":1658}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":369749,"byte_end":369753,"line_start":341,"line_end":341,"column_start":35,"column_end":39},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1521},"to":{"krate":2,"index":6364}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":369880,"byte_end":369884,"line_start":345,"line_end":345,"column_start":41,"column_end":45},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1521},"to":{"krate":2,"index":1968}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":370108,"byte_end":370112,"line_start":354,"line_end":354,"column_start":41,"column_end":45},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1521},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":370333,"byte_end":370337,"line_start":363,"line_end":363,"column_start":38,"column_end":42},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1521},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":370522,"byte_end":370526,"line_start":372,"line_end":372,"column_start":35,"column_end":39},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1521},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/date.rs","byte_start":370700,"byte_end":370704,"line_start":378,"line_end":378,"column_start":37,"column_end":41},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1521},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":372968,"byte_end":372976,"line_start":63,"line_end":63,"column_start":20,"column_end":28},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1552},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":379294,"byte_end":379302,"line_start":244,"line_end":244,"column_start":6,"column_end":14},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1552},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":381617,"byte_end":381625,"line_start":293,"line_end":293,"column_start":20,"column_end":28},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1552},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":385866,"byte_end":385874,"line_start":397,"line_end":397,"column_start":33,"column_end":41},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1552},"to":{"krate":0,"index":1297}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":387587,"byte_end":387595,"line_start":444,"line_end":444,"column_start":33,"column_end":41},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1552},"to":{"krate":0,"index":1316}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":388571,"byte_end":388579,"line_start":472,"line_end":472,"column_start":29,"column_end":37},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1552},"to":{"krate":2,"index":1913}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":388659,"byte_end":388667,"line_start":473,"line_end":473,"column_start":36,"column_end":44},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1552},"to":{"krate":2,"index":1903}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":388776,"byte_end":388784,"line_start":475,"line_end":475,"column_start":64,"column_end":72},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1552},"to":{"krate":2,"index":1632}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":388904,"byte_end":388912,"line_start":479,"line_end":479,"column_start":27,"column_end":35},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1552},"to":{"krate":2,"index":1637}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":388956,"byte_end":388964,"line_start":482,"line_end":482,"column_start":35,"column_end":43},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1552},"to":{"krate":2,"index":1669}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":389128,"byte_end":389136,"line_start":488,"line_end":488,"column_start":28,"column_end":36},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1552},"to":{"krate":2,"index":1658}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":389271,"byte_end":389279,"line_start":492,"line_end":492,"column_start":35,"column_end":43},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1552},"to":{"krate":2,"index":6364}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":389410,"byte_end":389418,"line_start":496,"line_end":496,"column_start":41,"column_end":49},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1552},"to":{"krate":2,"index":1968}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":389654,"byte_end":389662,"line_start":505,"line_end":505,"column_start":41,"column_end":49},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1552},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":389899,"byte_end":389907,"line_start":514,"line_end":514,"column_start":42,"column_end":50},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1552},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":390096,"byte_end":390104,"line_start":523,"line_end":523,"column_start":35,"column_end":43},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1552},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":390278,"byte_end":390286,"line_start":529,"line_end":529,"column_start":37,"column_end":45},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1552},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":390474,"byte_end":390482,"line_start":535,"line_end":535,"column_start":23,"column_end":31},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1552},"to":{"krate":2,"index":7699}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":391682,"byte_end":391690,"line_start":562,"line_end":562,"column_start":23,"column_end":31},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1552},"to":{"krate":2,"index":7699}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":391914,"byte_end":391922,"line_start":571,"line_end":571,"column_start":23,"column_end":31},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1552},"to":{"krate":2,"index":7699}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":392132,"byte_end":392140,"line_start":579,"line_end":579,"column_start":27,"column_end":35},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1552},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":392775,"byte_end":392783,"line_start":598,"line_end":598,"column_start":27,"column_end":35},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1552},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/datetime.rs","byte_start":392947,"byte_end":392957,"line_start":604,"line_end":604,"column_start":43,"column_end":53},"kind":{"Impl":{"id":99}},"from":{"krate":1,"index":7751},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":438581,"byte_end":438596,"line_start":119,"line_end":119,"column_start":16,"column_end":31},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1007},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":438686,"byte_end":438701,"line_start":125,"line_end":125,"column_start":20,"column_end":35},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1007},"to":{"krate":2,"index":1632}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":438807,"byte_end":438822,"line_start":131,"line_end":131,"column_start":13,"column_end":28},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1007},"to":{"krate":2,"index":1637}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":438848,"byte_end":438863,"line_start":134,"line_end":134,"column_start":21,"column_end":36},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1007},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":445869,"byte_end":445879,"line_start":306,"line_end":306,"column_start":23,"column_end":33},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1762},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":445999,"byte_end":446009,"line_start":312,"line_end":312,"column_start":16,"column_end":26},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1762},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":465896,"byte_end":465902,"line_start":124,"line_end":124,"column_start":18,"column_end":24},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1803},"to":{"krate":2,"index":1893}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/parsed.rs","byte_start":466398,"byte_end":466404,"line_start":137,"line_end":137,"column_start":6,"column_end":12},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1803},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/strftime.rs","byte_start":576461,"byte_end":576474,"line_start":172,"line_end":172,"column_start":10,"column_end":23},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1836},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/strftime.rs","byte_start":576793,"byte_end":576806,"line_start":182,"line_end":182,"column_start":23,"column_end":36},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1836},"to":{"krate":2,"index":4965}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":459384,"byte_end":459397,"line_start":568,"line_end":568,"column_start":46,"column_end":59},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":460165,"byte_end":460178,"line_start":583,"line_end":583,"column_start":63,"column_end":76},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1855},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/format/mod.rs","byte_start":461067,"byte_end":461074,"line_start":615,"line_end":615,"column_start":18,"column_end":25},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1864},"to":{"krate":2,"index":7699}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/round.rs","byte_start":592583,"byte_end":592584,"line_start":41,"line_end":41,"column_start":25,"column_end":26},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1280},"to":{"krate":0,"index":1276}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":22494,"byte_end":22501,"line_start":530,"line_end":530,"column_start":6,"column_end":13},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1864},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":26757,"byte_end":26764,"line_start":643,"line_end":643,"column_start":36,"column_end":43},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1864},"to":{"krate":18,"index":143}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":27702,"byte_end":27719,"line_start":681,"line_end":681,"column_start":21,"column_end":38},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1900},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":30788,"byte_end":30793,"line_start":796,"line_end":796,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1908},"to":{"krate":0,"index":1297}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.6/src/lib.rs","byte_start":34763,"byte_end":34768,"line_start":909,"line_end":909,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1908},"to":{"krate":0,"index":1316}}]}