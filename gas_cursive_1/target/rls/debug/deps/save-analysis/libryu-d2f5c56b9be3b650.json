{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6","program":"/home/raz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","ryu","/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","-C","metadata=d2f5c56b9be3b650","-C","extra-filename=-d2f5c56b9be3b650","--out-dir","/home/raz/code_projects/keep_projects/gas_cursive_1/target/rls/debug/deps","-L","dependency=/home/raz/code_projects/keep_projects/gas_cursive_1/target/rls/debug/deps","--cap-lints","allow","--cfg","integer128","--cfg","must_use_return","--error-format=json","--sysroot","/home/raz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/raz/code_projects/keep_projects/gas_cursive_1/target/rls/debug/deps/libryu-d2f5c56b9be3b650.rmeta"},"prelude":{"crate_id":{"name":"ryu","disambiguator":[17382988936951707917,11117599603935650383]},"crate_root":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src","external_crates":[{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[14168888756904427512,16776303916459465465]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[17407741297230913278,16283799328799007365]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4492142733197306814,14151866605630611617]}}],"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":0,"byte_end":1948,"line_start":1,"line_end":66,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":123},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":1768,"byte_end":1774,"line_start":60,"line_end":60,"column_start":18,"column_end":24},"alias_span":null,"name":"Buffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":16},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":1776,"byte_end":1781,"line_start":60,"line_end":60,"column_start":26,"column_end":31},"alias_span":null,"name":"Float","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":54},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":1898,"byte_end":1912,"line_start":64,"line_end":64,"column_start":18,"column_end":32},"alias_span":null,"name":"d2s_buffered_n","value":"","parent":{"krate":0,"index":120}},{"kind":"Use","ref_id":{"krate":0,"index":94},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":1931,"byte_end":1945,"line_start":65,"line_end":65,"column_start":18,"column_end":32},"alias_span":null,"name":"f2s_buffered_n","value":"","parent":{"krate":0,"index":120}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":0,"byte_end":1948,"line_start":1,"line_end":66,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":25},{"krate":0,"index":31},{"krate":0,"index":55},{"krate":0,"index":60},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":95},{"krate":0,"index":117},{"krate":0,"index":120}],"decl_id":null,"docs":" Pure Rust implementation of Ry큰, an algorithm to quickly convert floating\n point numbers to decimal strings.","sig":null,"attributes":[{"value":"! Pure Rust implementation of Ry큰, an algorithm to quickly convert floating","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":0,"byte_end":78,"line_start":1,"line_end":1,"column_start":1,"column_end":78}},{"value":"! point numbers to decimal strings.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":79,"byte_end":116,"line_start":2,"line_end":2,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":117,"byte_end":120,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! The PLDI'18 paper [*Ry큰: fast float-to-string conversion*][paper] by Ulf","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":121,"byte_end":198,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"! Adams includes a complete correctness proof of the algorithm. The paper is","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":199,"byte_end":277,"line_start":5,"line_end":5,"column_start":1,"column_end":79}},{"value":"! available under the creative commons CC-BY-SA license.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":278,"byte_end":336,"line_start":6,"line_end":6,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":337,"byte_end":340,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! This Rust implementation is a line-by-line port of Ulf Adams' implementation","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":341,"byte_end":421,"line_start":8,"line_end":8,"column_start":1,"column_end":81}},{"value":"! in C, [https://github.com/ulfjack/ryu][upstream]. The [`ryu::raw`][raw]","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":422,"byte_end":497,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"! module exposes exactly the API and formatting of the C implementation as","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":498,"byte_end":574,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"! unsafe pure Rust functions. There is additionally a safe API as demonstrated","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":575,"byte_end":655,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"! in the example code below. The safe API uses the same underlying Ry큰","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":656,"byte_end":729,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"! algorithm but diverges from the formatting of the C implementation to","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":730,"byte_end":803,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"! produce more human-readable output, for example `0.3` rather than `3E-1`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":804,"byte_end":881,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":882,"byte_end":885,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! [paper]: https://dl.acm.org/citation.cfm?id=3192369","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":886,"byte_end":941,"line_start":16,"line_end":16,"column_start":1,"column_end":56}},{"value":"! [upstream]: https://github.com/ulfjack/ryu","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":942,"byte_end":988,"line_start":17,"line_end":17,"column_start":1,"column_end":47}},{"value":"! [raw]: raw/index.html","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":989,"byte_end":1014,"line_start":18,"line_end":18,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":1015,"byte_end":1018,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! # Examples","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":1019,"byte_end":1033,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":1034,"byte_end":1037,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":1038,"byte_end":1049,"line_start":22,"line_end":22,"column_start":1,"column_end":12}},{"value":"! extern crate ryu;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":1050,"byte_end":1071,"line_start":23,"line_end":23,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":1072,"byte_end":1075,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":1076,"byte_end":1091,"line_start":25,"line_end":25,"column_start":1,"column_end":16}},{"value":"!     let mut buffer = ryu::Buffer::new();","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":1092,"byte_end":1136,"line_start":26,"line_end":26,"column_start":1,"column_end":45}},{"value":"!     let printed = buffer.format(1.234);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":1137,"byte_end":1180,"line_start":27,"line_end":27,"column_start":1,"column_end":44}},{"value":"!     assert_eq!(printed, \"1.234\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":1181,"byte_end":1218,"line_start":28,"line_end":28,"column_start":1,"column_end":38}},{"value":"! }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":1219,"byte_end":1224,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":1225,"byte_end":1232,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"no_std","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":1234,"byte_end":1244,"line_start":32,"line_end":32,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":123},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2299,"byte_end":2305,"line_start":18,"line_end":18,"column_start":12,"column_end":18},"name":"Buffer","qualname":"::buffer::Buffer","value":"Buffer {  }","parent":null,"children":[{"krate":0,"index":124}],"decl_id":null,"docs":" Safe API for formatting floating point numbers to text.","sig":null,"attributes":[{"value":"/ Safe API for formatting floating point numbers to text.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2047,"byte_end":2106,"line_start":8,"line_end":8,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2107,"byte_end":2110,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2111,"byte_end":2125,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2126,"byte_end":2129,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2130,"byte_end":2141,"line_start":12,"line_end":12,"column_start":1,"column_end":12}},{"value":"/ let mut buffer = ryu::Buffer::new();","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2142,"byte_end":2182,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"/ let printed = buffer.format(1.234);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2183,"byte_end":2222,"line_start":14,"line_end":14,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(printed, \"1.234\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2223,"byte_end":2256,"line_start":15,"line_end":15,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2257,"byte_end":2264,"line_start":16,"line_end":16,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":11},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2524,"byte_end":2527,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<Buffer>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" This is a cheap operation; you don't need to worry about reusing buffers\n for efficiency.\n","sig":null,"attributes":[{"value":"/ This is a cheap operation; you don't need to worry about reusing buffers","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2350,"byte_end":2426,"line_start":23,"line_end":23,"column_start":5,"column_end":81}},{"value":"/ for efficiency.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2431,"byte_end":2450,"line_start":24,"line_end":24,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2455,"byte_end":2464,"line_start":25,"line_end":25,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":3523,"byte_end":3529,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"format","qualname":"<Buffer>::format","value":"fn <F> (&mut self, f: F) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Print a floating point number into this buffer and return a reference to\n its string representation within the buffer.","sig":null,"attributes":[{"value":"/ Print a floating point number into this buffer and return a reference to","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2630,"byte_end":2706,"line_start":33,"line_end":33,"column_start":5,"column_end":81}},{"value":"/ its string representation within the buffer.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2711,"byte_end":2759,"line_start":34,"line_end":34,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2764,"byte_end":2767,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ # Special cases","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2772,"byte_end":2791,"line_start":36,"line_end":36,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2796,"byte_end":2799,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ This function **does not** check for NaN or infinity. If the input","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2804,"byte_end":2874,"line_start":38,"line_end":38,"column_start":5,"column_end":75}},{"value":"/ number is not a finite float, the printed representation will be some","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2879,"byte_end":2952,"line_start":39,"line_end":39,"column_start":5,"column_end":78}},{"value":"/ correctly formatted but unspecified numerical value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2957,"byte_end":3013,"line_start":40,"line_end":40,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":3018,"byte_end":3021,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ Please check [`is_finite`] yourself before calling this function, or","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":3026,"byte_end":3098,"line_start":42,"line_end":42,"column_start":5,"column_end":77}},{"value":"/ check [`is_nan`] and [`is_infinite`] and handle those cases yourself.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":3103,"byte_end":3176,"line_start":43,"line_end":43,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":3181,"byte_end":3184,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ [`is_finite`]: https://doc.rust-lang.org/std/primitive.f64.html#method.is_finite","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":3189,"byte_end":3273,"line_start":45,"line_end":45,"column_start":5,"column_end":89}},{"value":"/ [`is_nan`]: https://doc.rust-lang.org/std/primitive.f64.html#method.is_nan","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":3278,"byte_end":3356,"line_start":46,"line_end":46,"column_start":5,"column_end":83}},{"value":"/ [`is_infinite`]: https://doc.rust-lang.org/std/primitive.f64.html#method.is_infinite","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":3361,"byte_end":3449,"line_start":47,"line_end":47,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":3454,"byte_end":3463,"line_start":48,"line_end":48,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":16},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":4176,"byte_end":4181,"line_start":73,"line_end":73,"column_start":11,"column_end":16},"name":"Float","qualname":"::buffer::Float","value":"Float: Sealed","parent":null,"children":[{"krate":0,"index":17}],"decl_id":null,"docs":" A floating point number, f32 or f64, that can be written into a\n [`ryu::Buffer`][Buffer].","sig":null,"attributes":[{"value":"/ A floating point number, f32 or f64, that can be written into a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":3972,"byte_end":4039,"line_start":68,"line_end":68,"column_start":1,"column_end":68}},{"value":"/ [`ryu::Buffer`][Buffer].","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":4040,"byte_end":4068,"line_start":69,"line_end":69,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":4069,"byte_end":4072,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed and cannot be implemented for types outside of the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":4073,"byte_end":4148,"line_start":71,"line_end":71,"column_start":1,"column_end":76}},{"value":"/ `ryu` crate.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":4149,"byte_end":4165,"line_start":72,"line_end":72,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":4248,"byte_end":4267,"line_start":76,"line_end":76,"column_start":15,"column_end":34},"name":"write_to_ryu_buffer","qualname":"::buffer::Float::write_to_ryu_buffer","value":"fn (self, result: *mut u8) -> usize","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":22},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":4724,"byte_end":4730,"line_start":95,"line_end":95,"column_start":11,"column_end":17},"name":"Sealed","qualname":"::buffer::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":54},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25813,"byte_end":25827,"line_start":563,"line_end":563,"column_start":15,"column_end":29},"name":"d2s_buffered_n","qualname":"::d2s::d2s_buffered_n","value":"fn (f: f64, result: *mut u8) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Print f64 to the given buffer and return number of bytes written.","sig":null,"attributes":[{"value":"/ Print f64 to the given buffer and return number of bytes written.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25002,"byte_end":25071,"line_start":535,"line_end":535,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25072,"byte_end":25075,"line_start":536,"line_end":536,"column_start":1,"column_end":4}},{"value":"/ At most 24 bytes will be written.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25076,"byte_end":25113,"line_start":537,"line_end":537,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25114,"byte_end":25117,"line_start":538,"line_end":538,"column_start":1,"column_end":4}},{"value":"/ ## Special cases","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25118,"byte_end":25138,"line_start":539,"line_end":539,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25139,"byte_end":25142,"line_start":540,"line_end":540,"column_start":1,"column_end":4}},{"value":"/ This function represents any NaN as `NaN`, positive infinity as `Infinity`,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25143,"byte_end":25222,"line_start":541,"line_end":541,"column_start":1,"column_end":80}},{"value":"/ and negative infinity as `-Infinity`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25223,"byte_end":25264,"line_start":542,"line_end":542,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25265,"byte_end":25268,"line_start":543,"line_end":543,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25269,"byte_end":25282,"line_start":544,"line_end":544,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25283,"byte_end":25286,"line_start":545,"line_end":545,"column_start":1,"column_end":4}},{"value":"/ The `result` pointer argument must point to sufficiently many writable bytes","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25287,"byte_end":25367,"line_start":546,"line_end":546,"column_start":1,"column_end":81}},{"value":"/ to hold Ry큰's representation of `f`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25368,"byte_end":25409,"line_start":547,"line_end":547,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25410,"byte_end":25413,"line_start":548,"line_end":548,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25414,"byte_end":25428,"line_start":549,"line_end":549,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25429,"byte_end":25432,"line_start":550,"line_end":550,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25433,"byte_end":25444,"line_start":551,"line_end":551,"column_start":1,"column_end":12}},{"value":"/ let f = 1.234f64;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25445,"byte_end":25466,"line_start":552,"line_end":552,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25467,"byte_end":25470,"line_start":553,"line_end":553,"column_start":1,"column_end":4}},{"value":"/ unsafe {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25471,"byte_end":25483,"line_start":554,"line_end":554,"column_start":1,"column_end":13}},{"value":"/     let mut buffer: [u8; 24] = std::mem::uninitialized();","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25484,"byte_end":25545,"line_start":555,"line_end":555,"column_start":1,"column_end":62}},{"value":"/     let n = ryu::raw::d2s_buffered_n(f, &mut buffer[0]);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25546,"byte_end":25606,"line_start":556,"line_end":556,"column_start":1,"column_end":61}},{"value":"/     let s = std::str::from_utf8_unchecked(&buffer[..n]);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25607,"byte_end":25667,"line_start":557,"line_end":557,"column_start":1,"column_end":61}},{"value":"/     assert_eq!(s, \"1.234E0\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25668,"byte_end":25701,"line_start":558,"line_end":558,"column_start":1,"column_end":34}},{"value":"/ }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25702,"byte_end":25707,"line_start":559,"line_end":559,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25708,"byte_end":25715,"line_start":560,"line_end":560,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/d2s.rs","byte_start":25744,"byte_end":25752,"line_start":561,"line_end":561,"column_start":29,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":94},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74689,"byte_end":74703,"line_start":475,"line_end":475,"column_start":15,"column_end":29},"name":"f2s_buffered_n","qualname":"::f2s::f2s_buffered_n","value":"fn (f: f32, result: *mut u8) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Print f32 to the given buffer and return number of bytes written.","sig":null,"attributes":[{"value":"/ Print f32 to the given buffer and return number of bytes written.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":73878,"byte_end":73947,"line_start":447,"line_end":447,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":73948,"byte_end":73951,"line_start":448,"line_end":448,"column_start":1,"column_end":4}},{"value":"/ At most 15 bytes will be written.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":73952,"byte_end":73989,"line_start":449,"line_end":449,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":73990,"byte_end":73993,"line_start":450,"line_end":450,"column_start":1,"column_end":4}},{"value":"/ ## Special cases","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":73994,"byte_end":74014,"line_start":451,"line_end":451,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74015,"byte_end":74018,"line_start":452,"line_end":452,"column_start":1,"column_end":4}},{"value":"/ This function represents any NaN as `NaN`, positive infinity as `Infinity`,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74019,"byte_end":74098,"line_start":453,"line_end":453,"column_start":1,"column_end":80}},{"value":"/ and negative infinity as `-Infinity`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74099,"byte_end":74140,"line_start":454,"line_end":454,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74141,"byte_end":74144,"line_start":455,"line_end":455,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74145,"byte_end":74158,"line_start":456,"line_end":456,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74159,"byte_end":74162,"line_start":457,"line_end":457,"column_start":1,"column_end":4}},{"value":"/ The `result` pointer argument must point to sufficiently many writable bytes","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74163,"byte_end":74243,"line_start":458,"line_end":458,"column_start":1,"column_end":81}},{"value":"/ to hold Ry큰's representation of `f`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74244,"byte_end":74285,"line_start":459,"line_end":459,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74286,"byte_end":74289,"line_start":460,"line_end":460,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74290,"byte_end":74304,"line_start":461,"line_end":461,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74305,"byte_end":74308,"line_start":462,"line_end":462,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74309,"byte_end":74320,"line_start":463,"line_end":463,"column_start":1,"column_end":12}},{"value":"/ let f = 1.234f32;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74321,"byte_end":74342,"line_start":464,"line_end":464,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74343,"byte_end":74346,"line_start":465,"line_end":465,"column_start":1,"column_end":4}},{"value":"/ unsafe {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74347,"byte_end":74359,"line_start":466,"line_end":466,"column_start":1,"column_end":13}},{"value":"/     let mut buffer: [u8; 15] = std::mem::uninitialized();","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74360,"byte_end":74421,"line_start":467,"line_end":467,"column_start":1,"column_end":62}},{"value":"/     let n = ryu::raw::f2s_buffered_n(f, &mut buffer[0]);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74422,"byte_end":74482,"line_start":468,"line_end":468,"column_start":1,"column_end":61}},{"value":"/     let s = std::str::from_utf8_unchecked(&buffer[..n]);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74483,"byte_end":74543,"line_start":469,"line_end":469,"column_start":1,"column_end":61}},{"value":"/     assert_eq!(s, \"1.234E0\");","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74544,"byte_end":74577,"line_start":470,"line_end":470,"column_start":1,"column_end":34}},{"value":"/ }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74578,"byte_end":74583,"line_start":471,"line_end":471,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74584,"byte_end":74591,"line_start":472,"line_end":472,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/f2s.rs","byte_start":74620,"byte_end":74628,"line_start":473,"line_end":473,"column_start":29,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":120},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":1875,"byte_end":1878,"line_start":63,"line_end":63,"column_start":9,"column_end":12},"name":"raw","qualname":"::raw","value":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":121},{"krate":0,"index":122}],"decl_id":null,"docs":" Unsafe functions that exactly mirror the API of the C implementation of Ry큰.\n","sig":null,"attributes":[{"value":"/ Unsafe functions that exactly mirror the API of the C implementation of Ry큰.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/lib.rs","byte_start":1785,"byte_end":1866,"line_start":62,"line_end":62,"column_start":1,"column_end":81}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2337,"byte_end":2343,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":12}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":3843,"byte_end":3849,"line_start":60,"line_end":60,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":15}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":2337,"byte_end":2343,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":123},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":3843,"byte_end":3849,"line_start":60,"line_end":60,"column_start":18,"column_end":24},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":123},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/ryu-0.2.6/src/buffer/mod.rs","byte_start":4183,"byte_end":4189,"line_start":73,"line_end":73,"column_start":18,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":22},"to":{"krate":0,"index":16}}]}