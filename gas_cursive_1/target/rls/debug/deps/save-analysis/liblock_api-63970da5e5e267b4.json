{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4","program":"/home/raz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","lock_api","/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"owning_ref\"","-C","metadata=63970da5e5e267b4","-C","extra-filename=-63970da5e5e267b4","--out-dir","/home/raz/code_projects/keep_projects/gas_cursive_1/target/rls/debug/deps","-L","dependency=/home/raz/code_projects/keep_projects/gas_cursive_1/target/rls/debug/deps","--extern","owning_ref=/home/raz/code_projects/keep_projects/gas_cursive_1/target/rls/debug/deps/libowning_ref-267f47a9fe26a0b0.rmeta","--extern","scopeguard=/home/raz/code_projects/keep_projects/gas_cursive_1/target/rls/debug/deps/libscopeguard-eeb3f4d830a57370.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/raz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/raz/code_projects/keep_projects/gas_cursive_1/target/rls/debug/deps/liblock_api-63970da5e5e267b4.rmeta"},"prelude":{"crate_id":{"name":"lock_api","disambiguator":[18247176831884053221,15300703531073378096]},"crate_root":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src","external_crates":[{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[14168888756904427512,16776303916459465465]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[17407741297230913278,16283799328799007365]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4492142733197306814,14151866605630611617]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","num":4,"id":{"name":"scopeguard","disambiguator":[10803843064322961270,17222625851977101955]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","num":5,"id":{"name":"owning_ref","disambiguator":[4971824143575454474,6795702872838761503]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","num":6,"id":{"name":"std","disambiguator":[10344648486569477446,2454248652556920925]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","num":7,"id":{"name":"alloc","disambiguator":[9785299734546160784,636286335322626912]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","num":8,"id":{"name":"libc","disambiguator":[5680562745065174860,9217186745851755644]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","num":9,"id":{"name":"unwind","disambiguator":[1647702202987759035,15124534591008137148]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","num":10,"id":{"name":"cfg_if","disambiguator":[16711431240759211485,3970175217288203291]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[125532023394459561,9172165323910118991]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[17639569287364244572,9623243733363078576]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[10466182059741283835,56412014413285874]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","num":14,"id":{"name":"hashbrown","disambiguator":[6793855748667116046,87956666511033926]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","num":15,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15647227138251999113,1639002543540862534]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","num":16,"id":{"name":"panic_unwind","disambiguator":[10550792004909319356,1806099500584167781]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","num":17,"id":{"name":"stable_deref_trait","disambiguator":[18198962884365941290,9466889265010732196]}}],"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":333,"byte_end":3973,"line_start":8,"line_end":109,"column_start":1,"column_end":19}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":3868,"byte_end":3869,"line_start":100,"line_end":100,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":3868,"byte_end":3869,"line_start":100,"line_end":100,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":3868,"byte_end":3869,"line_start":100,"line_end":100,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":333,"byte_end":3973,"line_start":8,"line_end":109,"column_start":1,"column_end":19},"name":"","qualname":"::","value":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":789}],"decl_id":null,"docs":" This library provides type-safe and fully-featured `Mutex` and `RwLock`\n types which wrap a simple raw mutex or rwlock type. This has several\n benefits: not only does it eliminate a large portion of the work in\n implementing custom lock types, it also allows users to write code which is\n generic with regards to different lock implementations.","sig":null,"attributes":[{"value":"! This library provides type-safe and fully-featured `Mutex` and `RwLock`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":333,"byte_end":408,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"! types which wrap a simple raw mutex or rwlock type. This has several","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":409,"byte_end":481,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"! benefits: not only does it eliminate a large portion of the work in","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":482,"byte_end":553,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"! implementing custom lock types, it also allows users to write code which is","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":554,"byte_end":633,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"! generic with regards to different lock implementations.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":634,"byte_end":693,"line_start":12,"line_end":12,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":694,"byte_end":697,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! Basic usage of this crate is very straightfoward:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":698,"byte_end":751,"line_start":14,"line_end":14,"column_start":1,"column_end":54}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":752,"byte_end":755,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! 1. Create a raw lock type. This should only contain the lock state, not any","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":756,"byte_end":835,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"!    data protected by the lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":836,"byte_end":870,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"! 2. Implement the `RawMutex` trait for your custom lock type.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":871,"byte_end":935,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"! 3. Export your mutex as a type alias for `lock_api::Mutex`, and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":936,"byte_end":1003,"line_start":19,"line_end":19,"column_start":1,"column_end":68}},{"value":"!    your mutex guard as a type alias for `lock_api::MutexGuard`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1004,"byte_end":1071,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"!    See the [example](#example) below for details.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1072,"byte_end":1125,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1126,"byte_end":1129,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! This process is similar for RwLocks, except that two guards need to be","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1130,"byte_end":1204,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"! exported instead of one. (Or 3 guards if your type supports upgradable read","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1205,"byte_end":1284,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"! locks, see [extension traits](#extension-traits) below for details)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1285,"byte_end":1356,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1357,"byte_end":1360,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1361,"byte_end":1374,"line_start":27,"line_end":27,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1375,"byte_end":1378,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1379,"byte_end":1386,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"! use lock_api::{RawMutex, Mutex, GuardSend};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1387,"byte_end":1434,"line_start":30,"line_end":30,"column_start":1,"column_end":48}},{"value":"! use std::sync::atomic::{AtomicBool, Ordering, ATOMIC_BOOL_INIT};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1435,"byte_end":1503,"line_start":31,"line_end":31,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1504,"byte_end":1507,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! // 1. Define our raw lock type","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1508,"byte_end":1542,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"! pub struct RawSpinlock(AtomicBool);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1543,"byte_end":1582,"line_start":34,"line_end":34,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1583,"byte_end":1586,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"! // 2. Implement RawMutex for this type","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1587,"byte_end":1629,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"! unsafe impl RawMutex for RawSpinlock {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1630,"byte_end":1672,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"!     const INIT: RawSpinlock = RawSpinlock(ATOMIC_BOOL_INIT);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1673,"byte_end":1737,"line_start":38,"line_end":38,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1738,"byte_end":1741,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"!     // A spinlock guard can be sent to another thread and unlocked there","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1742,"byte_end":1818,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"!     type GuardMarker = GuardSend;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1819,"byte_end":1856,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1857,"byte_end":1860,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"!     fn lock(&self) {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1861,"byte_end":1885,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"!         // Note: This isn't the best way of implementing a spinlock, but it","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1886,"byte_end":1965,"line_start":44,"line_end":44,"column_start":1,"column_end":80}},{"value":"!         // suffices for the sake of this example.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":1966,"byte_end":2019,"line_start":45,"line_end":45,"column_start":1,"column_end":54}},{"value":"!         while !self.try_lock() {}","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2020,"byte_end":2057,"line_start":46,"line_end":46,"column_start":1,"column_end":38}},{"value":"!     }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2058,"byte_end":2067,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2068,"byte_end":2071,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"!     fn try_lock(&self) -> bool {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2072,"byte_end":2108,"line_start":49,"line_end":49,"column_start":1,"column_end":37}},{"value":"!         self.0.swap(true, Ordering::Acquire)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2109,"byte_end":2157,"line_start":50,"line_end":50,"column_start":1,"column_end":49}},{"value":"!     }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2158,"byte_end":2167,"line_start":51,"line_end":51,"column_start":1,"column_end":10}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2168,"byte_end":2171,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"!     fn unlock(&self) {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2172,"byte_end":2198,"line_start":53,"line_end":53,"column_start":1,"column_end":27}},{"value":"!         self.0.store(false, Ordering::Release);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2199,"byte_end":2250,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"!     }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2251,"byte_end":2260,"line_start":55,"line_end":55,"column_start":1,"column_end":10}},{"value":"! }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2261,"byte_end":2266,"line_start":56,"line_end":56,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2267,"byte_end":2270,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"! // 3. Export the wrappers. This are the types that your users will actually use.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2271,"byte_end":2355,"line_start":58,"line_end":58,"column_start":1,"column_end":85}},{"value":"! pub type Spinlock<T> = lock_api::Mutex<RawSpinlock, T>;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2356,"byte_end":2415,"line_start":59,"line_end":59,"column_start":1,"column_end":60}},{"value":"! pub type SpinlockGuard<'a, T> = lock_api::MutexGuard<'a, RawSpinlock, T>;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2416,"byte_end":2493,"line_start":60,"line_end":60,"column_start":1,"column_end":78}},{"value":"! ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2494,"byte_end":2501,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2502,"byte_end":2505,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"! # Extension traits","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2506,"byte_end":2528,"line_start":63,"line_end":63,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2529,"byte_end":2532,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"! In addition to basic locking & unlocking functionality, you have the option","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2533,"byte_end":2612,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"! of exposing additional functionality in your lock types by implementing","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2613,"byte_end":2688,"line_start":66,"line_end":66,"column_start":1,"column_end":76}},{"value":"! additional traits for it. Examples of extension features include:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2689,"byte_end":2758,"line_start":67,"line_end":67,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2759,"byte_end":2762,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"! - Fair unlocking (`RawMutexFair`, `RawRwLockFair`)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2763,"byte_end":2817,"line_start":69,"line_end":69,"column_start":1,"column_end":55}},{"value":"! - Lock timeouts (`RawMutexTimed`, `RawRwLockTimed`)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2818,"byte_end":2873,"line_start":70,"line_end":70,"column_start":1,"column_end":56}},{"value":"! - Downgradable write locks (`RawRwLockDowngradable`)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2874,"byte_end":2930,"line_start":71,"line_end":71,"column_start":1,"column_end":57}},{"value":"! - Recursive read locks (`RawRwLockRecursive`)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2931,"byte_end":2980,"line_start":72,"line_end":72,"column_start":1,"column_end":50}},{"value":"! - Upgradable read locks (`RawRwLockUpgrade`)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":2981,"byte_end":3029,"line_start":73,"line_end":73,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":3030,"byte_end":3033,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"! The `Mutex` and `RwLock` wrappers will automatically expose this additional","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":3034,"byte_end":3113,"line_start":75,"line_end":75,"column_start":1,"column_end":80}},{"value":"! functionality if the raw lock type implements these extension traits.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":3114,"byte_end":3187,"line_start":76,"line_end":76,"column_start":1,"column_end":74}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":3188,"byte_end":3191,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"! # Cargo features","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":3192,"byte_end":3212,"line_start":78,"line_end":78,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":3213,"byte_end":3216,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"! This crate supports two cargo features:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":3217,"byte_end":3260,"line_start":80,"line_end":80,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":3261,"byte_end":3264,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"! - `owning_ref`: Allows your lock types to be used with the `owning_ref` crate.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":3265,"byte_end":3347,"line_start":82,"line_end":82,"column_start":1,"column_end":83}},{"value":"! - `nightly`: Enables nightly-only features. At the moment the only such","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":3348,"byte_end":3423,"line_start":83,"line_end":83,"column_start":1,"column_end":76}},{"value":"!   feature is `const fn` constructors for lock types.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":3424,"byte_end":3480,"line_start":84,"line_end":84,"column_start":1,"column_end":57}},{"value":"no_std","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":3482,"byte_end":3492,"line_start":86,"line_end":86,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":3493,"byte_end":3515,"line_start":87,"line_end":87,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":6},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":3751,"byte_end":3760,"line_start":97,"line_end":97,"column_start":12,"column_end":21},"name":"GuardSend","qualname":"::GuardSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is `Send`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":3666,"byte_end":3739,"line_start":96,"line_end":96,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":9},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":3856,"byte_end":3867,"line_start":100,"line_end":100,"column_start":12,"column_end":23},"name":"GuardNoSend","qualname":"::GuardNoSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is not `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is not `Send`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/lib.rs","byte_start":3767,"byte_end":3844,"line_start":99,"line_end":99,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":21},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":4829,"byte_end":4837,"line_start":26,"line_end":26,"column_start":18,"column_end":26},"name":"RawMutex","qualname":"::mutex::RawMutex","value":"RawMutex","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26}],"decl_id":null,"docs":" Basic operations for a mutex.","sig":null,"attributes":[{"value":"/ Basic operations for a mutex.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":4495,"byte_end":4528,"line_start":17,"line_end":17,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":4529,"byte_end":4532,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `Mutex` to form a safe and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":4533,"byte_end":4608,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/ fully-functioning mutex type.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":4609,"byte_end":4642,"line_start":20,"line_end":20,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":4643,"byte_end":4646,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":4647,"byte_end":4659,"line_start":22,"line_end":22,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":4660,"byte_end":4663,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the mutex is actually","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":4664,"byte_end":4736,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/ exclusive: a lock can't be acquired while the mutex is already locked.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":4737,"byte_end":4811,"line_start":25,"line_end":25,"column_start":1,"column_end":75}}]},{"kind":"Const","id":{"krate":0,"index":22},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":4895,"byte_end":4899,"line_start":28,"line_end":28,"column_start":11,"column_end":15},"name":"INIT","qualname":"::mutex::RawMutex::INIT","value":"Self","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked mutex.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":4844,"byte_end":4884,"line_start":27,"line_end":27,"column_start":5,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":23},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":5064,"byte_end":5075,"line_start":32,"line_end":32,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::mutex::RawMutex::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":4912,"byte_end":4987,"line_start":30,"line_end":30,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":4992,"byte_end":5054,"line_start":31,"line_end":31,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":5169,"byte_end":5173,"line_start":35,"line_end":35,"column_start":8,"column_end":12},"name":"lock","qualname":"::mutex::RawMutex::lock","value":"fn (&self) -> ()","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires this mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":5082,"byte_end":5161,"line_start":34,"line_end":34,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":5247,"byte_end":5255,"line_start":38,"line_end":38,"column_start":8,"column_end":16},"name":"try_lock","qualname":"::mutex::RawMutex::try_lock","value":"fn (&self) -> bool","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this mutex without blocking.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":5187,"byte_end":5239,"line_start":37,"line_end":37,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":5308,"byte_end":5314,"line_start":41,"line_end":41,"column_start":8,"column_end":14},"name":"unlock","qualname":"::mutex::RawMutex::unlock","value":"fn (&self) -> ()","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":" Unlocks this mutex.\n","sig":null,"attributes":[{"value":"/ Unlocks this mutex.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":5277,"byte_end":5300,"line_start":40,"line_end":40,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":27},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":5706,"byte_end":5718,"line_start":50,"line_end":50,"column_start":18,"column_end":30},"name":"RawMutexFair","qualname":"::mutex::RawMutexFair","value":"RawMutexFair: RawMutex","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29}],"decl_id":null,"docs":" Additional methods for mutexes which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support fair unlocking.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":5326,"byte_end":5390,"line_start":44,"line_end":44,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":5391,"byte_end":5394,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":5395,"byte_end":5475,"line_start":46,"line_end":46,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":5476,"byte_end":5551,"line_start":47,"line_end":47,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":5552,"byte_end":5626,"line_start":48,"line_end":48,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":5627,"byte_end":5688,"line_start":49,"line_end":49,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":5795,"byte_end":5806,"line_start":52,"line_end":52,"column_start":8,"column_end":19},"name":"unlock_fair","qualname":"::mutex::RawMutexFair::unlock_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Unlocks this mutex using a fair unlock protocol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":5735,"byte_end":5787,"line_start":51,"line_end":51,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":6099,"byte_end":6103,"line_start":59,"line_end":59,"column_start":8,"column_end":12},"name":"bump","qualname":"::mutex::RawMutexFair::bump","value":"fn (&self) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":5820,"byte_end":5889,"line_start":54,"line_end":54,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":5894,"byte_end":5897,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":5902,"byte_end":5978,"line_start":56,"line_end":56,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":5983,"byte_end":6059,"line_start":57,"line_end":57,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":6064,"byte_end":6091,"line_start":58,"line_end":58,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":30},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":6401,"byte_end":6414,"line_start":69,"line_end":69,"column_start":18,"column_end":31},"name":"RawMutexTimed","qualname":"::mutex::RawMutexTimed","value":"RawMutexTimed: RawMutex","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34}],"decl_id":null,"docs":" Additional methods for mutexes which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support locking with timeouts.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":6171,"byte_end":6242,"line_start":65,"line_end":65,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":6243,"byte_end":6246,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":6247,"byte_end":6327,"line_start":67,"line_end":67,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":6328,"byte_end":6383,"line_start":68,"line_end":68,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":31},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":6483,"byte_end":6491,"line_start":71,"line_end":71,"column_start":10,"column_end":18},"name":"Duration","qualname":"::mutex::RawMutexTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":6431,"byte_end":6473,"line_start":70,"line_end":70,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":32},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":6551,"byte_end":6558,"line_start":74,"line_end":74,"column_start":10,"column_end":17},"name":"Instant","qualname":"::mutex::RawMutexTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":6498,"byte_end":6541,"line_start":73,"line_end":73,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":6634,"byte_end":6646,"line_start":77,"line_end":77,"column_start":8,"column_end":20},"name":"try_lock_for","qualname":"::mutex::RawMutexTimed::try_lock_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":6565,"byte_end":6626,"line_start":76,"line_end":76,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":6762,"byte_end":6776,"line_start":80,"line_end":80,"column_start":8,"column_end":22},"name":"try_lock_until","qualname":"::mutex::RawMutexTimed::try_lock_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":6693,"byte_end":6754,"line_start":79,"line_end":79,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":35},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":7330,"byte_end":7335,"line_start":91,"line_end":91,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39}],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[{"value":"/ A mutual exclusion primitive useful for protecting shared data","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":6820,"byte_end":6886,"line_start":83,"line_end":83,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":6887,"byte_end":6890,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ This mutex will block threads waiting for the lock to become available. The","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":6891,"byte_end":6970,"line_start":85,"line_end":85,"column_start":1,"column_end":80}},{"value":"/ mutex can also be statically initialized or created via a `new`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":6971,"byte_end":7038,"line_start":86,"line_end":86,"column_start":1,"column_end":68}},{"value":"/ constructor. Each mutex has a type parameter which represents the data that","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":7039,"byte_end":7118,"line_start":87,"line_end":87,"column_start":1,"column_end":80}},{"value":"/ it is protecting. The data can only be accessed through the RAII guards","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":7119,"byte_end":7194,"line_start":88,"line_end":88,"column_start":1,"column_end":76}},{"value":"/ returned from `lock` and `try_lock`, which guarantees that the data is only","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":7195,"byte_end":7274,"line_start":89,"line_end":89,"column_start":1,"column_end":80}},{"value":"/ ever accessed when the mutex is locked.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":7275,"byte_end":7318,"line_start":90,"line_end":90,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":7967,"byte_end":7970,"line_start":113,"line_end":113,"column_start":12,"column_end":15},"name":"new","qualname":"<Mutex<R, T>>::new","value":"fn (val: T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new mutex in an unlocked state ready for use.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":7845,"byte_end":7904,"line_start":110,"line_end":110,"column_start":5,"column_end":64}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":7909,"byte_end":7941,"line_start":111,"line_end":111,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":7946,"byte_end":7955,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":8208,"byte_end":8218,"line_start":123,"line_end":123,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<R, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":8099,"byte_end":8154,"line_start":120,"line_end":120,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":8159,"byte_end":8168,"line_start":121,"line_end":121,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":8173,"byte_end":8196,"line_start":122,"line_end":122,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":9020,"byte_end":9024,"line_start":147,"line_end":147,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<R, T>>::lock","value":"fn (&self) -> MutexGuard<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutex, blocking the current thread until it is able to do so.","sig":null,"attributes":[{"value":"/ Acquires a mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":8482,"byte_end":8558,"line_start":137,"line_end":137,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":8563,"byte_end":8566,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ This function will block the local thread until it is available to acquire","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":8571,"byte_end":8649,"line_start":139,"line_end":139,"column_start":5,"column_end":83}},{"value":"/ the mutex. Upon returning, the thread is the only thread with the mutex","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":8654,"byte_end":8729,"line_start":140,"line_end":140,"column_start":5,"column_end":80}},{"value":"/ held. An RAII guard is returned to allow scoped unlock of the lock. When","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":8734,"byte_end":8810,"line_start":141,"line_end":141,"column_start":5,"column_end":81}},{"value":"/ the guard goes out of scope, the mutex will be unlocked.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":8815,"byte_end":8875,"line_start":142,"line_end":142,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":8880,"byte_end":8883,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Attempts to lock a mutex in the thread which already holds the lock will","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":8888,"byte_end":8964,"line_start":144,"line_end":144,"column_start":5,"column_end":81}},{"value":"/ result in a deadlock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":8969,"byte_end":8994,"line_start":145,"line_end":145,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":8999,"byte_end":9008,"line_start":146,"line_end":146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":9413,"byte_end":9421,"line_start":160,"line_end":160,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<R, T>>::try_lock","value":"fn (&self) -> Option<MutexGuard<R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":9111,"byte_end":9145,"line_start":152,"line_end":152,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":9150,"byte_end":9153,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":9158,"byte_end":9234,"line_start":154,"line_end":154,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":9239,"byte_end":9315,"line_start":155,"line_end":155,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":9320,"byte_end":9341,"line_start":156,"line_end":156,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":9346,"byte_end":9349,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":9354,"byte_end":9387,"line_start":158,"line_end":158,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":9392,"byte_end":9401,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":9825,"byte_end":9832,"line_start":173,"line_end":173,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<R, T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":9578,"byte_end":9633,"line_start":168,"line_end":168,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":9638,"byte_end":9641,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `Mutex` mutably, no actual locking needs to","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":9646,"byte_end":9721,"line_start":170,"line_end":170,"column_start":5,"column_end":80}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":9726,"byte_end":9799,"line_start":171,"line_end":171,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":9804,"byte_end":9813,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10416,"byte_end":10428,"line_start":189,"line_end":189,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<Mutex<R, T>>::force_unlock","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":9908,"byte_end":9939,"line_start":177,"line_end":177,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":9944,"byte_end":9947,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":9952,"byte_end":10026,"line_start":179,"line_end":179,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10031,"byte_end":10101,"line_start":180,"line_end":180,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10106,"byte_end":10127,"line_start":181,"line_end":181,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10132,"byte_end":10135,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10140,"byte_end":10152,"line_start":183,"line_end":183,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10157,"byte_end":10160,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10165,"byte_end":10239,"line_start":185,"line_end":185,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10244,"byte_end":10313,"line_start":186,"line_end":186,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10318,"byte_end":10383,"line_start":187,"line_end":187,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10388,"byte_end":10397,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10865,"byte_end":10868,"line_start":203,"line_end":203,"column_start":19,"column_end":22},"name":"raw","qualname":"<Mutex<R, T>>::raw","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10476,"byte_end":10520,"line_start":193,"line_end":193,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10525,"byte_end":10528,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10533,"byte_end":10608,"line_start":195,"line_end":195,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10613,"byte_end":10674,"line_start":196,"line_end":196,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10679,"byte_end":10682,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10687,"byte_end":10699,"line_start":198,"line_end":198,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10704,"byte_end":10707,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10712,"byte_end":10779,"line_start":200,"line_end":200,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `MutexGuard`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10784,"byte_end":10832,"line_start":201,"line_end":201,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10837,"byte_end":10846,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":11499,"byte_end":11516,"line_start":221,"line_end":221,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<Mutex<R, T>>::force_unlock_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock procotol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10962,"byte_end":11022,"line_start":209,"line_end":209,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":11027,"byte_end":11030,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":11035,"byte_end":11109,"line_start":211,"line_end":211,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":11114,"byte_end":11184,"line_start":212,"line_end":212,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":11189,"byte_end":11210,"line_start":213,"line_end":213,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":11215,"byte_end":11218,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":11223,"byte_end":11235,"line_start":215,"line_end":215,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":11240,"byte_end":11243,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":11248,"byte_end":11322,"line_start":217,"line_end":217,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":11327,"byte_end":11396,"line_start":218,"line_end":218,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":11401,"byte_end":11466,"line_start":219,"line_end":219,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":11471,"byte_end":11480,"line_start":220,"line_end":220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":11916,"byte_end":11928,"line_start":233,"line_end":233,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<Mutex<R, T>>::try_lock_for","value":"fn (&self, timeout: R::Duration) -> Option<MutexGuard<R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":11619,"byte_end":11680,"line_start":227,"line_end":227,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":11685,"byte_end":11688,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":11693,"byte_end":11763,"line_start":229,"line_end":229,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":11768,"byte_end":11843,"line_start":230,"line_end":230,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":11848,"byte_end":11890,"line_start":231,"line_end":231,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":11895,"byte_end":11904,"line_start":232,"line_end":232,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":12415,"byte_end":12429,"line_start":247,"line_end":247,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<Mutex<R, T>>::try_lock_until","value":"fn (&self, timeout: R::Instant) -> Option<MutexGuard<R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":12118,"byte_end":12179,"line_start":241,"line_end":241,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":12184,"byte_end":12187,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":12192,"byte_end":12262,"line_start":243,"line_end":243,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":12267,"byte_end":12342,"line_start":244,"line_end":244,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":12347,"byte_end":12389,"line_start":245,"line_end":245,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":12394,"byte_end":12403,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":81},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":13513,"byte_end":13523,"line_start":285,"line_end":285,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a mutex. When this structure is","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":13221,"byte_end":13301,"line_start":279,"line_end":279,"column_start":1,"column_end":81}},{"value":"/ dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":13302,"byte_end":13362,"line_start":280,"line_end":280,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":13363,"byte_end":13366,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":13367,"byte_end":13445,"line_start":282,"line_end":282,"column_start":1,"column_end":79}},{"value":"/ `Deref` and `DerefMut` implementations.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":13446,"byte_end":13489,"line_start":283,"line_end":283,"column_start":1,"column_end":44}},{"value":"must_use","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":13490,"byte_end":13501,"line_start":284,"line_end":284,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":13884,"byte_end":13889,"line_start":294,"line_end":294,"column_start":12,"column_end":17},"name":"mutex","qualname":"<MutexGuard>::mutex","value":"fn (s: &Self) -> &'a Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `Mutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `Mutex` object.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":13817,"byte_end":13872,"line_start":293,"line_end":293,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":14354,"byte_end":14357,"line_start":307,"line_end":307,"column_start":12,"column_end":15},"name":"map","qualname":"<MutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedMutexGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":13948,"byte_end":14018,"line_start":298,"line_end":298,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":14023,"byte_end":14026,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":14031,"byte_end":14088,"line_start":300,"line_end":300,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":14093,"byte_end":14125,"line_start":301,"line_end":301,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":14130,"byte_end":14133,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":14138,"byte_end":14189,"line_start":303,"line_end":303,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":14194,"byte_end":14270,"line_start":304,"line_end":304,"column_start":5,"column_end":81}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":14275,"byte_end":14328,"line_start":305,"line_end":305,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":14333,"byte_end":14342,"line_start":306,"line_end":306,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":15187,"byte_end":15194,"line_start":331,"line_end":331,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedMutexGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedMutexGuard` for a component of the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":14701,"byte_end":14770,"line_start":321,"line_end":321,"column_start":5,"column_end":74}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":14775,"byte_end":14851,"line_start":322,"line_end":322,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":14856,"byte_end":14859,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":14864,"byte_end":14921,"line_start":324,"line_end":324,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":14926,"byte_end":14958,"line_start":325,"line_end":325,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":14963,"byte_end":14966,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":14971,"byte_end":15022,"line_start":327,"line_end":327,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":15027,"byte_end":15103,"line_start":328,"line_end":328,"column_start":5,"column_end":81}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":15108,"byte_end":15161,"line_start":329,"line_end":329,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":15166,"byte_end":15175,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":15875,"byte_end":15883,"line_start":353,"line_end":353,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<MutexGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":15649,"byte_end":15713,"line_start":348,"line_end":348,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":15718,"byte_end":15721,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":15726,"byte_end":15794,"line_start":350,"line_end":350,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":15799,"byte_end":15849,"line_start":351,"line_end":351,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":15854,"byte_end":15863,"line_start":352,"line_end":352,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":16899,"byte_end":16910,"line_start":377,"line_end":377,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":16118,"byte_end":16169,"line_start":364,"line_end":364,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":16174,"byte_end":16177,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":16182,"byte_end":16256,"line_start":366,"line_end":366,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":16261,"byte_end":16333,"line_start":367,"line_end":367,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":16338,"byte_end":16412,"line_start":368,"line_end":368,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":16417,"byte_end":16492,"line_start":369,"line_end":369,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":16497,"byte_end":16568,"line_start":370,"line_end":370,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":16573,"byte_end":16630,"line_start":371,"line_end":371,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":16635,"byte_end":16638,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":16643,"byte_end":16719,"line_start":373,"line_end":373,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":16724,"byte_end":16800,"line_start":374,"line_end":374,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":16805,"byte_end":16873,"line_start":375,"line_end":375,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":16878,"byte_end":16887,"line_start":376,"line_end":376,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":17280,"byte_end":17293,"line_start":389,"line_end":389,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<MutexGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":16992,"byte_end":17056,"line_start":382,"line_end":382,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":17061,"byte_end":17064,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked a fair unlock protocol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":17069,"byte_end":17118,"line_start":384,"line_end":384,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":17123,"byte_end":17126,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":17131,"byte_end":17199,"line_start":386,"line_end":386,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":17204,"byte_end":17254,"line_start":387,"line_end":387,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":17259,"byte_end":17268,"line_start":388,"line_end":388,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":17758,"byte_end":17762,"line_start":404,"line_end":404,"column_start":12,"column_end":16},"name":"bump","qualname":"<MutexGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":17461,"byte_end":17530,"line_start":398,"line_end":398,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":17535,"byte_end":17538,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":17543,"byte_end":17619,"line_start":400,"line_end":400,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":17624,"byte_end":17700,"line_start":401,"line_end":401,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":17705,"byte_end":17732,"line_start":402,"line_end":402,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":17737,"byte_end":17746,"line_start":403,"line_end":403,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":134},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":18864,"byte_end":18880,"line_start":442,"line_end":442,"column_start":12,"column_end":28},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"MappedMutexGuard {  }","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140}],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `MutexGuard::map`, which can point to a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":18476,"byte_end":18551,"line_start":434,"line_end":434,"column_start":1,"column_end":76}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":18552,"byte_end":18587,"line_start":435,"line_end":435,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":18588,"byte_end":18591,"line_start":436,"line_end":436,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedMutexGuard` and `MutexGuard` is that the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":18592,"byte_end":18671,"line_start":437,"line_end":437,"column_start":1,"column_end":80}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":18672,"byte_end":18747,"line_start":438,"line_end":438,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":18748,"byte_end":18828,"line_start":439,"line_end":439,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":18829,"byte_end":18840,"line_start":440,"line_end":440,"column_start":1,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":18841,"byte_end":18852,"line_start":441,"line_end":441,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":19716,"byte_end":19719,"line_start":465,"line_end":465,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedMutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedMutexGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":19298,"byte_end":19368,"line_start":456,"line_end":456,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":19373,"byte_end":19376,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":19381,"byte_end":19444,"line_start":458,"line_end":458,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":19449,"byte_end":19481,"line_start":459,"line_end":459,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":19486,"byte_end":19489,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":19494,"byte_end":19545,"line_start":461,"line_end":461,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":19550,"byte_end":19632,"line_start":462,"line_end":462,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":19637,"byte_end":19690,"line_start":463,"line_end":463,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":19695,"byte_end":19704,"line_start":464,"line_end":464,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":20542,"byte_end":20549,"line_start":489,"line_end":489,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedMutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedMutexGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedMutexGuard` for a component of the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":20044,"byte_end":20113,"line_start":479,"line_end":479,"column_start":5,"column_end":74}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":20118,"byte_end":20194,"line_start":480,"line_end":480,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":20199,"byte_end":20202,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":20207,"byte_end":20270,"line_start":482,"line_end":482,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":20275,"byte_end":20307,"line_start":483,"line_end":483,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":20312,"byte_end":20315,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":20320,"byte_end":20371,"line_start":485,"line_end":485,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":20376,"byte_end":20458,"line_start":486,"line_end":486,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":20463,"byte_end":20516,"line_start":487,"line_end":487,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":20521,"byte_end":20530,"line_start":488,"line_end":488,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":21844,"byte_end":21855,"line_start":521,"line_end":521,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedMutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":21063,"byte_end":21114,"line_start":508,"line_end":508,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":21119,"byte_end":21122,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":21127,"byte_end":21201,"line_start":510,"line_end":510,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":21206,"byte_end":21278,"line_start":511,"line_end":511,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":21283,"byte_end":21357,"line_start":512,"line_end":512,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":21362,"byte_end":21437,"line_start":513,"line_end":513,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":21442,"byte_end":21513,"line_start":514,"line_end":514,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":21518,"byte_end":21575,"line_start":515,"line_end":515,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":21580,"byte_end":21583,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":21588,"byte_end":21664,"line_start":517,"line_end":517,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":21669,"byte_end":21745,"line_start":518,"line_end":518,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":21750,"byte_end":21818,"line_start":519,"line_end":519,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":21823,"byte_end":21832,"line_start":520,"line_end":520,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":202},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":23618,"byte_end":23629,"line_start":30,"line_end":30,"column_start":18,"column_end":29},"name":"GetThreadId","qualname":"::remutex::GetThreadId","value":"GetThreadId","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204}],"decl_id":null,"docs":" Helper trait which returns a non-zero thread ID.","sig":null,"attributes":[{"value":"/ Helper trait which returns a non-zero thread ID.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":23217,"byte_end":23269,"line_start":20,"line_end":20,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":23270,"byte_end":23273,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ The simplest way to implement this trait is to return the address of a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":23274,"byte_end":23348,"line_start":22,"line_end":22,"column_start":1,"column_end":75}},{"value":"/ thread-local variable.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":23349,"byte_end":23375,"line_start":23,"line_end":23,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":23376,"byte_end":23379,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":23380,"byte_end":23392,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":23393,"byte_end":23396,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that no two active threads share","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":23397,"byte_end":23475,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ the same thread ID. However the ID of a thread that has exited can be","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":23476,"byte_end":23549,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/ re-used since that thread is no longer active.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":23550,"byte_end":23600,"line_start":29,"line_end":29,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":203},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":23665,"byte_end":23669,"line_start":32,"line_end":32,"column_start":11,"column_end":15},"name":"INIT","qualname":"::remutex::GetThreadId::INIT","value":"Self","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":" Initial value.\n","sig":null,"attributes":[{"value":"/ Initial value.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":23636,"byte_end":23654,"line_start":31,"line_end":31,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":23780,"byte_end":23797,"line_start":36,"line_end":36,"column_start":8,"column_end":25},"name":"nonzero_thread_id","qualname":"::remutex::GetThreadId::nonzero_thread_id","value":"fn (&self) -> usize","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":" Returns a non-zero thread ID which identifies the current thread of\n execution.\n","sig":null,"attributes":[{"value":"/ Returns a non-zero thread ID which identifies the current thread of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":23682,"byte_end":23753,"line_start":34,"line_end":34,"column_start":5,"column_end":76}},{"value":"/ execution.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":23758,"byte_end":23772,"line_start":35,"line_end":35,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":234},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":26643,"byte_end":26657,"line_start":138,"line_end":138,"column_start":12,"column_end":26},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"ReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":238},{"krate":0,"index":239}],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[{"value":"/ A mutex which can be recursively locked by a single thread.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":26168,"byte_end":26231,"line_start":127,"line_end":127,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":26232,"byte_end":26235,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ This type is identical to `Mutex` except for the following points:","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":26236,"byte_end":26306,"line_start":129,"line_end":129,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":26307,"byte_end":26310,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ - Locking multiple times from the same thread will work correctly instead of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":26311,"byte_end":26391,"line_start":131,"line_end":131,"column_start":1,"column_end":81}},{"value":"/   deadlocking.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":26392,"byte_end":26410,"line_start":132,"line_end":132,"column_start":1,"column_end":19}},{"value":"/ - `ReentrantMutexGuard` does not give mutable references to the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":26411,"byte_end":26491,"line_start":133,"line_end":133,"column_start":1,"column_end":81}},{"value":"/   Use a `RefCell` if you need this.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":26492,"byte_end":26531,"line_start":134,"line_end":134,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":26532,"byte_end":26535,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ See [`Mutex`](struct.Mutex.html) for more details about the underlying mutex","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":26536,"byte_end":26616,"line_start":136,"line_end":136,"column_start":1,"column_end":81}},{"value":"/ primitive.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":26617,"byte_end":26631,"line_start":137,"line_end":137,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":27658,"byte_end":27661,"line_start":169,"line_end":169,"column_start":12,"column_end":15},"name":"new","qualname":"<ReentrantMutex<R, G, T>>::new","value":"fn (val: T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex in an unlocked state ready for use.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":27526,"byte_end":27595,"line_start":166,"line_end":166,"column_start":5,"column_end":74}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":27600,"byte_end":27632,"line_start":167,"line_end":167,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":27637,"byte_end":27646,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":28104,"byte_end":28114,"line_start":184,"line_end":184,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ReentrantMutex<R, G, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":27995,"byte_end":28050,"line_start":181,"line_end":181,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":28055,"byte_end":28064,"line_start":182,"line_end":182,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":28069,"byte_end":28092,"line_start":183,"line_end":183,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":29069,"byte_end":29073,"line_start":209,"line_end":209,"column_start":12,"column_end":16},"name":"lock","qualname":"<ReentrantMutex<R, G, T>>::lock","value":"fn (&self) -> ReentrantMutexGuard<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reentrant mutex, blocking the current thread until it is able\n to do so.","sig":null,"attributes":[{"value":"/ Acquires a reentrant mutex, blocking the current thread until it is able","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":28430,"byte_end":28506,"line_start":198,"line_end":198,"column_start":5,"column_end":81}},{"value":"/ to do so.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":28511,"byte_end":28524,"line_start":199,"line_end":199,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":28529,"byte_end":28532,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ If the mutex is held by another thread then this function will block the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":28537,"byte_end":28613,"line_start":201,"line_end":201,"column_start":5,"column_end":81}},{"value":"/ local thread until it is available to acquire the mutex. If the mutex is","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":28618,"byte_end":28694,"line_start":202,"line_end":202,"column_start":5,"column_end":81}},{"value":"/ already held by the current thread then this function will increment the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":28699,"byte_end":28775,"line_start":203,"line_end":203,"column_start":5,"column_end":81}},{"value":"/ lock reference count and return immediately. Upon returning,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":28780,"byte_end":28844,"line_start":204,"line_end":204,"column_start":5,"column_end":69}},{"value":"/ the thread is the only thread with the mutex held. An RAII guard is","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":28849,"byte_end":28920,"line_start":205,"line_end":205,"column_start":5,"column_end":76}},{"value":"/ returned to allow scoped unlock of the lock. When the guard goes out of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":28925,"byte_end":29000,"line_start":206,"line_end":206,"column_start":5,"column_end":80}},{"value":"/ scope, the mutex will be unlocked.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":29005,"byte_end":29043,"line_start":207,"line_end":207,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":29048,"byte_end":29057,"line_start":208,"line_end":208,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":29474,"byte_end":29482,"line_start":222,"line_end":222,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<ReentrantMutex<R, G, T>>::try_lock","value":"fn (&self) -> Option<ReentrantMutexGuard<R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":29172,"byte_end":29206,"line_start":214,"line_end":214,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":29211,"byte_end":29214,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":29219,"byte_end":29295,"line_start":216,"line_end":216,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":29300,"byte_end":29376,"line_start":217,"line_end":217,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":29381,"byte_end":29402,"line_start":218,"line_end":218,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":29407,"byte_end":29410,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":29415,"byte_end":29448,"line_start":220,"line_end":220,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":29453,"byte_end":29462,"line_start":221,"line_end":221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":29907,"byte_end":29914,"line_start":235,"line_end":235,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ReentrantMutex<R, G, T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":29651,"byte_end":29706,"line_start":230,"line_end":230,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":29711,"byte_end":29714,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `ReentrantMutex` mutably, no actual locking needs to","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":29719,"byte_end":29803,"line_start":232,"line_end":232,"column_start":5,"column_end":89}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":29808,"byte_end":29881,"line_start":233,"line_end":233,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":29886,"byte_end":29895,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30516,"byte_end":30528,"line_start":251,"line_end":251,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<ReentrantMutex<R, G, T>>::force_unlock","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":29990,"byte_end":30021,"line_start":239,"line_end":239,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30026,"byte_end":30029,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30034,"byte_end":30108,"line_start":241,"line_end":241,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30113,"byte_end":30192,"line_start":242,"line_end":242,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30197,"byte_end":30218,"line_start":243,"line_end":243,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30223,"byte_end":30226,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30231,"byte_end":30243,"line_start":245,"line_end":245,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30248,"byte_end":30251,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30256,"byte_end":30330,"line_start":247,"line_end":247,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30335,"byte_end":30413,"line_start":248,"line_end":248,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30418,"byte_end":30483,"line_start":249,"line_end":249,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30488,"byte_end":30497,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30974,"byte_end":30977,"line_start":265,"line_end":265,"column_start":19,"column_end":22},"name":"raw","qualname":"<ReentrantMutex<R, G, T>>::raw","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30576,"byte_end":30620,"line_start":255,"line_end":255,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30625,"byte_end":30628,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30633,"byte_end":30708,"line_start":257,"line_end":257,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30713,"byte_end":30774,"line_start":258,"line_end":258,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30779,"byte_end":30782,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30787,"byte_end":30799,"line_start":260,"line_end":260,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30804,"byte_end":30807,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30812,"byte_end":30879,"line_start":262,"line_end":262,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `ReentrantMutexGuard`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30884,"byte_end":30941,"line_start":263,"line_end":263,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":30946,"byte_end":30955,"line_start":264,"line_end":264,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":31660,"byte_end":31677,"line_start":283,"line_end":283,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<ReentrantMutex<R, G, T>>::force_unlock_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock procotol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":31105,"byte_end":31165,"line_start":271,"line_end":271,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":31170,"byte_end":31173,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":31178,"byte_end":31252,"line_start":273,"line_end":273,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":31257,"byte_end":31336,"line_start":274,"line_end":274,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":31341,"byte_end":31362,"line_start":275,"line_end":275,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":31367,"byte_end":31370,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":31375,"byte_end":31387,"line_start":277,"line_end":277,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":31392,"byte_end":31395,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":31400,"byte_end":31474,"line_start":279,"line_end":279,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":31479,"byte_end":31557,"line_start":280,"line_end":280,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":31562,"byte_end":31627,"line_start":281,"line_end":281,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":31632,"byte_end":31641,"line_start":282,"line_end":282,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":32105,"byte_end":32117,"line_start":295,"line_end":295,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<ReentrantMutex<R, G, T>>::try_lock_for","value":"fn (&self, timeout: R::Duration) -> Option<ReentrantMutexGuard<R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":31808,"byte_end":31869,"line_start":289,"line_end":289,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":31874,"byte_end":31877,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":31882,"byte_end":31952,"line_start":291,"line_end":291,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":31957,"byte_end":32032,"line_start":292,"line_end":292,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":32037,"byte_end":32079,"line_start":293,"line_end":293,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":32084,"byte_end":32093,"line_start":294,"line_end":294,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":32616,"byte_end":32630,"line_start":309,"line_end":309,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<ReentrantMutex<R, G, T>>::try_lock_until","value":"fn (&self, timeout: R::Instant) -> Option<ReentrantMutexGuard<R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":32319,"byte_end":32380,"line_start":303,"line_end":303,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":32385,"byte_end":32388,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":32393,"byte_end":32463,"line_start":305,"line_end":305,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":32468,"byte_end":32543,"line_start":306,"line_end":306,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":32548,"byte_end":32590,"line_start":307,"line_end":307,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":32595,"byte_end":32604,"line_start":308,"line_end":308,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":290},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":33915,"byte_end":33934,"line_start":350,"line_end":350,"column_start":12,"column_end":31},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"ReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":33629,"byte_end":33716,"line_start":344,"line_end":344,"column_start":1,"column_end":88}},{"value":"/ is dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":33717,"byte_end":33780,"line_start":345,"line_end":345,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":33781,"byte_end":33784,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":33785,"byte_end":33863,"line_start":347,"line_end":347,"column_start":1,"column_end":79}},{"value":"/ `Deref` implementation.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":33864,"byte_end":33891,"line_start":348,"line_end":348,"column_start":1,"column_end":28}},{"value":"must_use","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":33892,"byte_end":33903,"line_start":349,"line_end":349,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":34409,"byte_end":34416,"line_start":361,"line_end":361,"column_start":12,"column_end":19},"name":"remutex","qualname":"<ReentrantMutexGuard>::remutex","value":"fn (s: &Self) -> &'a ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `ReentrantMutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `ReentrantMutex` object.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":34333,"byte_end":34397,"line_start":360,"line_end":360,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":34922,"byte_end":34925,"line_start":374,"line_end":374,"column_start":12,"column_end":15},"name":"map","qualname":"<ReentrantMutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedReentrantMutexGuard<'a, R, G, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":34489,"byte_end":34568,"line_start":365,"line_end":365,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":34573,"byte_end":34576,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":34581,"byte_end":34647,"line_start":367,"line_end":367,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":34652,"byte_end":34684,"line_start":368,"line_end":368,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":34689,"byte_end":34692,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":34697,"byte_end":34748,"line_start":370,"line_end":370,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":34753,"byte_end":34838,"line_start":371,"line_end":371,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":34843,"byte_end":34896,"line_start":372,"line_end":372,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":34901,"byte_end":34910,"line_start":373,"line_end":373,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":35795,"byte_end":35802,"line_start":398,"line_end":398,"column_start":12,"column_end":19},"name":"try_map","qualname":"<ReentrantMutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedReentrantMutexGuard<'a, R, G, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":35282,"byte_end":35360,"line_start":388,"line_end":388,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":35365,"byte_end":35441,"line_start":389,"line_end":389,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":35446,"byte_end":35449,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":35454,"byte_end":35520,"line_start":391,"line_end":391,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":35525,"byte_end":35557,"line_start":392,"line_end":392,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":35562,"byte_end":35565,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":35570,"byte_end":35621,"line_start":394,"line_end":394,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":35626,"byte_end":35711,"line_start":395,"line_end":395,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":35716,"byte_end":35769,"line_start":396,"line_end":396,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":35774,"byte_end":35783,"line_start":397,"line_end":397,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":36508,"byte_end":36516,"line_start":420,"line_end":420,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<ReentrantMutexGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":36282,"byte_end":36346,"line_start":415,"line_end":415,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":36351,"byte_end":36354,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":36359,"byte_end":36427,"line_start":417,"line_end":417,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":36432,"byte_end":36482,"line_start":418,"line_end":418,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":36487,"byte_end":36496,"line_start":419,"line_end":419,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":37582,"byte_end":37593,"line_start":446,"line_end":446,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<ReentrantMutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":36792,"byte_end":36843,"line_start":433,"line_end":433,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":36848,"byte_end":36851,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":36856,"byte_end":36930,"line_start":435,"line_end":435,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":36935,"byte_end":37007,"line_start":436,"line_end":436,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":37012,"byte_end":37086,"line_start":437,"line_end":437,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":37091,"byte_end":37166,"line_start":438,"line_end":438,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":37171,"byte_end":37242,"line_start":439,"line_end":439,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":37247,"byte_end":37304,"line_start":440,"line_end":440,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":37309,"byte_end":37312,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":37317,"byte_end":37393,"line_start":442,"line_end":442,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":37398,"byte_end":37474,"line_start":443,"line_end":443,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":37479,"byte_end":37556,"line_start":444,"line_end":444,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":37561,"byte_end":37570,"line_start":445,"line_end":445,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":37965,"byte_end":37978,"line_start":458,"line_end":458,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<ReentrantMutexGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":37677,"byte_end":37741,"line_start":451,"line_end":451,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":37746,"byte_end":37749,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked a fair unlock protocol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":37754,"byte_end":37803,"line_start":453,"line_end":453,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":37808,"byte_end":37811,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":37816,"byte_end":37884,"line_start":455,"line_end":455,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":37889,"byte_end":37939,"line_start":456,"line_end":456,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":37944,"byte_end":37953,"line_start":457,"line_end":457,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":38447,"byte_end":38451,"line_start":473,"line_end":473,"column_start":12,"column_end":16},"name":"bump","qualname":"<ReentrantMutexGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":38150,"byte_end":38219,"line_start":467,"line_end":467,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":38224,"byte_end":38227,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":38232,"byte_end":38308,"line_start":469,"line_end":469,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":38313,"byte_end":38389,"line_start":470,"line_end":470,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":38394,"byte_end":38421,"line_start":471,"line_end":471,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":38426,"byte_end":38435,"line_start":472,"line_end":472,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":345},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":39508,"byte_end":39533,"line_start":510,"line_end":510,"column_start":12,"column_end":37},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"MappedReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352}],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":39093,"byte_end":39177,"line_start":502,"line_end":502,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":39178,"byte_end":39213,"line_start":503,"line_end":503,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":39214,"byte_end":39217,"line_start":504,"line_end":504,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":39218,"byte_end":39315,"line_start":505,"line_end":505,"column_start":1,"column_end":98}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":39316,"byte_end":39391,"line_start":506,"line_end":506,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":39392,"byte_end":39472,"line_start":507,"line_end":507,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":39473,"byte_end":39484,"line_start":508,"line_end":508,"column_start":1,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":39485,"byte_end":39496,"line_start":509,"line_end":509,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":40394,"byte_end":40397,"line_start":532,"line_end":532,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedReentrantMutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedReentrantMutexGuard<'a, R, G, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":39949,"byte_end":40028,"line_start":523,"line_end":523,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":40033,"byte_end":40036,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":40041,"byte_end":40113,"line_start":525,"line_end":525,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":40118,"byte_end":40150,"line_start":526,"line_end":526,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":40155,"byte_end":40158,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":40163,"byte_end":40214,"line_start":528,"line_end":528,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":40219,"byte_end":40310,"line_start":529,"line_end":529,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":40315,"byte_end":40368,"line_start":530,"line_end":530,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":40373,"byte_end":40382,"line_start":531,"line_end":531,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":41256,"byte_end":41263,"line_start":556,"line_end":556,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedReentrantMutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedReentrantMutexGuard<'a, R, G, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":40731,"byte_end":40809,"line_start":546,"line_end":546,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":40814,"byte_end":40890,"line_start":547,"line_end":547,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":40895,"byte_end":40898,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":40903,"byte_end":40975,"line_start":549,"line_end":549,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":40980,"byte_end":41012,"line_start":550,"line_end":550,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":41017,"byte_end":41020,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":41025,"byte_end":41076,"line_start":552,"line_end":552,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":41081,"byte_end":41172,"line_start":553,"line_end":553,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":41177,"byte_end":41230,"line_start":554,"line_end":554,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":41235,"byte_end":41244,"line_start":555,"line_end":555,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":42613,"byte_end":42624,"line_start":590,"line_end":590,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedReentrantMutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":41823,"byte_end":41874,"line_start":577,"line_end":577,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":41879,"byte_end":41882,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":41887,"byte_end":41961,"line_start":579,"line_end":579,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":41966,"byte_end":42038,"line_start":580,"line_end":580,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":42043,"byte_end":42117,"line_start":581,"line_end":581,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":42122,"byte_end":42197,"line_start":582,"line_end":582,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":42202,"byte_end":42273,"line_start":583,"line_end":583,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":42278,"byte_end":42335,"line_start":584,"line_end":584,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":42340,"byte_end":42343,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":42348,"byte_end":42424,"line_start":586,"line_end":586,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":42429,"byte_end":42505,"line_start":587,"line_end":587,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":42510,"byte_end":42587,"line_start":588,"line_end":588,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":42592,"byte_end":42601,"line_start":589,"line_end":589,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":403},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":44247,"byte_end":44256,"line_start":28,"line_end":28,"column_start":18,"column_end":27},"name":"RawRwLock","qualname":"::rwlock::RawRwLock","value":"RawRwLock","parent":null,"children":[{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411}],"decl_id":null,"docs":" Basic operations for a reader-writer lock.","sig":null,"attributes":[{"value":"/ Basic operations for a reader-writer lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":43800,"byte_end":43846,"line_start":17,"line_end":17,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":43847,"byte_end":43850,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `RwLock` to form a safe and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":43851,"byte_end":43927,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ fully-functioning `RwLock` type.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":43928,"byte_end":43964,"line_start":20,"line_end":20,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":43965,"byte_end":43968,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":43969,"byte_end":43981,"line_start":22,"line_end":22,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":43982,"byte_end":43985,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the `RwLock` is actually","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":43986,"byte_end":44061,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/ exclusive: an exclusive lock can't be acquired while an exclusive or shared","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":44062,"byte_end":44141,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/ lock exists, and a shared lock can't be acquire while an exclusive lock","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":44142,"byte_end":44217,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/ exists.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":44218,"byte_end":44229,"line_start":27,"line_end":27,"column_start":1,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":404},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":44317,"byte_end":44321,"line_start":30,"line_end":30,"column_start":11,"column_end":15},"name":"INIT","qualname":"::rwlock::RawRwLock::INIT","value":"Self","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Initial value for an unlocked `RwLock`.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked `RwLock`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":44263,"byte_end":44306,"line_start":29,"line_end":29,"column_start":5,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":405},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":44486,"byte_end":44497,"line_start":34,"line_end":34,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::rwlock::RawRwLock::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":44334,"byte_end":44409,"line_start":32,"line_end":32,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":44414,"byte_end":44476,"line_start":33,"line_end":33,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":44594,"byte_end":44605,"line_start":37,"line_end":37,"column_start":8,"column_end":19},"name":"lock_shared","qualname":"::rwlock::RawRwLock::lock_shared","value":"fn (&self) -> ()","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Acquires a shared lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock, blocking the current thread until it is able to do so.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":44504,"byte_end":44586,"line_start":36,"line_end":36,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":44682,"byte_end":44697,"line_start":40,"line_end":40,"column_start":8,"column_end":23},"name":"try_lock_shared","qualname":"::rwlock::RawRwLock::try_lock_shared","value":"fn (&self) -> bool","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without blocking.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":44619,"byte_end":44674,"line_start":39,"line_end":39,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":44754,"byte_end":44767,"line_start":43,"line_end":43,"column_start":8,"column_end":21},"name":"unlock_shared","qualname":"::rwlock::RawRwLock::unlock_shared","value":"fn (&self) -> ()","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Releases a shared lock.\n","sig":null,"attributes":[{"value":"/ Releases a shared lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":44719,"byte_end":44746,"line_start":42,"line_end":42,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":44875,"byte_end":44889,"line_start":46,"line_end":46,"column_start":8,"column_end":22},"name":"lock_exclusive","qualname":"::rwlock::RawRwLock::lock_exclusive","value":"fn (&self) -> ()","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Acquires an exclusive lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an exclusive lock, blocking the current thread until it is able to do so.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":44781,"byte_end":44867,"line_start":45,"line_end":45,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":44970,"byte_end":44988,"line_start":49,"line_end":49,"column_start":8,"column_end":26},"name":"try_lock_exclusive","qualname":"::rwlock::RawRwLock::try_lock_exclusive","value":"fn (&self) -> bool","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock without blocking.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":44903,"byte_end":44962,"line_start":48,"line_end":48,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":45049,"byte_end":45065,"line_start":52,"line_end":52,"column_start":8,"column_end":24},"name":"unlock_exclusive","qualname":"::rwlock::RawRwLock::unlock_exclusive","value":"fn (&self) -> ()","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Releases an exclusive lock.\n","sig":null,"attributes":[{"value":"/ Releases an exclusive lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":45010,"byte_end":45041,"line_start":51,"line_end":51,"column_start":5,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":412},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":45457,"byte_end":45470,"line_start":61,"line_end":61,"column_start":18,"column_end":31},"name":"RawRwLockFair","qualname":"::rwlock::RawRwLockFair","value":"RawRwLockFair: RawRwLock","parent":null,"children":[{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416}],"decl_id":null,"docs":" Additional methods for RwLocks which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support fair unlocking.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":45077,"byte_end":45141,"line_start":55,"line_end":55,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":45142,"byte_end":45145,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":45146,"byte_end":45226,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":45227,"byte_end":45302,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":45303,"byte_end":45377,"line_start":59,"line_end":59,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":45378,"byte_end":45439,"line_start":60,"line_end":60,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":45552,"byte_end":45570,"line_start":63,"line_end":63,"column_start":8,"column_end":26},"name":"unlock_shared_fair","qualname":"::rwlock::RawRwLockFair::unlock_shared_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":412},"children":[],"decl_id":null,"docs":" Releases a shared lock using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Releases a shared lock using a fair unlock protocol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":45488,"byte_end":45544,"line_start":62,"line_end":62,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":45652,"byte_end":45673,"line_start":66,"line_end":66,"column_start":8,"column_end":29},"name":"unlock_exclusive_fair","qualname":"::rwlock::RawRwLockFair::unlock_exclusive_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":412},"children":[],"decl_id":null,"docs":" Releases an exclusive lock using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Releases an exclusive lock using a fair unlock protocol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":45584,"byte_end":45644,"line_start":65,"line_end":65,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":45984,"byte_end":45995,"line_start":73,"line_end":73,"column_start":8,"column_end":19},"name":"bump_shared","qualname":"::rwlock::RawRwLockFair::bump_shared","value":"fn (&self) -> ()","parent":{"krate":0,"index":412},"children":[],"decl_id":null,"docs":" Temporarily yields a shared lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields a shared lock to a waiting thread if there is one.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":45687,"byte_end":45760,"line_start":68,"line_end":68,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":45765,"byte_end":45768,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_shared_fair` followed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":45773,"byte_end":45856,"line_start":70,"line_end":70,"column_start":5,"column_end":88}},{"value":"/ by `lock_shared`, however it can be much more efficient in the case where there","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":45861,"byte_end":45944,"line_start":71,"line_end":71,"column_start":5,"column_end":88}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":45949,"byte_end":45976,"line_start":72,"line_end":72,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":46386,"byte_end":46400,"line_start":83,"line_end":83,"column_start":8,"column_end":22},"name":"bump_exclusive","qualname":"::rwlock::RawRwLockFair::bump_exclusive","value":"fn (&self) -> ()","parent":{"krate":0,"index":412},"children":[],"decl_id":null,"docs":" Temporarily yields an exclusive lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an exclusive lock to a waiting thread if there is one.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":46079,"byte_end":46156,"line_start":78,"line_end":78,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":46161,"byte_end":46164,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_exclusive_fair` followed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":46169,"byte_end":46255,"line_start":80,"line_end":80,"column_start":5,"column_end":91}},{"value":"/ by `lock_exclusive`, however it can be much more efficient in the case where there","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":46260,"byte_end":46346,"line_start":81,"line_end":81,"column_start":5,"column_end":91}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":46351,"byte_end":46378,"line_start":82,"line_end":82,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":417},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":46617,"byte_end":46635,"line_start":91,"line_end":91,"column_start":18,"column_end":36},"name":"RawRwLockDowngrade","qualname":"::rwlock::RawRwLockDowngrade","value":"RawRwLockDowngrade: RawRwLock","parent":null,"children":[{"krate":0,"index":418}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically downgrading an\n exclusive lock to a shared lock.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically downgrading an","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":46488,"byte_end":46562,"line_start":89,"line_end":89,"column_start":1,"column_end":75}},{"value":"/ exclusive lock to a shared lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":46563,"byte_end":46599,"line_start":90,"line_end":90,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":46802,"byte_end":46811,"line_start":94,"line_end":94,"column_start":8,"column_end":17},"name":"downgrade","qualname":"::rwlock::RawRwLockDowngrade::downgrade","value":"fn (&self) -> ()","parent":{"krate":0,"index":417},"children":[],"decl_id":null,"docs":" Atomically downgrades an exclusive lock into a shared lock without\n allowing any thread to take an exclusive lock in the meantime.\n","sig":null,"attributes":[{"value":"/ Atomically downgrades an exclusive lock into a shared lock without","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":46653,"byte_end":46723,"line_start":92,"line_end":92,"column_start":5,"column_end":75}},{"value":"/ allowing any thread to take an exclusive lock in the meantime.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":46728,"byte_end":46794,"line_start":93,"line_end":93,"column_start":5,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":419},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":47053,"byte_end":47067,"line_start":101,"line_end":101,"column_start":18,"column_end":32},"name":"RawRwLockTimed","qualname":"::rwlock::RawRwLockTimed","value":"RawRwLockTimed: RawRwLock","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425}],"decl_id":null,"docs":" Additional methods for RwLocks which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support locking with timeouts.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":46823,"byte_end":46894,"line_start":97,"line_end":97,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":46895,"byte_end":46898,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":46899,"byte_end":46979,"line_start":99,"line_end":99,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":46980,"byte_end":47035,"line_start":100,"line_end":100,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":420},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":47137,"byte_end":47145,"line_start":103,"line_end":103,"column_start":10,"column_end":18},"name":"Duration","qualname":"::rwlock::RawRwLockTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":419},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":47085,"byte_end":47127,"line_start":102,"line_end":102,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":421},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":47205,"byte_end":47212,"line_start":106,"line_end":106,"column_start":10,"column_end":17},"name":"Instant","qualname":"::rwlock::RawRwLockTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":419},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":47152,"byte_end":47195,"line_start":105,"line_end":105,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":47292,"byte_end":47311,"line_start":109,"line_end":109,"column_start":8,"column_end":27},"name":"try_lock_shared_for","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":419},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":47219,"byte_end":47284,"line_start":108,"line_end":108,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":47431,"byte_end":47452,"line_start":112,"line_end":112,"column_start":8,"column_end":29},"name":"try_lock_shared_until","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":419},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":47358,"byte_end":47423,"line_start":111,"line_end":111,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":47575,"byte_end":47597,"line_start":115,"line_end":115,"column_start":8,"column_end":30},"name":"try_lock_exclusive_for","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":419},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":47498,"byte_end":47567,"line_start":114,"line_end":114,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":47721,"byte_end":47745,"line_start":118,"line_end":118,"column_start":8,"column_end":32},"name":"try_lock_exclusive_until","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":419},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":47644,"byte_end":47713,"line_start":117,"line_end":117,"column_start":5,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":426},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":48178,"byte_end":48196,"line_start":128,"line_end":128,"column_start":18,"column_end":36},"name":"RawRwLockRecursive","qualname":"::rwlock::RawRwLockRecursive","value":"RawRwLockRecursive: RawRwLock","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":428}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":47789,"byte_end":47859,"line_start":121,"line_end":121,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":47860,"byte_end":47863,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ These are guaranteed to succeed without blocking if","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":47864,"byte_end":47919,"line_start":123,"line_end":123,"column_start":1,"column_end":56}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":47920,"byte_end":47995,"line_start":124,"line_end":124,"column_start":1,"column_end":76}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":47996,"byte_end":48067,"line_start":125,"line_end":125,"column_start":1,"column_end":72}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":48068,"byte_end":48142,"line_start":126,"line_end":126,"column_start":1,"column_end":75}},{"value":"/ for the lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":48143,"byte_end":48160,"line_start":127,"line_end":127,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":48297,"byte_end":48318,"line_start":130,"line_end":130,"column_start":8,"column_end":29},"name":"lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::lock_shared_recursive","value":"fn (&self) -> ()","parent":{"krate":0,"index":426},"children":[],"decl_id":null,"docs":" Acquires a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":48214,"byte_end":48289,"line_start":129,"line_end":129,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":48426,"byte_end":48451,"line_start":133,"line_end":133,"column_start":8,"column_end":33},"name":"try_lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::try_lock_shared_recursive","value":"fn (&self) -> bool","parent":{"krate":0,"index":426},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":48332,"byte_end":48418,"line_start":132,"line_end":132,"column_start":5,"column_end":91}}]},{"kind":"Trait","id":{"krate":0,"index":429},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":48572,"byte_end":48595,"line_start":137,"line_end":137,"column_start":18,"column_end":41},"name":"RawRwLockRecursiveTimed","qualname":"::rwlock::RawRwLockRecursiveTimed","value":"RawRwLockRecursiveTimed: RawRwLockRecursive + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":431}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks and timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks and timeouts.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":48471,"byte_end":48554,"line_start":136,"line_end":136,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":48769,"byte_end":48798,"line_start":140,"line_end":140,"column_start":8,"column_end":37},"name":"try_lock_shared_recursive_for","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":429},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":48639,"byte_end":48712,"line_start":138,"line_end":138,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":48717,"byte_end":48761,"line_start":139,"line_end":139,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":48975,"byte_end":49006,"line_start":144,"line_end":144,"column_start":8,"column_end":39},"name":"try_lock_shared_recursive_until","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":429},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":48845,"byte_end":48918,"line_start":142,"line_end":142,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":48923,"byte_end":48967,"line_start":143,"line_end":143,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":432},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":49382,"byte_end":49398,"line_start":153,"line_end":153,"column_start":18,"column_end":34},"name":"RawRwLockUpgrade","qualname":"::rwlock::RawRwLockUpgrade","value":"RawRwLockUpgrade: RawRwLock","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically upgrading a shared\n lock to an exclusive lock.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically upgrading a shared","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":49050,"byte_end":49128,"line_start":147,"line_end":147,"column_start":1,"column_end":79}},{"value":"/ lock to an exclusive lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":49129,"byte_end":49159,"line_start":148,"line_end":148,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":49160,"byte_end":49163,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ This requires acquiring a special \"upgradable read lock\" instead of a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":49164,"byte_end":49237,"line_start":150,"line_end":150,"column_start":1,"column_end":74}},{"value":"/ normal shared lock. There may only be one upgradable lock at any time,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":49238,"byte_end":49312,"line_start":151,"line_end":151,"column_start":1,"column_end":75}},{"value":"/ otherwise deadlocks could occur when upgrading.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":49313,"byte_end":49364,"line_start":152,"line_end":152,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":49511,"byte_end":49526,"line_start":155,"line_end":155,"column_start":8,"column_end":23},"name":"lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::lock_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":432},"children":[],"decl_id":null,"docs":" Acquires an upgradable lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an upgradable lock, blocking the current thread until it is able to do so.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":49416,"byte_end":49503,"line_start":154,"line_end":154,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":49608,"byte_end":49627,"line_start":158,"line_end":158,"column_start":8,"column_end":27},"name":"try_lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::try_lock_upgradable","value":"fn (&self) -> bool","parent":{"krate":0,"index":432},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock without blocking.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":49540,"byte_end":49600,"line_start":157,"line_end":157,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":49689,"byte_end":49706,"line_start":161,"line_end":161,"column_start":8,"column_end":25},"name":"unlock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::unlock_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":432},"children":[],"decl_id":null,"docs":" Releases an upgradable lock.\n","sig":null,"attributes":[{"value":"/ Releases an upgradable lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":49649,"byte_end":49681,"line_start":160,"line_end":160,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":49781,"byte_end":49788,"line_start":164,"line_end":164,"column_start":8,"column_end":15},"name":"upgrade","qualname":"::rwlock::RawRwLockUpgrade::upgrade","value":"fn (&self) -> ()","parent":{"krate":0,"index":432},"children":[],"decl_id":null,"docs":" Upgrades an upgradable lock to an exclusive lock.\n","sig":null,"attributes":[{"value":"/ Upgrades an upgradable lock to an exclusive lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":49720,"byte_end":49773,"line_start":163,"line_end":163,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":49899,"byte_end":49910,"line_start":168,"line_end":168,"column_start":8,"column_end":19},"name":"try_upgrade","qualname":"::rwlock::RawRwLockUpgrade::try_upgrade","value":"fn (&self) -> bool","parent":{"krate":0,"index":432},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock without\n blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock without","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":49802,"byte_end":49873,"line_start":166,"line_end":166,"column_start":5,"column_end":76}},{"value":"/ blocking.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":49878,"byte_end":49891,"line_start":167,"line_end":167,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":438},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50037,"byte_end":50057,"line_start":173,"line_end":173,"column_start":18,"column_end":38},"name":"RawRwLockUpgradeFair","qualname":"::rwlock::RawRwLockUpgradeFair","value":"RawRwLockUpgradeFair: RawRwLockUpgrade + RawRwLockFair","parent":null,"children":[{"krate":0,"index":439},{"krate":0,"index":440}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and fair\n unlocking.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and fair","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":49930,"byte_end":50004,"line_start":171,"line_end":171,"column_start":1,"column_end":75}},{"value":"/ unlocking.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50005,"byte_end":50019,"line_start":172,"line_end":172,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50167,"byte_end":50189,"line_start":175,"line_end":175,"column_start":8,"column_end":30},"name":"unlock_upgradable_fair","qualname":"::rwlock::RawRwLockUpgradeFair::unlock_upgradable_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":438},"children":[],"decl_id":null,"docs":" Releases an upgradable lock using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Releases an upgradable lock using a fair unlock protocol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50098,"byte_end":50159,"line_start":174,"line_end":174,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50513,"byte_end":50528,"line_start":182,"line_end":182,"column_start":8,"column_end":23},"name":"bump_upgradable","qualname":"::rwlock::RawRwLockUpgradeFair::bump_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":438},"children":[],"decl_id":null,"docs":" Temporarily yields an upgradable lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an upgradable lock to a waiting thread if there is one.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50203,"byte_end":50281,"line_start":177,"line_end":177,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50286,"byte_end":50289,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_upgradable_fair` followed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50294,"byte_end":50381,"line_start":179,"line_end":179,"column_start":5,"column_end":92}},{"value":"/ by `lock_upgradable`, however it can be much more efficient in the case where there","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50386,"byte_end":50473,"line_start":180,"line_end":180,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50478,"byte_end":50505,"line_start":181,"line_end":181,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":441},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50727,"byte_end":50752,"line_start":190,"line_end":190,"column_start":18,"column_end":43},"name":"RawRwLockUpgradeDowngrade","qualname":"::rwlock::RawRwLockUpgradeDowngrade","value":"RawRwLockUpgradeDowngrade: RawRwLockUpgrade + RawRwLockDowngrade","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":443}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and lock\n downgrading.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and lock","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50618,"byte_end":50692,"line_start":188,"line_end":188,"column_start":1,"column_end":75}},{"value":"/ downgrading.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50693,"byte_end":50709,"line_start":189,"line_end":189,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50857,"byte_end":50877,"line_start":192,"line_end":192,"column_start":8,"column_end":28},"name":"downgrade_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Downgrades an upgradable lock to a shared lock.\n","sig":null,"attributes":[{"value":"/ Downgrades an upgradable lock to a shared lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50798,"byte_end":50849,"line_start":191,"line_end":191,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50954,"byte_end":50977,"line_start":195,"line_end":195,"column_start":8,"column_end":31},"name":"downgrade_to_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_to_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Downgrades an exclusive lock to an upgradable lock.\n","sig":null,"attributes":[{"value":"/ Downgrades an exclusive lock to an upgradable lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50891,"byte_end":50946,"line_start":194,"line_end":194,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":444},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":51103,"byte_end":51124,"line_start":200,"line_end":200,"column_start":18,"column_end":39},"name":"RawRwLockUpgradeTimed","qualname":"::rwlock::RawRwLockUpgradeTimed","value":"RawRwLockUpgradeTimed: RawRwLockUpgrade + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and locking\n with timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and locking","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50989,"byte_end":51066,"line_start":198,"line_end":198,"column_start":1,"column_end":78}},{"value":"/ with timeouts.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":51067,"byte_end":51085,"line_start":199,"line_end":199,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":51244,"byte_end":51267,"line_start":202,"line_end":202,"column_start":8,"column_end":31},"name":"try_lock_upgradable_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":51166,"byte_end":51236,"line_start":201,"line_end":201,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":51392,"byte_end":51417,"line_start":205,"line_end":205,"column_start":8,"column_end":33},"name":"try_lock_upgradable_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":51314,"byte_end":51384,"line_start":204,"line_end":204,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":51570,"byte_end":51585,"line_start":209,"line_end":209,"column_start":8,"column_end":23},"name":"try_upgrade_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":51463,"byte_end":51534,"line_start":207,"line_end":207,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":51539,"byte_end":51562,"line_start":208,"line_end":208,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":51739,"byte_end":51756,"line_start":213,"line_end":213,"column_start":8,"column_end":25},"name":"try_upgrade_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":51632,"byte_end":51703,"line_start":211,"line_end":211,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":51708,"byte_end":51731,"line_start":212,"line_end":212,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":449},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":52508,"byte_end":52514,"line_start":228,"line_end":228,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":452},{"krate":0,"index":453}],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[{"value":"/ A reader-writer lock","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":51800,"byte_end":51824,"line_start":216,"line_end":216,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":51825,"byte_end":51828,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":51829,"byte_end":51906,"line_start":218,"line_end":218,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":51907,"byte_end":51986,"line_start":219,"line_end":219,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":51987,"byte_end":52066,"line_start":220,"line_end":220,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":52067,"byte_end":52125,"line_start":221,"line_end":221,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":52126,"byte_end":52129,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":52130,"byte_end":52207,"line_start":223,"line_end":223,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across threads and `Sync` to","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":52208,"byte_end":52288,"line_start":224,"line_end":224,"column_start":1,"column_end":81}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":52289,"byte_end":52367,"line_start":225,"line_end":225,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":52368,"byte_end":52446,"line_start":226,"line_end":226,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":52447,"byte_end":52496,"line_start":227,"line_end":227,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":53170,"byte_end":53173,"line_start":250,"line_end":250,"column_start":12,"column_end":15},"name":"new","qualname":"<RwLock<R, T>>::new","value":"fn (val: T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.\n","sig":null,"attributes":[{"value":"/ Creates a new instance of an `RwLock<T>` which is unlocked.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":53044,"byte_end":53107,"line_start":247,"line_end":247,"column_start":5,"column_end":68}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":53112,"byte_end":53144,"line_start":248,"line_end":248,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":53149,"byte_end":53158,"line_start":249,"line_end":249,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":53416,"byte_end":53426,"line_start":260,"line_end":260,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<R, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this `RwLock`, returning the underlying data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":53304,"byte_end":53362,"line_start":257,"line_end":257,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":53367,"byte_end":53376,"line_start":258,"line_end":258,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":53381,"byte_end":53404,"line_start":259,"line_end":259,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":54487,"byte_end":54491,"line_start":295,"line_end":295,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<R, T>>::read","value":"fn (&self) -> RwLockReadGuard<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":53879,"byte_end":53955,"line_start":282,"line_end":282,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":53960,"byte_end":53989,"line_start":283,"line_end":283,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":53994,"byte_end":53997,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":54002,"byte_end":54078,"line_start":285,"line_end":285,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":54083,"byte_end":54159,"line_start":286,"line_end":286,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":54164,"byte_end":54188,"line_start":287,"line_end":287,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":54193,"byte_end":54196,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ Note that attempts to recursively acquire a read lock on a `RwLock` when","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":54201,"byte_end":54277,"line_start":289,"line_end":289,"column_start":5,"column_end":81}},{"value":"/ the current thread already holds one may result in a deadlock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":54282,"byte_end":54348,"line_start":290,"line_end":290,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":54353,"byte_end":54356,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":54361,"byte_end":54433,"line_start":292,"line_end":292,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":54438,"byte_end":54461,"line_start":293,"line_end":293,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":54466,"byte_end":54475,"line_start":294,"line_end":294,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":54929,"byte_end":54937,"line_start":308,"line_end":308,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<R, T>>::try_read","value":"fn (&self) -> Option<RwLockReadGuard<R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":54595,"byte_end":54657,"line_start":300,"line_end":300,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":54662,"byte_end":54665,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":54670,"byte_end":54747,"line_start":302,"line_end":302,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":54752,"byte_end":54829,"line_start":303,"line_end":303,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":54834,"byte_end":54857,"line_start":304,"line_end":304,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":54862,"byte_end":54865,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":54870,"byte_end":54903,"line_start":306,"line_end":306,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":54908,"byte_end":54917,"line_start":307,"line_end":307,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":55487,"byte_end":55492,"line_start":325,"line_end":325,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<R, T>>::write","value":"fn (&self) -> RwLockWriteGuard<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with exclusive write access, blocking the current","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":55111,"byte_end":55184,"line_start":316,"line_end":316,"column_start":5,"column_end":78}},{"value":"/ thread until it can be acquired.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":55189,"byte_end":55225,"line_start":317,"line_end":317,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":55230,"byte_end":55233,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ This function will not return while other writers or other readers","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":55238,"byte_end":55308,"line_start":319,"line_end":319,"column_start":5,"column_end":75}},{"value":"/ currently have access to the lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":55313,"byte_end":55351,"line_start":320,"line_end":320,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":55356,"byte_end":55359,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will drop the write access of this `RwLock`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":55364,"byte_end":55439,"line_start":322,"line_end":322,"column_start":5,"column_end":80}},{"value":"/ when dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":55444,"byte_end":55461,"line_start":323,"line_end":323,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":55466,"byte_end":55475,"line_start":324,"line_end":324,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":55926,"byte_end":55935,"line_start":338,"line_end":338,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<R, T>>::try_write","value":"fn (&self) -> Option<RwLockWriteGuard<R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to lock this `RwLock` with exclusive write access.","sig":null,"attributes":[{"value":"/ Attempts to lock this `RwLock` with exclusive write access.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":55601,"byte_end":55664,"line_start":330,"line_end":330,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":55669,"byte_end":55672,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":55677,"byte_end":55753,"line_start":332,"line_end":332,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned which will release the lock when","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":55758,"byte_end":55831,"line_start":333,"line_end":333,"column_start":5,"column_end":78}},{"value":"/ it is dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":55836,"byte_end":55854,"line_start":334,"line_end":334,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":55859,"byte_end":55862,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":55867,"byte_end":55900,"line_start":336,"line_end":336,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":55905,"byte_end":55914,"line_start":337,"line_end":337,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":56362,"byte_end":56369,"line_start":351,"line_end":351,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<R, T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":56114,"byte_end":56169,"line_start":346,"line_end":346,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":56174,"byte_end":56177,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `RwLock` mutably, no actual locking needs to","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":56182,"byte_end":56258,"line_start":348,"line_end":348,"column_start":5,"column_end":81}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":56263,"byte_end":56336,"line_start":349,"line_end":349,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":56341,"byte_end":56350,"line_start":350,"line_end":350,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":56976,"byte_end":56993,"line_start":367,"line_end":367,"column_start":19,"column_end":36},"name":"force_unlock_read","qualname":"<RwLock<R, T>>::force_unlock_read","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":56445,"byte_end":56478,"line_start":355,"line_end":355,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":56483,"byte_end":56486,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":56491,"byte_end":56565,"line_start":357,"line_end":357,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":56570,"byte_end":56645,"line_start":358,"line_end":358,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":56650,"byte_end":56671,"line_start":359,"line_end":359,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":56676,"byte_end":56679,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":56684,"byte_end":56696,"line_start":361,"line_end":361,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":56701,"byte_end":56704,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":56709,"byte_end":56783,"line_start":363,"line_end":363,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":56788,"byte_end":56862,"line_start":364,"line_end":364,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":56867,"byte_end":56943,"line_start":365,"line_end":365,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":56948,"byte_end":56957,"line_start":366,"line_end":366,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57584,"byte_end":57602,"line_start":383,"line_end":383,"column_start":19,"column_end":37},"name":"force_unlock_write","qualname":"<RwLock<R, T>>::force_unlock_write","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57048,"byte_end":57082,"line_start":371,"line_end":371,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57087,"byte_end":57090,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57095,"byte_end":57169,"line_start":373,"line_end":373,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57174,"byte_end":57250,"line_start":374,"line_end":374,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57255,"byte_end":57276,"line_start":375,"line_end":375,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57281,"byte_end":57284,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57289,"byte_end":57301,"line_start":377,"line_end":377,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57306,"byte_end":57309,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57314,"byte_end":57388,"line_start":379,"line_end":379,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57393,"byte_end":57468,"line_start":380,"line_end":380,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57473,"byte_end":57551,"line_start":381,"line_end":381,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57556,"byte_end":57565,"line_start":382,"line_end":382,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":58068,"byte_end":58071,"line_start":397,"line_end":397,"column_start":19,"column_end":22},"name":"raw","qualname":"<RwLock<R, T>>::raw","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw reader-writer lock object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw reader-writer lock object.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57660,"byte_end":57717,"line_start":387,"line_end":387,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57722,"byte_end":57725,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawRwLock` trait from","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57730,"byte_end":57806,"line_start":389,"line_end":389,"column_start":5,"column_end":81}},{"value":"/ `lock_api` to be able to call functions on the raw","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57811,"byte_end":57865,"line_start":390,"line_end":390,"column_start":5,"column_end":59}},{"value":"/ reader-writer lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57870,"byte_end":57893,"line_start":391,"line_end":391,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57898,"byte_end":57901,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57906,"byte_end":57918,"line_start":393,"line_end":393,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57923,"byte_end":57926,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":57931,"byte_end":57998,"line_start":395,"line_end":395,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a lock guard.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":58003,"byte_end":58049,"line_start":396,"line_end":396,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":58727,"byte_end":58749,"line_start":415,"line_end":415,"column_start":19,"column_end":41},"name":"force_unlock_read_fair","qualname":"<RwLock<R, T>>::force_unlock_read_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock using a fair unlock procotol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":58167,"byte_end":58229,"line_start":403,"line_end":403,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":58234,"byte_end":58237,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":58242,"byte_end":58316,"line_start":405,"line_end":405,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":58321,"byte_end":58396,"line_start":406,"line_end":406,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":58401,"byte_end":58422,"line_start":407,"line_end":407,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":58427,"byte_end":58430,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":58435,"byte_end":58447,"line_start":409,"line_end":409,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":58452,"byte_end":58455,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":58460,"byte_end":58534,"line_start":411,"line_end":411,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":58539,"byte_end":58613,"line_start":412,"line_end":412,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":58618,"byte_end":58694,"line_start":413,"line_end":413,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":58699,"byte_end":58708,"line_start":414,"line_end":414,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":59374,"byte_end":59397,"line_start":431,"line_end":431,"column_start":19,"column_end":42},"name":"force_unlock_write_fair","qualname":"<RwLock<R, T>>::force_unlock_write_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock using a fair unlock procotol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":58809,"byte_end":58872,"line_start":419,"line_end":419,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":58877,"byte_end":58880,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":58885,"byte_end":58959,"line_start":421,"line_end":421,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":58964,"byte_end":59040,"line_start":422,"line_end":422,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":59045,"byte_end":59066,"line_start":423,"line_end":423,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":59071,"byte_end":59074,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":59079,"byte_end":59091,"line_start":425,"line_end":425,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":59096,"byte_end":59099,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":59104,"byte_end":59178,"line_start":427,"line_end":427,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":59183,"byte_end":59258,"line_start":428,"line_end":428,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":59263,"byte_end":59341,"line_start":429,"line_end":429,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":59346,"byte_end":59355,"line_start":430,"line_end":430,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":59849,"byte_end":59861,"line_start":444,"line_end":444,"column_start":12,"column_end":24},"name":"try_read_for","qualname":"<RwLock<R, T>>::try_read_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockReadGuard<R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":59512,"byte_end":59589,"line_start":437,"line_end":437,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":59594,"byte_end":59609,"line_start":438,"line_end":438,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":59614,"byte_end":59617,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":59622,"byte_end":59693,"line_start":440,"line_end":440,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":59698,"byte_end":59769,"line_start":441,"line_end":441,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":59774,"byte_end":59823,"line_start":442,"line_end":442,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":59828,"byte_end":59837,"line_start":443,"line_end":443,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":60405,"byte_end":60419,"line_start":459,"line_end":459,"column_start":12,"column_end":26},"name":"try_read_until","qualname":"<RwLock<R, T>>::try_read_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockReadGuard<R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":60068,"byte_end":60145,"line_start":452,"line_end":452,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":60150,"byte_end":60165,"line_start":453,"line_end":453,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":60170,"byte_end":60173,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":60178,"byte_end":60249,"line_start":455,"line_end":455,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":60254,"byte_end":60325,"line_start":456,"line_end":456,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":60330,"byte_end":60379,"line_start":457,"line_end":457,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":60384,"byte_end":60393,"line_start":458,"line_end":458,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":60971,"byte_end":60984,"line_start":474,"line_end":474,"column_start":12,"column_end":25},"name":"try_write_for","qualname":"<RwLock<R, T>>::try_write_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockWriteGuard<R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":60627,"byte_end":60700,"line_start":467,"line_end":467,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":60705,"byte_end":60728,"line_start":468,"line_end":468,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":60733,"byte_end":60736,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":60741,"byte_end":60812,"line_start":470,"line_end":470,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":60817,"byte_end":60888,"line_start":471,"line_end":471,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":60893,"byte_end":60945,"line_start":472,"line_end":472,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":60950,"byte_end":60959,"line_start":473,"line_end":473,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":61540,"byte_end":61555,"line_start":489,"line_end":489,"column_start":12,"column_end":27},"name":"try_write_until","qualname":"<RwLock<R, T>>::try_write_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockWriteGuard<R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":61196,"byte_end":61269,"line_start":482,"line_end":482,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":61274,"byte_end":61297,"line_start":483,"line_end":483,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":61302,"byte_end":61305,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":61310,"byte_end":61381,"line_start":485,"line_end":485,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":61386,"byte_end":61457,"line_start":486,"line_end":486,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":61462,"byte_end":61514,"line_start":487,"line_end":487,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":61519,"byte_end":61528,"line_start":488,"line_end":488,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":62617,"byte_end":62631,"line_start":515,"line_end":515,"column_start":12,"column_end":26},"name":"read_recursive","qualname":"<RwLock<R, T>>::read_recursive","value":"fn (&self) -> RwLockReadGuard<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":61824,"byte_end":61900,"line_start":499,"line_end":499,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":61905,"byte_end":61934,"line_start":500,"line_end":500,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":61939,"byte_end":61942,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":61947,"byte_end":62023,"line_start":502,"line_end":502,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":62028,"byte_end":62104,"line_start":503,"line_end":503,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":62109,"byte_end":62133,"line_start":504,"line_end":504,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":62138,"byte_end":62141,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ Unlike `read`, this method is guaranteed to succeed without blocking if","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":62146,"byte_end":62221,"line_start":506,"line_end":506,"column_start":5,"column_end":80}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":62226,"byte_end":62301,"line_start":507,"line_end":507,"column_start":5,"column_end":80}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":62306,"byte_end":62377,"line_start":508,"line_end":508,"column_start":5,"column_end":76}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":62382,"byte_end":62456,"line_start":509,"line_end":509,"column_start":5,"column_end":79}},{"value":"/ for the lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":62461,"byte_end":62478,"line_start":510,"line_end":510,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":62483,"byte_end":62486,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":62491,"byte_end":62563,"line_start":512,"line_end":512,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":62568,"byte_end":62591,"line_start":513,"line_end":513,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":62596,"byte_end":62605,"line_start":514,"line_end":514,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":63250,"byte_end":63268,"line_start":531,"line_end":531,"column_start":12,"column_end":30},"name":"try_read_recursive","qualname":"<RwLock<R, T>>::try_read_recursive","value":"fn (&self) -> Option<RwLockReadGuard<R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":62745,"byte_end":62807,"line_start":520,"line_end":520,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":62812,"byte_end":62815,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":62820,"byte_end":62897,"line_start":522,"line_end":522,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":62902,"byte_end":62979,"line_start":523,"line_end":523,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":62984,"byte_end":63007,"line_start":524,"line_end":524,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":63012,"byte_end":63015,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed if another read lock is held at the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":63020,"byte_end":63096,"line_start":526,"line_end":526,"column_start":5,"column_end":81}},{"value":"/ time of the call. See the documentation for `read_recursive` for details.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":63101,"byte_end":63178,"line_start":527,"line_end":527,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":63183,"byte_end":63186,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":63191,"byte_end":63224,"line_start":529,"line_end":529,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":63229,"byte_end":63238,"line_start":530,"line_end":530,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":64046,"byte_end":64068,"line_start":552,"line_end":552,"column_start":12,"column_end":34},"name":"try_read_recursive_for","qualname":"<RwLock<R, T>>::try_read_recursive_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockReadGuard<R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":63513,"byte_end":63590,"line_start":541,"line_end":541,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":63595,"byte_end":63610,"line_start":542,"line_end":542,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":63615,"byte_end":63618,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":63623,"byte_end":63694,"line_start":544,"line_end":544,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":63699,"byte_end":63770,"line_start":545,"line_end":545,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":63775,"byte_end":63824,"line_start":546,"line_end":546,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":63829,"byte_end":63832,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed without blocking if another read","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":63837,"byte_end":63910,"line_start":548,"line_end":548,"column_start":5,"column_end":78}},{"value":"/ lock is held at the time of the call. See the documentation for","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":63915,"byte_end":63982,"line_start":549,"line_end":549,"column_start":5,"column_end":72}},{"value":"/ `read_recursive` for details.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":63987,"byte_end":64020,"line_start":550,"line_end":550,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":64025,"byte_end":64034,"line_start":551,"line_end":551,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":64622,"byte_end":64646,"line_start":567,"line_end":567,"column_start":12,"column_end":36},"name":"try_read_recursive_until","qualname":"<RwLock<R, T>>::try_read_recursive_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockReadGuard<R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":64285,"byte_end":64362,"line_start":560,"line_end":560,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":64367,"byte_end":64382,"line_start":561,"line_end":561,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":64387,"byte_end":64390,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":64395,"byte_end":64466,"line_start":563,"line_end":563,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":64471,"byte_end":64542,"line_start":564,"line_end":564,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":64547,"byte_end":64596,"line_start":565,"line_end":565,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":64601,"byte_end":64610,"line_start":566,"line_end":566,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":65590,"byte_end":65605,"line_start":595,"line_end":595,"column_start":12,"column_end":27},"name":"upgradable_read","qualname":"<RwLock<R, T>>::upgradable_read","value":"fn (&self) -> RwLockUpgradableReadGuard<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with upgradable read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with upgradable read access, blocking the current thread","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":65112,"byte_end":65192,"line_start":585,"line_end":585,"column_start":5,"column_end":85}},{"value":"/ until it can be acquired.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":65197,"byte_end":65226,"line_start":586,"line_end":586,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":65231,"byte_end":65234,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers or other","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":65239,"byte_end":65318,"line_start":588,"line_end":588,"column_start":5,"column_end":84}},{"value":"/ upgradable reads which hold the lock. There may be other readers currently","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":65323,"byte_end":65401,"line_start":589,"line_end":589,"column_start":5,"column_end":83}},{"value":"/ inside the lock when this method returns.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":65406,"byte_end":65451,"line_start":590,"line_end":590,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":65456,"byte_end":65459,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":65464,"byte_end":65536,"line_start":592,"line_end":592,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":65541,"byte_end":65564,"line_start":593,"line_end":593,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":65569,"byte_end":65578,"line_start":594,"line_end":594,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":66067,"byte_end":66086,"line_start":608,"line_end":608,"column_start":12,"column_end":31},"name":"try_upgradable_read","qualname":"<RwLock<R, T>>::try_upgradable_read","value":"fn (&self) -> Option<RwLockUpgradableReadGuard<R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":65729,"byte_end":65795,"line_start":600,"line_end":600,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":65800,"byte_end":65803,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":65808,"byte_end":65885,"line_start":602,"line_end":602,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":65890,"byte_end":65967,"line_start":603,"line_end":603,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":65972,"byte_end":65995,"line_start":604,"line_end":604,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":66000,"byte_end":66003,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":66008,"byte_end":66041,"line_start":606,"line_end":606,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":66046,"byte_end":66055,"line_start":607,"line_end":607,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":66680,"byte_end":66703,"line_start":625,"line_end":625,"column_start":12,"column_end":35},"name":"try_upgradable_read_for","qualname":"<RwLock<R, T>>::try_upgradable_read_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockUpgradableReadGuard<R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":66339,"byte_end":66420,"line_start":618,"line_end":618,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":66425,"byte_end":66440,"line_start":619,"line_end":619,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":66445,"byte_end":66448,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":66453,"byte_end":66524,"line_start":621,"line_end":621,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":66529,"byte_end":66600,"line_start":622,"line_end":622,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":66605,"byte_end":66654,"line_start":623,"line_end":623,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":66659,"byte_end":66668,"line_start":624,"line_end":624,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":67294,"byte_end":67319,"line_start":643,"line_end":643,"column_start":12,"column_end":37},"name":"try_upgradable_read_until","qualname":"<RwLock<R, T>>::try_upgradable_read_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockUpgradableReadGuard<R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":66953,"byte_end":67034,"line_start":636,"line_end":636,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":67039,"byte_end":67054,"line_start":637,"line_end":637,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":67059,"byte_end":67062,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":67067,"byte_end":67138,"line_start":639,"line_end":639,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":67143,"byte_end":67214,"line_start":640,"line_end":640,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":67219,"byte_end":67268,"line_start":641,"line_end":641,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":67273,"byte_end":67282,"line_start":642,"line_end":642,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":523},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":68292,"byte_end":68307,"line_start":681,"line_end":681,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":527},{"krate":0,"index":528}],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the shared read access of a lock when","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":68183,"byte_end":68255,"line_start":678,"line_end":678,"column_start":1,"column_end":73}},{"value":"/ dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":68256,"byte_end":68268,"line_start":679,"line_end":679,"column_start":1,"column_end":13}},{"value":"must_use","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":68269,"byte_end":68280,"line_start":680,"line_end":680,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":68683,"byte_end":68689,"line_start":690,"line_end":690,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockReadGuard>::rwlock","value":"fn (s: &Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":68605,"byte_end":68671,"line_start":689,"line_end":689,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":69169,"byte_end":69172,"line_start":703,"line_end":703,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockReadGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockReadGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":68750,"byte_end":68824,"line_start":694,"line_end":694,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":68829,"byte_end":68832,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":68837,"byte_end":68899,"line_start":696,"line_end":696,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":68904,"byte_end":68935,"line_start":697,"line_end":697,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":68940,"byte_end":68943,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":68948,"byte_end":68999,"line_start":699,"line_end":699,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":69004,"byte_end":69085,"line_start":700,"line_end":700,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":69090,"byte_end":69143,"line_start":701,"line_end":701,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":69148,"byte_end":69157,"line_start":702,"line_end":702,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":70016,"byte_end":70023,"line_start":727,"line_end":727,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockReadGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockReadGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":69516,"byte_end":69590,"line_start":717,"line_end":717,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":69595,"byte_end":69671,"line_start":718,"line_end":718,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":69676,"byte_end":69679,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":69684,"byte_end":69746,"line_start":720,"line_end":720,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":69751,"byte_end":69782,"line_start":721,"line_end":721,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":69787,"byte_end":69790,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":69795,"byte_end":69846,"line_start":723,"line_end":723,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":69851,"byte_end":69932,"line_start":724,"line_end":724,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":69937,"byte_end":69990,"line_start":725,"line_end":725,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":69995,"byte_end":70004,"line_start":726,"line_end":726,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":70775,"byte_end":70783,"line_start":751,"line_end":751,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockReadGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":70478,"byte_end":70545,"line_start":744,"line_end":744,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":70550,"byte_end":70553,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":70558,"byte_end":70610,"line_start":746,"line_end":746,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":70615,"byte_end":70618,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":70623,"byte_end":70691,"line_start":748,"line_end":748,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":70696,"byte_end":70749,"line_start":749,"line_end":749,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":70754,"byte_end":70763,"line_start":750,"line_end":750,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":71841,"byte_end":71852,"line_start":775,"line_end":775,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockReadGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":71040,"byte_end":71094,"line_start":762,"line_end":762,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":71099,"byte_end":71102,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":71107,"byte_end":71181,"line_start":764,"line_end":764,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":71186,"byte_end":71261,"line_start":765,"line_end":765,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":71266,"byte_end":71339,"line_start":766,"line_end":766,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":71344,"byte_end":71413,"line_start":767,"line_end":767,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":71418,"byte_end":71495,"line_start":768,"line_end":768,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":71500,"byte_end":71567,"line_start":769,"line_end":769,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":71572,"byte_end":71575,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":71580,"byte_end":71656,"line_start":771,"line_end":771,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":71661,"byte_end":71737,"line_start":772,"line_end":772,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockReadGuard` normally.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":71742,"byte_end":71815,"line_start":773,"line_end":773,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":71820,"byte_end":71829,"line_start":774,"line_end":774,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":72239,"byte_end":72252,"line_start":787,"line_end":787,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockReadGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":71942,"byte_end":72009,"line_start":780,"line_end":780,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":72014,"byte_end":72017,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":72022,"byte_end":72074,"line_start":782,"line_end":782,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":72079,"byte_end":72082,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":72087,"byte_end":72155,"line_start":784,"line_end":784,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":72160,"byte_end":72213,"line_start":785,"line_end":785,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":72218,"byte_end":72227,"line_start":786,"line_end":786,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":72736,"byte_end":72740,"line_start":802,"line_end":802,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockReadGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":72436,"byte_end":72508,"line_start":796,"line_end":796,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":72513,"byte_end":72516,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":72521,"byte_end":72597,"line_start":798,"line_end":798,"column_start":5,"column_end":81}},{"value":"/ by `read`, however it can be much more efficient in the case where there","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":72602,"byte_end":72678,"line_start":799,"line_end":799,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":72683,"byte_end":72710,"line_start":800,"line_end":800,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":72715,"byte_end":72724,"line_start":801,"line_end":801,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":571},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":73413,"byte_end":73429,"line_start":828,"line_end":828,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":575},{"krate":0,"index":576}],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the exclusive write access of a lock when","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":73300,"byte_end":73376,"line_start":825,"line_end":825,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":73377,"byte_end":73389,"line_start":826,"line_end":826,"column_start":1,"column_end":13}},{"value":"must_use","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":73390,"byte_end":73401,"line_start":827,"line_end":827,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":73811,"byte_end":73817,"line_start":837,"line_end":837,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockWriteGuard>::rwlock","value":"fn (s: &Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":73733,"byte_end":73799,"line_start":836,"line_end":836,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":74300,"byte_end":74303,"line_start":850,"line_end":850,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockWriteGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockWriteGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":73878,"byte_end":73953,"line_start":841,"line_end":841,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":73958,"byte_end":73961,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":73966,"byte_end":74029,"line_start":843,"line_end":843,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":74034,"byte_end":74065,"line_start":844,"line_end":844,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":74070,"byte_end":74073,"line_start":845,"line_end":845,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":74078,"byte_end":74129,"line_start":846,"line_end":846,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":74134,"byte_end":74216,"line_start":847,"line_end":847,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":74221,"byte_end":74274,"line_start":848,"line_end":848,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":74279,"byte_end":74288,"line_start":849,"line_end":849,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":75164,"byte_end":75171,"line_start":874,"line_end":874,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockWriteGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockWriteGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":74661,"byte_end":74736,"line_start":864,"line_end":864,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":74741,"byte_end":74817,"line_start":865,"line_end":865,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":74822,"byte_end":74825,"line_start":866,"line_end":866,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":74830,"byte_end":74893,"line_start":867,"line_end":867,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":74898,"byte_end":74929,"line_start":868,"line_end":868,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":74934,"byte_end":74937,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":74942,"byte_end":74993,"line_start":870,"line_end":870,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":74998,"byte_end":75080,"line_start":871,"line_end":871,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":75085,"byte_end":75138,"line_start":872,"line_end":872,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":75143,"byte_end":75152,"line_start":873,"line_end":873,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":75872,"byte_end":75880,"line_start":896,"line_end":896,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockWriteGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":75640,"byte_end":75707,"line_start":891,"line_end":891,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":75712,"byte_end":75715,"line_start":892,"line_end":892,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":75720,"byte_end":75788,"line_start":893,"line_end":893,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":75793,"byte_end":75846,"line_start":894,"line_end":894,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":75851,"byte_end":75860,"line_start":895,"line_end":895,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":76491,"byte_end":76500,"line_start":913,"line_end":913,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"fn (s: Self) -> RwLockReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into a read lock without allowing any","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":76149,"byte_end":76225,"line_start":907,"line_end":907,"column_start":5,"column_end":81}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":76230,"byte_end":76295,"line_start":908,"line_end":908,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":76300,"byte_end":76303,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":76308,"byte_end":76381,"line_start":910,"line_end":910,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":76386,"byte_end":76459,"line_start":911,"line_end":911,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":76464,"byte_end":76479,"line_start":912,"line_end":912,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":77175,"byte_end":77198,"line_start":931,"line_end":931,"column_start":12,"column_end":35},"name":"downgrade_to_upgradable","qualname":"<RwLockWriteGuard>::downgrade_to_upgradable","value":"fn (s: Self) -> RwLockUpgradableReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into an upgradable read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into an upgradable read lock without allowing any","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":76821,"byte_end":76909,"line_start":925,"line_end":925,"column_start":5,"column_end":93}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":76914,"byte_end":76979,"line_start":926,"line_end":926,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":76984,"byte_end":76987,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":76992,"byte_end":77065,"line_start":928,"line_end":928,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":77070,"byte_end":77143,"line_start":929,"line_end":929,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":77148,"byte_end":77163,"line_start":930,"line_end":930,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":78343,"byte_end":78354,"line_start":956,"line_end":956,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockWriteGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":77541,"byte_end":77595,"line_start":943,"line_end":943,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":77600,"byte_end":77603,"line_start":944,"line_end":944,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":77608,"byte_end":77682,"line_start":945,"line_end":945,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":77687,"byte_end":77762,"line_start":946,"line_end":946,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":77767,"byte_end":77840,"line_start":947,"line_end":947,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":77845,"byte_end":77914,"line_start":948,"line_end":948,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":77919,"byte_end":77996,"line_start":949,"line_end":949,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":78001,"byte_end":78068,"line_start":950,"line_end":950,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":78073,"byte_end":78076,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":78081,"byte_end":78157,"line_start":952,"line_end":952,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":78162,"byte_end":78238,"line_start":953,"line_end":953,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockWriteGuard` normally.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":78243,"byte_end":78317,"line_start":954,"line_end":954,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":78322,"byte_end":78331,"line_start":955,"line_end":955,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":78744,"byte_end":78757,"line_start":968,"line_end":968,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockWriteGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":78447,"byte_end":78514,"line_start":961,"line_end":961,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":78519,"byte_end":78522,"line_start":962,"line_end":962,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":78527,"byte_end":78579,"line_start":963,"line_end":963,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":78584,"byte_end":78587,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":78592,"byte_end":78660,"line_start":965,"line_end":965,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":78665,"byte_end":78718,"line_start":966,"line_end":966,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":78723,"byte_end":78732,"line_start":967,"line_end":967,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":79248,"byte_end":79252,"line_start":983,"line_end":983,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockWriteGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":78947,"byte_end":79019,"line_start":977,"line_end":977,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":79024,"byte_end":79027,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":79032,"byte_end":79108,"line_start":979,"line_end":979,"column_start":5,"column_end":81}},{"value":"/ by `write`, however it can be much more efficient in the case where there","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":79113,"byte_end":79190,"line_start":980,"line_end":980,"column_start":5,"column_end":82}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":79195,"byte_end":79222,"line_start":981,"line_end":981,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":79227,"byte_end":79236,"line_start":982,"line_end":982,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":634},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":80131,"byte_end":80156,"line_start":1016,"line_end":1016,"column_start":12,"column_end":37},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"RwLockUpgradableReadGuard {  }","parent":null,"children":[{"krate":0,"index":638},{"krate":0,"index":639}],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the upgradable read access of a lock when","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":80018,"byte_end":80094,"line_start":1013,"line_end":1013,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":80095,"byte_end":80107,"line_start":1014,"line_end":1014,"column_start":1,"column_end":13}},{"value":"must_use","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":80108,"byte_end":80119,"line_start":1015,"line_end":1015,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":80577,"byte_end":80583,"line_start":1027,"line_end":1027,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockUpgradableReadGuard>::rwlock","value":"fn (s: &Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":80499,"byte_end":80565,"line_start":1026,"line_end":1026,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":80876,"byte_end":80884,"line_start":1036,"line_end":1036,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockUpgradableReadGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":80644,"byte_end":80711,"line_start":1031,"line_end":1031,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":80716,"byte_end":80719,"line_start":1032,"line_end":1032,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":80724,"byte_end":80792,"line_start":1033,"line_end":1033,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":80797,"byte_end":80850,"line_start":1034,"line_end":1034,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":80855,"byte_end":80864,"line_start":1035,"line_end":1035,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":81225,"byte_end":81232,"line_start":1047,"line_end":1047,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradableReadGuard>::upgrade","value":"fn (s: Self) -> RwLockWriteGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically upgrades an upgradable read lock lock into a exclusive write lock,\n blocking the current thread until it can be aquired.\n","sig":null,"attributes":[{"value":"/ Atomically upgrades an upgradable read lock lock into a exclusive write lock,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":81071,"byte_end":81152,"line_start":1045,"line_end":1045,"column_start":5,"column_end":86}},{"value":"/ blocking the current thread until it can be aquired.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":81157,"byte_end":81213,"line_start":1046,"line_end":1046,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":81659,"byte_end":81670,"line_start":1060,"line_end":1060,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradableReadGuard>::try_upgrade","value":"fn (s: Self) -> Result<RwLockWriteGuard<'a, R, T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":81462,"byte_end":81546,"line_start":1057,"line_end":1057,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":81551,"byte_end":81554,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then the current guard is returned.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":81559,"byte_end":81647,"line_start":1059,"line_end":1059,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":82902,"byte_end":82913,"line_start":1088,"line_end":1088,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockUpgradableReadGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":82091,"byte_end":82145,"line_start":1075,"line_end":1075,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":82150,"byte_end":82153,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":82158,"byte_end":82232,"line_start":1077,"line_end":1077,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":82237,"byte_end":82312,"line_start":1078,"line_end":1078,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":82317,"byte_end":82390,"line_start":1079,"line_end":1079,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":82395,"byte_end":82464,"line_start":1080,"line_end":1080,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":82469,"byte_end":82546,"line_start":1081,"line_end":1081,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":82551,"byte_end":82618,"line_start":1082,"line_end":1082,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":82623,"byte_end":82626,"line_start":1083,"line_end":1083,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":82631,"byte_end":82707,"line_start":1084,"line_end":1084,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":82712,"byte_end":82788,"line_start":1085,"line_end":1085,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockUpgradableReadGuard` normally.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":82793,"byte_end":82876,"line_start":1086,"line_end":1086,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":82881,"byte_end":82890,"line_start":1087,"line_end":1087,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":83304,"byte_end":83317,"line_start":1100,"line_end":1100,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockUpgradableReadGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":83007,"byte_end":83074,"line_start":1093,"line_end":1093,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":83079,"byte_end":83082,"line_start":1094,"line_end":1094,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":83087,"byte_end":83139,"line_start":1095,"line_end":1095,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":83144,"byte_end":83147,"line_start":1096,"line_end":1096,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":83152,"byte_end":83220,"line_start":1097,"line_end":1097,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":83225,"byte_end":83278,"line_start":1098,"line_end":1098,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":83283,"byte_end":83292,"line_start":1099,"line_end":1099,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":83820,"byte_end":83824,"line_start":1115,"line_end":1115,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockUpgradableReadGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":83509,"byte_end":83581,"line_start":1109,"line_end":1109,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":83586,"byte_end":83589,"line_start":1110,"line_end":1110,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":83594,"byte_end":83670,"line_start":1111,"line_end":1111,"column_start":5,"column_end":81}},{"value":"/ by `upgradable_read`, however it can be much more efficient in the case where there","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":83675,"byte_end":83762,"line_start":1112,"line_end":1112,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":83767,"byte_end":83794,"line_start":1113,"line_end":1113,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":83799,"byte_end":83808,"line_start":1114,"line_end":1114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":84365,"byte_end":84374,"line_start":1128,"line_end":1128,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradableReadGuard>::downgrade","value":"fn (s: Self) -> RwLockReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades an upgradable read lock lock into a shared read lock\n without allowing any writers to take exclusive access of the lock in the\n meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades an upgradable read lock lock into a shared read lock","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":83992,"byte_end":84070,"line_start":1121,"line_end":1121,"column_start":5,"column_end":83}},{"value":"/ without allowing any writers to take exclusive access of the lock in the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":84075,"byte_end":84151,"line_start":1122,"line_end":1122,"column_start":5,"column_end":81}},{"value":"/ meantime.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":84156,"byte_end":84169,"line_start":1123,"line_end":1123,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":84174,"byte_end":84177,"line_start":1124,"line_end":1124,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":84182,"byte_end":84255,"line_start":1125,"line_end":1125,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":84260,"byte_end":84333,"line_start":1126,"line_end":1126,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":84338,"byte_end":84353,"line_start":1127,"line_end":1127,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":84966,"byte_end":84981,"line_start":1145,"line_end":1145,"column_start":12,"column_end":27},"name":"try_upgrade_for","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_for","value":"fn (s: Self, timeout: R::Duration) -> Result<RwLockWriteGuard<'a, R, T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":84711,"byte_end":84783,"line_start":1140,"line_end":1140,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":84788,"byte_end":84831,"line_start":1141,"line_end":1141,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":84836,"byte_end":84839,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":84844,"byte_end":84915,"line_start":1143,"line_end":1143,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":84920,"byte_end":84954,"line_start":1144,"line_end":1144,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":85632,"byte_end":85649,"line_start":1167,"line_end":1167,"column_start":12,"column_end":29},"name":"try_upgrade_until","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_until","value":"fn (s: Self, timeout: R::Instant) -> Result<RwLockWriteGuard<'a, R, T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":85363,"byte_end":85435,"line_start":1161,"line_end":1161,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":85440,"byte_end":85483,"line_start":1162,"line_end":1162,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":85488,"byte_end":85491,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":85496,"byte_end":85567,"line_start":1164,"line_end":1164,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":85572,"byte_end":85606,"line_start":1165,"line_end":1165,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":85611,"byte_end":85620,"line_start":1166,"line_end":1166,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":689},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":86994,"byte_end":87015,"line_start":1212,"line_end":1212,"column_start":12,"column_end":33},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"MappedRwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695}],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":86587,"byte_end":86671,"line_start":1204,"line_end":1204,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":86672,"byte_end":86707,"line_start":1205,"line_end":1205,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":86708,"byte_end":86711,"line_start":1206,"line_end":1206,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":86712,"byte_end":86801,"line_start":1207,"line_end":1207,"column_start":1,"column_end":90}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":86802,"byte_end":86877,"line_start":1208,"line_end":1208,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":86878,"byte_end":86958,"line_start":1209,"line_end":1209,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":86959,"byte_end":86970,"line_start":1210,"line_end":1210,"column_start":1,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":86971,"byte_end":86982,"line_start":1211,"line_end":1211,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":87870,"byte_end":87873,"line_start":1233,"line_end":1233,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockReadGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockReadGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":87439,"byte_end":87513,"line_start":1224,"line_end":1224,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":87518,"byte_end":87521,"line_start":1225,"line_end":1225,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":87526,"byte_end":87594,"line_start":1226,"line_end":1226,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":87599,"byte_end":87630,"line_start":1227,"line_end":1227,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":87635,"byte_end":87638,"line_start":1228,"line_end":1228,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":87643,"byte_end":87694,"line_start":1229,"line_end":1229,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":87699,"byte_end":87786,"line_start":1230,"line_end":1230,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":87791,"byte_end":87844,"line_start":1231,"line_end":1231,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":87849,"byte_end":87858,"line_start":1232,"line_end":1232,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":88708,"byte_end":88715,"line_start":1257,"line_end":1257,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockReadGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockReadGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":88196,"byte_end":88270,"line_start":1247,"line_end":1247,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":88275,"byte_end":88351,"line_start":1248,"line_end":1248,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":88356,"byte_end":88359,"line_start":1249,"line_end":1249,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":88364,"byte_end":88432,"line_start":1250,"line_end":1250,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":88437,"byte_end":88468,"line_start":1251,"line_end":1251,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":88473,"byte_end":88476,"line_start":1252,"line_end":1252,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":88481,"byte_end":88532,"line_start":1253,"line_end":1253,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":88537,"byte_end":88624,"line_start":1254,"line_end":1254,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":88629,"byte_end":88682,"line_start":1255,"line_end":1255,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":88687,"byte_end":88696,"line_start":1256,"line_end":1256,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":90040,"byte_end":90051,"line_start":1289,"line_end":1289,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockReadGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":89233,"byte_end":89287,"line_start":1276,"line_end":1276,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":89292,"byte_end":89295,"line_start":1277,"line_end":1277,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":89300,"byte_end":89374,"line_start":1278,"line_end":1278,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":89379,"byte_end":89454,"line_start":1279,"line_end":1279,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":89459,"byte_end":89532,"line_start":1280,"line_end":1280,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":89537,"byte_end":89606,"line_start":1281,"line_end":1281,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":89611,"byte_end":89688,"line_start":1282,"line_end":1282,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":89693,"byte_end":89760,"line_start":1283,"line_end":1283,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":89765,"byte_end":89768,"line_start":1284,"line_end":1284,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":89773,"byte_end":89849,"line_start":1285,"line_end":1285,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":89854,"byte_end":89930,"line_start":1286,"line_end":1286,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockReadGuard` normally.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":89935,"byte_end":90014,"line_start":1287,"line_end":1287,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":90019,"byte_end":90028,"line_start":1288,"line_end":1288,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":734},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":91043,"byte_end":91065,"line_start":1323,"line_end":1323,"column_start":12,"column_end":34},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"MappedRwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740}],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":90632,"byte_end":90718,"line_start":1315,"line_end":1315,"column_start":1,"column_end":87}},{"value":"/ subfield of the protected data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":90719,"byte_end":90754,"line_start":1316,"line_end":1316,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":90755,"byte_end":90758,"line_start":1317,"line_end":1317,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":90759,"byte_end":90850,"line_start":1318,"line_end":1318,"column_start":1,"column_end":92}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":90851,"byte_end":90926,"line_start":1319,"line_end":1319,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":90927,"byte_end":91007,"line_start":1320,"line_end":1320,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":91008,"byte_end":91019,"line_start":1321,"line_end":1321,"column_start":1,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":91020,"byte_end":91031,"line_start":1322,"line_end":1322,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":753},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":91932,"byte_end":91935,"line_start":1346,"line_end":1346,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockWriteGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockWriteGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":91498,"byte_end":91573,"line_start":1337,"line_end":1337,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":91578,"byte_end":91581,"line_start":1338,"line_end":1338,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":91586,"byte_end":91655,"line_start":1339,"line_end":1339,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":91660,"byte_end":91691,"line_start":1340,"line_end":1340,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":91696,"byte_end":91699,"line_start":1341,"line_end":1341,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":91704,"byte_end":91755,"line_start":1342,"line_end":1342,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":91760,"byte_end":91848,"line_start":1343,"line_end":1343,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":91853,"byte_end":91906,"line_start":1344,"line_end":1344,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":91911,"byte_end":91920,"line_start":1345,"line_end":1345,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":92787,"byte_end":92794,"line_start":1370,"line_end":1370,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockWriteGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockWriteGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":92272,"byte_end":92347,"line_start":1360,"line_end":1360,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":92352,"byte_end":92428,"line_start":1361,"line_end":1361,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":92433,"byte_end":92436,"line_start":1362,"line_end":1362,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":92441,"byte_end":92510,"line_start":1363,"line_end":1363,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":92515,"byte_end":92546,"line_start":1364,"line_end":1364,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":92551,"byte_end":92554,"line_start":1365,"line_end":1365,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":92559,"byte_end":92610,"line_start":1366,"line_end":1366,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":92615,"byte_end":92703,"line_start":1367,"line_end":1367,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":92708,"byte_end":92761,"line_start":1368,"line_end":1368,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":92766,"byte_end":92775,"line_start":1369,"line_end":1369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":93674,"byte_end":93683,"line_start":1395,"line_end":1395,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<MappedRwLockWriteGuard>::downgrade","value":"fn (s: Self) -> MappedRwLockReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into a read lock without allowing any","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":93332,"byte_end":93408,"line_start":1389,"line_end":1389,"column_start":5,"column_end":81}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":93413,"byte_end":93478,"line_start":1390,"line_end":1390,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":93483,"byte_end":93486,"line_start":1391,"line_end":1391,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":93491,"byte_end":93564,"line_start":1392,"line_end":1392,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":93569,"byte_end":93642,"line_start":1393,"line_end":1393,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":93647,"byte_end":93662,"line_start":1394,"line_end":1394,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":94847,"byte_end":94858,"line_start":1422,"line_end":1422,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockWriteGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":94039,"byte_end":94093,"line_start":1409,"line_end":1409,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":94098,"byte_end":94101,"line_start":1410,"line_end":1410,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":94106,"byte_end":94180,"line_start":1411,"line_end":1411,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":94185,"byte_end":94260,"line_start":1412,"line_end":1412,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":94265,"byte_end":94338,"line_start":1413,"line_end":1413,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":94343,"byte_end":94412,"line_start":1414,"line_end":1414,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":94417,"byte_end":94494,"line_start":1415,"line_end":1415,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":94499,"byte_end":94566,"line_start":1416,"line_end":1416,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":94571,"byte_end":94574,"line_start":1417,"line_end":1417,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":94579,"byte_end":94655,"line_start":1418,"line_end":1418,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":94660,"byte_end":94736,"line_start":1419,"line_end":1419,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockWriteGuard` normally.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":94741,"byte_end":94821,"line_start":1420,"line_end":1420,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":94826,"byte_end":94835,"line_start":1421,"line_end":1421,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":7461,"byte_end":7466,"line_start":96,"line_end":96,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":7535,"byte_end":7540,"line_start":97,"line_end":97,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":7572,"byte_end":7577,"line_start":99,"line_end":99,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":8312,"byte_end":8317,"line_start":128,"line_end":128,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10944,"byte_end":10949,"line_start":208,"line_end":208,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":11601,"byte_end":11606,"line_start":226,"line_end":226,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":12669,"byte_end":12674,"line_start":256,"line_end":256,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":12812,"byte_end":12817,"line_start":263,"line_end":263,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":12963,"byte_end":12968,"line_start":270,"line_end":270,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":13722,"byte_end":13732,"line_start":290,"line_end":290,"column_start":74,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":13790,"byte_end":13800,"line_start":292,"line_end":292,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":16091,"byte_end":16101,"line_start":363,"line_end":363,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":17869,"byte_end":17879,"line_start":409,"line_end":409,"column_start":54,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":18063,"byte_end":18073,"line_start":417,"line_end":417,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":18248,"byte_end":18258,"line_start":424,"line_end":424,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":18451,"byte_end":18461,"line_start":432,"line_end":432,"column_start":69,"column_end":79},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":19071,"byte_end":19087,"line_start":449,"line_end":449,"column_start":9,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":19160,"byte_end":19176,"line_start":451,"line_end":451,"column_start":60,"column_end":76},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":19265,"byte_end":19281,"line_start":455,"line_end":455,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":21030,"byte_end":21046,"line_start":507,"line_end":507,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":21982,"byte_end":21998,"line_start":527,"line_end":527,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":22170,"byte_end":22186,"line_start":535,"line_end":535,"column_start":57,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":22349,"byte_end":22365,"line_start":542,"line_end":542,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":22552,"byte_end":22568,"line_start":550,"line_end":550,"column_start":69,"column_end":85},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":24000,"byte_end":24017,"line_start":46,"line_end":46,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":217},{"krate":0,"index":219},{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":25205,"byte_end":25222,"line_start":92,"line_end":92,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":25849,"byte_end":25866,"line_start":115,"line_end":115,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":26848,"byte_end":26862,"line_start":144,"line_end":144,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":26961,"byte_end":26975,"line_start":147,"line_end":147,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":27026,"byte_end":27040,"line_start":150,"line_end":150,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":28224,"byte_end":28238,"line_start":189,"line_end":189,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":31075,"byte_end":31089,"line_start":270,"line_end":270,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":31778,"byte_end":31792,"line_start":288,"line_end":288,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":32898,"byte_end":32912,"line_start":318,"line_end":318,"column_start":68,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":33090,"byte_end":33104,"line_start":325,"line_end":325,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":33290,"byte_end":33304,"line_start":332,"line_end":332,"column_start":74,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":34193,"byte_end":34212,"line_start":356,"line_end":356,"column_start":9,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":34294,"byte_end":34313,"line_start":359,"line_end":359,"column_start":65,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":311},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":36753,"byte_end":36772,"line_start":431,"line_end":431,"column_start":5,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":38585,"byte_end":38604,"line_start":479,"line_end":479,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":332},{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":38814,"byte_end":38833,"line_start":489,"line_end":489,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":339}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":39056,"byte_end":39075,"line_start":499,"line_end":499,"column_start":9,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":39793,"byte_end":39818,"line_start":517,"line_end":517,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":39904,"byte_end":39929,"line_start":521,"line_end":521,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":363},{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":41778,"byte_end":41803,"line_start":575,"line_end":575,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":42776,"byte_end":42801,"line_start":597,"line_end":597,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":42997,"byte_end":43022,"line_start":607,"line_end":607,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":43237,"byte_end":43262,"line_start":617,"line_end":617,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":52642,"byte_end":52648,"line_start":233,"line_end":233,"column_start":61,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":52725,"byte_end":52731,"line_start":234,"line_end":234,"column_start":68,"column_end":74},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":52764,"byte_end":52770,"line_start":236,"line_end":236,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":53521,"byte_end":53527,"line_start":265,"line_end":265,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":58148,"byte_end":58154,"line_start":402,"line_end":402,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":481},{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":59493,"byte_end":59499,"line_start":436,"line_end":436,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":61805,"byte_end":61811,"line_start":498,"line_end":498,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":493},{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":63494,"byte_end":63500,"line_start":540,"line_end":540,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":64899,"byte_end":64905,"line_start":576,"line_end":576,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":66320,"byte_end":66326,"line_start":617,"line_end":617,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":509},{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":67620,"byte_end":67626,"line_start":655,"line_end":655,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":67767,"byte_end":67773,"line_start":662,"line_end":662,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":67922,"byte_end":67928,"line_start":669,"line_end":669,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":68499,"byte_end":68514,"line_start":686,"line_end":686,"column_start":68,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":68573,"byte_end":68588,"line_start":688,"line_end":688,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":71008,"byte_end":71023,"line_start":761,"line_end":761,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":72856,"byte_end":72871,"line_start":807,"line_end":807,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":560},{"krate":0,"index":561}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":73053,"byte_end":73068,"line_start":815,"line_end":815,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":566}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":73270,"byte_end":73285,"line_start":823,"line_end":823,"column_start":70,"column_end":85},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":73625,"byte_end":73641,"line_start":833,"line_end":833,"column_start":68,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":73700,"byte_end":73716,"line_start":835,"line_end":835,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":589},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":76116,"byte_end":76132,"line_start":906,"line_end":906,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":599}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":76788,"byte_end":76804,"line_start":924,"line_end":924,"column_start":61,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":77508,"byte_end":77524,"line_start":942,"line_end":942,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":79371,"byte_end":79387,"line_start":988,"line_end":988,"column_start":55,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":79573,"byte_end":79589,"line_start":996,"line_end":996,"column_start":58,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":79766,"byte_end":79782,"line_start":1003,"line_end":1003,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":629}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":79987,"byte_end":80003,"line_start":1011,"line_end":1011,"column_start":70,"column_end":86},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":80366,"byte_end":80391,"line_start":1022,"line_end":1022,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":80457,"byte_end":80482,"line_start":1025,"line_end":1025,"column_start":52,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":652},{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":82049,"byte_end":82074,"line_start":1074,"line_end":1074,"column_start":56,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":83950,"byte_end":83975,"line_start":1120,"line_end":1120,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":84669,"byte_end":84694,"line_start":1139,"line_end":1139,"column_start":57,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":672},{"krate":0,"index":673}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":86091,"byte_end":86116,"line_start":1184,"line_end":1184,"column_start":62,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":678},{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":86305,"byte_end":86330,"line_start":1192,"line_end":1192,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":86547,"byte_end":86572,"line_start":1201,"line_end":1201,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":87195,"byte_end":87216,"line_start":1218,"line_end":1218,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":87290,"byte_end":87311,"line_start":1219,"line_end":1219,"column_start":61,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":87401,"byte_end":87422,"line_start":1223,"line_end":1223,"column_start":45,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":89195,"byte_end":89216,"line_start":1275,"line_end":1275,"column_start":49,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":90186,"byte_end":90207,"line_start":1295,"line_end":1295,"column_start":55,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":723},{"krate":0,"index":724}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":90376,"byte_end":90397,"line_start":1303,"line_end":1303,"column_start":54,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":729}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":90596,"byte_end":90617,"line_start":1312,"line_end":1312,"column_start":9,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":91251,"byte_end":91273,"line_start":1330,"line_end":1330,"column_start":9,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":91347,"byte_end":91369,"line_start":1332,"line_end":1332,"column_start":61,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":91459,"byte_end":91481,"line_start":1336,"line_end":1336,"column_start":45,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":93293,"byte_end":93315,"line_start":1388,"line_end":1388,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":763}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":94000,"byte_end":94022,"line_start":1408,"line_end":1408,"column_start":49,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":768}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":94996,"byte_end":95018,"line_start":1428,"line_end":1428,"column_start":55,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":773},{"krate":0,"index":774}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":95191,"byte_end":95213,"line_start":1436,"line_end":1436,"column_start":58,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":95377,"byte_end":95399,"line_start":1443,"line_end":1443,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":95601,"byte_end":95623,"line_start":1452,"line_end":1452,"column_start":9,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":5720,"byte_end":5728,"line_start":50,"line_end":50,"column_start":32,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":21},"to":{"krate":0,"index":27}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":6416,"byte_end":6424,"line_start":69,"line_end":69,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":21},"to":{"krate":0,"index":30}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":7461,"byte_end":7466,"line_start":96,"line_end":96,"column_start":60,"column_end":65},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":35},"to":{"krate":1,"index":1903}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":7535,"byte_end":7540,"line_start":97,"line_end":97,"column_start":60,"column_end":65},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":35},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":7572,"byte_end":7577,"line_start":99,"line_end":99,"column_start":22,"column_end":27},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":35},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":8312,"byte_end":8317,"line_start":128,"line_end":128,"column_start":30,"column_end":35},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":35},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":10944,"byte_end":10949,"line_start":208,"line_end":208,"column_start":34,"column_end":39},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":35},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":11601,"byte_end":11606,"line_start":226,"line_end":226,"column_start":35,"column_end":40},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":35},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":12669,"byte_end":12674,"line_start":256,"line_end":256,"column_start":52,"column_end":57},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":35},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":12812,"byte_end":12817,"line_start":263,"line_end":263,"column_start":34,"column_end":39},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":35},"to":{"krate":1,"index":1823}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":12963,"byte_end":12968,"line_start":270,"line_end":270,"column_start":58,"column_end":63},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":35},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":13722,"byte_end":13732,"line_start":290,"line_end":290,"column_start":74,"column_end":84},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":13790,"byte_end":13800,"line_start":292,"line_end":292,"column_start":44,"column_end":54},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":81},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":16091,"byte_end":16101,"line_start":363,"line_end":363,"column_start":48,"column_end":58},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":81},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":17869,"byte_end":17879,"line_start":409,"line_end":409,"column_start":54,"column_end":64},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":2074}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":18063,"byte_end":18073,"line_start":417,"line_end":417,"column_start":57,"column_end":67},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":2087}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":18248,"byte_end":18258,"line_start":424,"line_end":424,"column_start":53,"column_end":63},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":18451,"byte_end":18461,"line_start":432,"line_end":432,"column_start":69,"column_end":79},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":81},"to":{"krate":17,"index":5}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":19071,"byte_end":19087,"line_start":449,"line_end":449,"column_start":9,"column_end":25},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":134},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":19160,"byte_end":19176,"line_start":451,"line_end":451,"column_start":60,"column_end":76},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":134},"to":{"krate":1,"index":1903}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":19265,"byte_end":19281,"line_start":455,"line_end":455,"column_start":44,"column_end":60},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":134},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":21030,"byte_end":21046,"line_start":507,"line_end":507,"column_start":48,"column_end":64},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":134},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":21982,"byte_end":21998,"line_start":527,"line_end":527,"column_start":54,"column_end":70},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":134},"to":{"krate":1,"index":2074}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":22170,"byte_end":22186,"line_start":535,"line_end":535,"column_start":57,"column_end":73},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":134},"to":{"krate":1,"index":2087}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":22349,"byte_end":22365,"line_start":542,"line_end":542,"column_start":53,"column_end":69},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":134},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/mutex.rs","byte_start":22552,"byte_end":22568,"line_start":550,"line_end":550,"column_start":69,"column_end":85},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":134},"to":{"krate":17,"index":5}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":24000,"byte_end":24017,"line_start":46,"line_end":46,"column_start":35,"column_end":52},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":205},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":25205,"byte_end":25222,"line_start":92,"line_end":92,"column_start":39,"column_end":56},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":205},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":25849,"byte_end":25866,"line_start":115,"line_end":115,"column_start":40,"column_end":57},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":205},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":26848,"byte_end":26862,"line_start":144,"line_end":144,"column_start":9,"column_end":23},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":234},"to":{"krate":1,"index":1903}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":26961,"byte_end":26975,"line_start":147,"line_end":147,"column_start":9,"column_end":23},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":234},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":27026,"byte_end":27040,"line_start":150,"line_end":150,"column_start":38,"column_end":52},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":28224,"byte_end":28238,"line_start":189,"line_end":189,"column_start":46,"column_end":60},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":31075,"byte_end":31089,"line_start":270,"line_end":270,"column_start":50,"column_end":64},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":31778,"byte_end":31792,"line_start":288,"line_end":288,"column_start":51,"column_end":65},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":32898,"byte_end":32912,"line_start":318,"line_end":318,"column_start":68,"column_end":82},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":234},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":33090,"byte_end":33104,"line_start":325,"line_end":325,"column_start":50,"column_end":64},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":234},"to":{"krate":1,"index":1823}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":33290,"byte_end":33304,"line_start":332,"line_end":332,"column_start":74,"column_end":88},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":234},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":34193,"byte_end":34212,"line_start":356,"line_end":356,"column_start":9,"column_end":28},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":290},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":34294,"byte_end":34313,"line_start":359,"line_end":359,"column_start":65,"column_end":84},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":290},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":36753,"byte_end":36772,"line_start":431,"line_end":431,"column_start":5,"column_end":24},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":290},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":38585,"byte_end":38604,"line_start":479,"line_end":479,"column_start":9,"column_end":28},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":290},"to":{"krate":1,"index":2074}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":38814,"byte_end":38833,"line_start":489,"line_end":489,"column_start":9,"column_end":28},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":290},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":39056,"byte_end":39075,"line_start":499,"line_end":499,"column_start":9,"column_end":28},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":290},"to":{"krate":17,"index":5}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":39793,"byte_end":39818,"line_start":517,"line_end":517,"column_start":9,"column_end":34},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":345},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":39904,"byte_end":39929,"line_start":521,"line_end":521,"column_start":5,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":41778,"byte_end":41803,"line_start":575,"line_end":575,"column_start":5,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":42776,"byte_end":42801,"line_start":597,"line_end":597,"column_start":9,"column_end":34},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":345},"to":{"krate":1,"index":2074}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":42997,"byte_end":43022,"line_start":607,"line_end":607,"column_start":9,"column_end":34},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":345},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/remutex.rs","byte_start":43237,"byte_end":43262,"line_start":617,"line_end":617,"column_start":9,"column_end":34},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":345},"to":{"krate":17,"index":5}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":45472,"byte_end":45481,"line_start":61,"line_end":61,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":403},"to":{"krate":0,"index":412}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":46637,"byte_end":46646,"line_start":91,"line_end":91,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":403},"to":{"krate":0,"index":417}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":47069,"byte_end":47078,"line_start":101,"line_end":101,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":403},"to":{"krate":0,"index":419}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":48198,"byte_end":48207,"line_start":128,"line_end":128,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":403},"to":{"krate":0,"index":426}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":48597,"byte_end":48615,"line_start":137,"line_end":137,"column_start":43,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":426},"to":{"krate":0,"index":429}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":48618,"byte_end":48632,"line_start":137,"line_end":137,"column_start":64,"column_end":78},"kind":"SuperTrait","from":{"krate":0,"index":419},"to":{"krate":0,"index":429}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":49400,"byte_end":49409,"line_start":153,"line_end":153,"column_start":36,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":403},"to":{"krate":0,"index":432}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50059,"byte_end":50075,"line_start":173,"line_end":173,"column_start":40,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":432},"to":{"krate":0,"index":438}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50078,"byte_end":50091,"line_start":173,"line_end":173,"column_start":59,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":412},"to":{"krate":0,"index":438}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50754,"byte_end":50770,"line_start":190,"line_end":190,"column_start":45,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":432},"to":{"krate":0,"index":441}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":50773,"byte_end":50791,"line_start":190,"line_end":190,"column_start":64,"column_end":82},"kind":"SuperTrait","from":{"krate":0,"index":417},"to":{"krate":0,"index":441}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":51126,"byte_end":51142,"line_start":200,"line_end":200,"column_start":41,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":432},"to":{"krate":0,"index":444}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":51145,"byte_end":51159,"line_start":200,"line_end":200,"column_start":60,"column_end":74},"kind":"SuperTrait","from":{"krate":0,"index":419},"to":{"krate":0,"index":444}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":52642,"byte_end":52648,"line_start":233,"line_end":233,"column_start":61,"column_end":67},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":449},"to":{"krate":1,"index":1903}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":52725,"byte_end":52731,"line_start":234,"line_end":234,"column_start":68,"column_end":74},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":449},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":52764,"byte_end":52770,"line_start":236,"line_end":236,"column_start":23,"column_end":29},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":449},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":53521,"byte_end":53527,"line_start":265,"line_end":265,"column_start":31,"column_end":37},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":449},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":58148,"byte_end":58154,"line_start":402,"line_end":402,"column_start":35,"column_end":41},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":449},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":59493,"byte_end":59499,"line_start":436,"line_end":436,"column_start":36,"column_end":42},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":449},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":61805,"byte_end":61811,"line_start":498,"line_end":498,"column_start":40,"column_end":46},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":449},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":63494,"byte_end":63500,"line_start":540,"line_end":540,"column_start":45,"column_end":51},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":449},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":64899,"byte_end":64905,"line_start":576,"line_end":576,"column_start":38,"column_end":44},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":449},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":66320,"byte_end":66326,"line_start":617,"line_end":617,"column_start":43,"column_end":49},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":449},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":67620,"byte_end":67626,"line_start":655,"line_end":655,"column_start":53,"column_end":59},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":449},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":67767,"byte_end":67773,"line_start":662,"line_end":662,"column_start":35,"column_end":41},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":449},"to":{"krate":1,"index":1823}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":67922,"byte_end":67928,"line_start":669,"line_end":669,"column_start":59,"column_end":65},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":449},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":68499,"byte_end":68514,"line_start":686,"line_end":686,"column_start":68,"column_end":83},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":523},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":68573,"byte_end":68588,"line_start":688,"line_end":688,"column_start":45,"column_end":60},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":523},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":71008,"byte_end":71023,"line_start":761,"line_end":761,"column_start":49,"column_end":64},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":523},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":72856,"byte_end":72871,"line_start":807,"line_end":807,"column_start":55,"column_end":70},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":523},"to":{"krate":1,"index":2074}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":73053,"byte_end":73068,"line_start":815,"line_end":815,"column_start":54,"column_end":69},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":523},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":73270,"byte_end":73285,"line_start":823,"line_end":823,"column_start":70,"column_end":85},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":523},"to":{"krate":17,"index":5}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":73625,"byte_end":73641,"line_start":833,"line_end":833,"column_start":68,"column_end":84},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":571},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":73700,"byte_end":73716,"line_start":835,"line_end":835,"column_start":45,"column_end":61},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":571},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":76116,"byte_end":76132,"line_start":906,"line_end":906,"column_start":54,"column_end":70},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":571},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":76788,"byte_end":76804,"line_start":924,"line_end":924,"column_start":61,"column_end":77},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":571},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":77508,"byte_end":77524,"line_start":942,"line_end":942,"column_start":49,"column_end":65},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":571},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":79371,"byte_end":79387,"line_start":988,"line_end":988,"column_start":55,"column_end":71},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":571},"to":{"krate":1,"index":2074}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":79573,"byte_end":79589,"line_start":996,"line_end":996,"column_start":58,"column_end":74},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":571},"to":{"krate":1,"index":2087}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":79766,"byte_end":79782,"line_start":1003,"line_end":1003,"column_start":54,"column_end":70},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":571},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":79987,"byte_end":80003,"line_start":1011,"line_end":1011,"column_start":70,"column_end":86},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":571},"to":{"krate":17,"index":5}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":80366,"byte_end":80391,"line_start":1022,"line_end":1022,"column_start":9,"column_end":34},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":634},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":80457,"byte_end":80482,"line_start":1025,"line_end":1025,"column_start":52,"column_end":77},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":634},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":82049,"byte_end":82074,"line_start":1074,"line_end":1074,"column_start":56,"column_end":81},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":634},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":83950,"byte_end":83975,"line_start":1120,"line_end":1120,"column_start":61,"column_end":86},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":634},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":84669,"byte_end":84694,"line_start":1139,"line_end":1139,"column_start":57,"column_end":82},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":634},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":86091,"byte_end":86116,"line_start":1184,"line_end":1184,"column_start":62,"column_end":87},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":634},"to":{"krate":1,"index":2074}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":86305,"byte_end":86330,"line_start":1192,"line_end":1192,"column_start":61,"column_end":86},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":634},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":86547,"byte_end":86572,"line_start":1201,"line_end":1201,"column_start":9,"column_end":34},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":634},"to":{"krate":17,"index":5}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":87195,"byte_end":87216,"line_start":1218,"line_end":1218,"column_start":68,"column_end":89},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":689},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":87290,"byte_end":87311,"line_start":1219,"line_end":1219,"column_start":61,"column_end":82},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":689},"to":{"krate":1,"index":1903}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":87401,"byte_end":87422,"line_start":1223,"line_end":1223,"column_start":45,"column_end":66},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":689},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":89195,"byte_end":89216,"line_start":1275,"line_end":1275,"column_start":49,"column_end":70},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":689},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":90186,"byte_end":90207,"line_start":1295,"line_end":1295,"column_start":55,"column_end":76},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":689},"to":{"krate":1,"index":2074}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":90376,"byte_end":90397,"line_start":1303,"line_end":1303,"column_start":54,"column_end":75},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":689},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":90596,"byte_end":90617,"line_start":1312,"line_end":1312,"column_start":9,"column_end":30},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":689},"to":{"krate":17,"index":5}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":91251,"byte_end":91273,"line_start":1330,"line_end":1330,"column_start":9,"column_end":31},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":734},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":91347,"byte_end":91369,"line_start":1332,"line_end":1332,"column_start":61,"column_end":83},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":734},"to":{"krate":1,"index":1903}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":91459,"byte_end":91481,"line_start":1336,"line_end":1336,"column_start":45,"column_end":67},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":734},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":93293,"byte_end":93315,"line_start":1388,"line_end":1388,"column_start":54,"column_end":76},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":734},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":94000,"byte_end":94022,"line_start":1408,"line_end":1408,"column_start":49,"column_end":71},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":734},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":94996,"byte_end":95018,"line_start":1428,"line_end":1428,"column_start":55,"column_end":77},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":734},"to":{"krate":1,"index":2074}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":95191,"byte_end":95213,"line_start":1436,"line_end":1436,"column_start":58,"column_end":80},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":734},"to":{"krate":1,"index":2087}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":95377,"byte_end":95399,"line_start":1443,"line_end":1443,"column_start":54,"column_end":76},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":734},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.4/src/rwlock.rs","byte_start":95601,"byte_end":95623,"line_start":1452,"line_end":1452,"column_start":9,"column_end":31},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":734},"to":{"krate":17,"index":5}}]}