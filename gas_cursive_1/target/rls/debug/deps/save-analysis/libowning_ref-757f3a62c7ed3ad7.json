{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0","program":"/home/raz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","owning_ref","/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","-C","metadata=757f3a62c7ed3ad7","-C","extra-filename=-757f3a62c7ed3ad7","--out-dir","/home/raz/code_projects/keep_projects/gas_cursive_1/target/rls/debug/deps","-L","dependency=/home/raz/code_projects/keep_projects/gas_cursive_1/target/rls/debug/deps","--extern","stable_deref_trait=/home/raz/code_projects/keep_projects/gas_cursive_1/target/rls/debug/deps/libstable_deref_trait-5ec3ab2487841acf.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/raz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/raz/code_projects/keep_projects/gas_cursive_1/target/rls/debug/deps/libowning_ref-757f3a62c7ed3ad7.rmeta"},"prelude":{"crate_id":{"name":"owning_ref","disambiguator":[15568681721531742483,15953847229538956127]},"crate_root":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src","external_crates":[{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[10344648486569477446,2454248652556920925]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14168888756904427512,16776303916459465465]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17407741297230913278,16283799328799007365]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4492142733197306814,14151866605630611617]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9785299734546160784,636286335322626912]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5680562745065174860,9217186745851755644]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[1647702202987759035,15124534591008137148]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[16711431240759211485,3970175217288203291]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[125532023394459561,9172165323910118991]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[17639569287364244572,9623243733363078576]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[10466182059741283835,56412014413285874]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[6793855748667116046,87956666511033926]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15647227138251999113,1639002543540862534]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[10550792004909319356,1806099500584167781]}},{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","num":15,"id":{"name":"stable_deref_trait","disambiguator":[18198962884365941290,9466889265010732196]}}],"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":0,"byte_end":60960,"line_start":1,"line_end":1918,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":15,"index":5},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6066,"byte_end":6077,"line_start":247,"line_end":247,"column_start":30,"column_end":41},"alias_span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6081,"byte_end":6094,"line_start":247,"line_end":247,"column_start":45,"column_end":58},"name":"StableAddress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":6},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6096,"byte_end":6112,"line_start":247,"line_end":247,"column_start":60,"column_end":76},"alias_span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6116,"byte_end":6134,"line_start":247,"line_end":247,"column_start":80,"column_end":98},"name":"CloneStableAddress","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":0,"byte_end":60960,"line_start":1,"line_end":1918,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":12},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":24},{"krate":0,"index":44},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":80},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":103},{"krate":0,"index":108},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":125},{"krate":0,"index":131},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":140},{"krate":0,"index":145},{"krate":0,"index":149},{"krate":0,"index":152},{"krate":0,"index":155},{"krate":0,"index":159},{"krate":0,"index":163},{"krate":0,"index":167},{"krate":0,"index":171},{"krate":0,"index":175},{"krate":0,"index":179},{"krate":0,"index":183},{"krate":0,"index":187},{"krate":0,"index":191},{"krate":0,"index":195},{"krate":0,"index":198},{"krate":0,"index":202},{"krate":0,"index":206},{"krate":0,"index":210},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":227},{"krate":0,"index":231},{"krate":0,"index":236},{"krate":0,"index":240},{"krate":0,"index":243},{"krate":0,"index":247},{"krate":0,"index":251},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":263},{"krate":0,"index":267},{"krate":0,"index":271},{"krate":0,"index":275},{"krate":0,"index":278},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":285},{"krate":0,"index":288},{"krate":0,"index":292},{"krate":0,"index":296},{"krate":0,"index":300},{"krate":0,"index":304},{"krate":0,"index":308},{"krate":0,"index":311},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":319},{"krate":0,"index":323},{"krate":0,"index":327},{"krate":0,"index":332},{"krate":0,"index":337},{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":346},{"krate":0,"index":348}],"decl_id":null,"docs":"# An owning reference.","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"!\n# An owning reference.\n\nThis crate provides the _owning reference_ types `OwningRef` and `OwningRefMut`\nthat enables it to bundle a reference together with the owner of the data it points to.\nThis allows moving and dropping of a `OwningRef` without needing to recreate the reference.\n\nThis can sometimes be useful because Rust borrowing rules normally prevent\nmoving a type that has been moved from. For example, this kind of code gets rejected:\n\n```rust,ignore\nfn return_owned_and_referenced<'a>() -> (Vec<u8>, &'a [u8]) {\n    let v = vec![1, 2, 3, 4];\n    let s = &v[1..3];\n    (v, s)\n}\n```\n\nEven though, from a memory-layout point of view, this can be entirely safe\nif the new location of the vector still lives longer than the lifetime `'a`\nof the reference because the backing allocation of the vector does not change.\n\nThis library enables this safe usage by keeping the owner and the reference\nbundled together in a wrapper type that ensure that lifetime constraint:\n\n```rust\n# extern crate owning_ref;\n# use owning_ref::OwningRef;\n# fn main() {\nfn return_owned_and_referenced() -> OwningRef<Vec<u8>, [u8]> {\n    let v = vec![1, 2, 3, 4];\n    let or = OwningRef::new(v);\n    let or = or.map(|v| &v[1..3]);\n    or\n}\n# }\n```\n\nIt works by requiring owner types to dereference to stable memory locations\nand preventing mutable access to root containers, which in practice requires heap allocation\nas provided by `Box<T>`, `Rc<T>`, etc.\n\nAlso provided are typedefs for common owner type combinations,\nwhich allow for less verbose type signatures. For example, `BoxRef<T>` instead of `OwningRef<Box<T>, T>`.\n\nThe crate also provides the more advanced `OwningHandle` type,\nwhich allows more freedom in bundling a dependent handle object\nalong with the data it depends on, at the cost of some unsafe needed in the API.\nSee the documentation around `OwningHandle` for more details.\n\n# Examples\n\n## Basics\n\n```\nextern crate owning_ref;\nuse owning_ref::BoxRef;\n\nfn main() {\n    // Create an array owned by a Box.\n    let arr = Box::new([1, 2, 3, 4]) as Box<[i32]>;\n\n    // Transfer into a BoxRef.\n    let arr: BoxRef<[i32]> = BoxRef::new(arr);\n    assert_eq!(&*arr, &[1, 2, 3, 4]);\n\n    // We can slice the array without losing ownership or changing type.\n    let arr: BoxRef<[i32]> = arr.map(|arr| &arr[1..3]);\n    assert_eq!(&*arr, &[2, 3]);\n\n    // Also works for Arc, Rc, String and Vec!\n}\n```\n\n## Caching a reference to a struct field\n\n```\nextern crate owning_ref;\nuse owning_ref::BoxRef;\n\nfn main() {\n    struct Foo {\n        tag: u32,\n        x: u16,\n        y: u16,\n        z: u16,\n    }\n    let foo = Foo { tag: 1, x: 100, y: 200, z: 300 };\n\n    let or = BoxRef::new(Box::new(foo)).map(|foo| {\n        match foo.tag {\n            0 => &foo.x,\n            1 => &foo.y,\n            2 => &foo.z,\n            _ => panic!(),\n        }\n    });\n\n    assert_eq!(*or, 200);\n}\n```\n\n## Caching a reference to an entry in a vector\n\n```\nextern crate owning_ref;\nuse owning_ref::VecRef;\n\nfn main() {\n    let v = VecRef::new(vec![1, 2, 3, 4, 5]).map(|v| &v[3]);\n    assert_eq!(*v, 4);\n}\n```\n\n## Caching a subslice of a String\n\n```\nextern crate owning_ref;\nuse owning_ref::StringRef;\n\nfn main() {\n    let s = StringRef::new(\"hello world\".to_owned())\n        .map(|s| s.split(' ').nth(1).unwrap());\n\n    assert_eq!(&*s, \"world\");\n}\n```\n\n## Reference counted slices that share ownership of the backing storage\n\n```\nextern crate owning_ref;\nuse owning_ref::RcRef;\nuse std::rc::Rc;\n\nfn main() {\n    let rc: RcRef<[i32]> = RcRef::new(Rc::new([1, 2, 3, 4]) as Rc<[i32]>);\n    assert_eq!(&*rc, &[1, 2, 3, 4]);\n\n    let rc_a: RcRef<[i32]> = rc.clone().map(|s| &s[0..2]);\n    let rc_b = rc.clone().map(|s| &s[1..3]);\n    let rc_c = rc.clone().map(|s| &s[2..4]);\n    assert_eq!(&*rc_a, &[1, 2]);\n    assert_eq!(&*rc_b, &[2, 3]);\n    assert_eq!(&*rc_c, &[3, 4]);\n\n    let rc_c_a = rc_c.clone().map(|s| &s[1]);\n    assert_eq!(&*rc_c_a, &4);\n}\n```\n\n## Atomic reference counted slices that share ownership of the backing storage\n\n```\nextern crate owning_ref;\nuse owning_ref::ArcRef;\nuse std::sync::Arc;\n\nfn main() {\n    use std::thread;\n\n    fn par_sum(rc: ArcRef<[i32]>) -> i32 {\n        if rc.len() == 0 {\n            return 0;\n        } else if rc.len() == 1 {\n            return rc[0];\n        }\n        let mid = rc.len() / 2;\n        let left = rc.clone().map(|s| &s[..mid]);\n        let right = rc.map(|s| &s[mid..]);\n\n        let left = thread::spawn(move || par_sum(left));\n        let right = thread::spawn(move || par_sum(right));\n\n        left.join().unwrap() + right.join().unwrap()\n    }\n\n    let rc: Arc<[i32]> = Arc::new([1, 2, 3, 4]);\n    let rc: ArcRef<[i32]> = rc.into();\n\n    assert_eq!(par_sum(rc), 10);\n}\n```\n\n## References into RAII locks\n\n```\nextern crate owning_ref;\nuse owning_ref::RefRef;\nuse std::cell::{RefCell, Ref};\n\nfn main() {\n    let refcell = RefCell::new((1, 2, 3, 4));\n    // Also works with Mutex and RwLock\n\n    let refref = {\n        let refref = RefRef::new(refcell.borrow()).map(|x| &x.3);\n        assert_eq!(*refref, 4);\n\n        // We move the RAII lock and the reference to one of\n        // the subfields in the data it guards here:\n        refref\n    };\n\n    assert_eq!(*refref, 4);\n\n    drop(refref);\n\n    assert_eq!(*refcell.borrow(), (1, 2, 3, 4));\n}\n```\n\n## Mutable reference\n\nWhen the owned container implements `DerefMut`, it is also possible to make\na _mutable owning reference_. (E.g. with `Box`, `RefMut`, `MutexGuard`)\n\n```\nextern crate owning_ref;\nuse owning_ref::RefMutRefMut;\nuse std::cell::{RefCell, RefMut};\n\nfn main() {\n    let refcell = RefCell::new((1, 2, 3, 4));\n\n    let mut refmut_refmut = {\n        let mut refmut_refmut = RefMutRefMut::new(refcell.borrow_mut()).map_mut(|x| &mut x.3);\n        assert_eq!(*refmut_refmut, 4);\n        *refmut_refmut *= 2;\n\n        refmut_refmut\n    };\n\n    assert_eq!(*refmut_refmut, 8);\n    *refmut_refmut *= 2;\n\n    drop(refmut_refmut);\n\n    assert_eq!(*refcell.borrow(), (1, 2, 3, 16));\n}\n```\n*/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":24,"byte_end":6002,"line_start":3,"line_end":244,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":7},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6474,"byte_end":6483,"line_start":258,"line_end":258,"column_start":12,"column_end":21},"name":"OwningRef","qualname":"::OwningRef","value":"OwningRef {  }","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11}],"decl_id":null,"docs":" An owning reference.","sig":null,"attributes":[{"value":"/ An owning reference.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6138,"byte_end":6162,"line_start":249,"line_end":249,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6163,"byte_end":6166,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ This wraps an owner `O` and a reference `&T` pointing","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6167,"byte_end":6224,"line_start":251,"line_end":251,"column_start":1,"column_end":58}},{"value":"/ at something reachable from `O::Target` while keeping","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6225,"byte_end":6282,"line_start":252,"line_end":252,"column_start":1,"column_end":58}},{"value":"/ the ability to move `self` around.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6283,"byte_end":6321,"line_start":253,"line_end":253,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6322,"byte_end":6325,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ The owner is usually a pointer that points at some base type.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6326,"byte_end":6391,"line_start":255,"line_end":255,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6392,"byte_end":6395,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"/ For more details and examples, see the module and method docs.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6396,"byte_end":6462,"line_start":257,"line_end":257,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":12},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6890,"byte_end":6902,"line_start":272,"line_end":272,"column_start":12,"column_end":24},"name":"OwningRefMut","qualname":"::OwningRefMut","value":"OwningRefMut {  }","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16}],"decl_id":null,"docs":" An mutable owning reference.","sig":null,"attributes":[{"value":"/ An mutable owning reference.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6542,"byte_end":6574,"line_start":263,"line_end":263,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6575,"byte_end":6578,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ This wraps an owner `O` and a reference `&mut T` pointing","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6579,"byte_end":6640,"line_start":265,"line_end":265,"column_start":1,"column_end":62}},{"value":"/ at something reachable from `O::Target` while keeping","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6641,"byte_end":6698,"line_start":266,"line_end":266,"column_start":1,"column_end":58}},{"value":"/ the ability to move `self` around.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6699,"byte_end":6737,"line_start":267,"line_end":267,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6738,"byte_end":6741,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ The owner is usually a pointer that points at some base type.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6742,"byte_end":6807,"line_start":269,"line_end":269,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6808,"byte_end":6811,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ For more details and examples, see the module and method docs.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6812,"byte_end":6878,"line_start":271,"line_end":271,"column_start":1,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":17},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7152,"byte_end":7158,"line_start":280,"line_end":280,"column_start":11,"column_end":17},"name":"Erased","qualname":"::Erased","value":"Erased","parent":null,"children":[],"decl_id":null,"docs":" Helper trait for an erased concrete type an owner dereferences to.\n This is used in form of a trait object for keeping\n something around to (virtually) call the destructor.\n","sig":null,"attributes":[{"value":"/ Helper trait for an erased concrete type an owner dereferences to.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":6959,"byte_end":7029,"line_start":277,"line_end":277,"column_start":1,"column_end":71}},{"value":"/ This is used in form of a trait object for keeping","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7030,"byte_end":7084,"line_start":278,"line_end":278,"column_start":1,"column_end":55}},{"value":"/ something around to (virtually) call the destructor.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7085,"byte_end":7141,"line_start":279,"line_end":279,"column_start":1,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":20},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7402,"byte_end":7412,"line_start":286,"line_end":286,"column_start":18,"column_end":28},"name":"IntoErased","qualname":"::IntoErased","value":"IntoErased<'a>","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":23}],"decl_id":null,"docs":" Helper trait for erasing the concrete type of what an owner derferences to,\n for example `Box<T> -> Box<Erased>`. This would be unneeded with\n higher kinded types support in the language.\n","sig":null,"attributes":[{"value":"/ Helper trait for erasing the concrete type of what an owner derferences to,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7187,"byte_end":7266,"line_start":283,"line_end":283,"column_start":1,"column_end":80}},{"value":"/ for example `Box<T> -> Box<Erased>`. This would be unneeded with","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7267,"byte_end":7335,"line_start":284,"line_end":284,"column_start":1,"column_end":69}},{"value":"/ higher kinded types support in the language.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7336,"byte_end":7384,"line_start":285,"line_end":285,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":22},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7493,"byte_end":7499,"line_start":288,"line_end":288,"column_start":10,"column_end":16},"name":"Erased","qualname":"::IntoErased::Erased","value":"type Erased;","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" Owner with the dereference type substituted to `Erased`.\n","sig":null,"attributes":[{"value":"/ Owner with the dereference type substituted to `Erased`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7423,"byte_end":7483,"line_start":287,"line_end":287,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7542,"byte_end":7553,"line_start":290,"line_end":290,"column_start":8,"column_end":19},"name":"into_erased","qualname":"::IntoErased::into_erased","value":"fn (self) -> Self::Erased","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" Perform the type erasure.\n","sig":null,"attributes":[{"value":"/ Perform the type erasure.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7505,"byte_end":7534,"line_start":289,"line_end":289,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":8159,"byte_end":8162,"line_start":311,"line_end":311,"column_start":12,"column_end":15},"name":"new","qualname":"<OwningRef<O, T>>::new","value":"fn (o: O) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new owning reference from a owner\n initialized to the direct dereference of it.","sig":null,"attributes":[{"value":"/ Creates a new owning reference from a owner","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7791,"byte_end":7838,"line_start":298,"line_end":298,"column_start":5,"column_end":52}},{"value":"/ initialized to the direct dereference of it.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7843,"byte_end":7891,"line_start":299,"line_end":299,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7896,"byte_end":7899,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7904,"byte_end":7917,"line_start":301,"line_end":301,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7922,"byte_end":7929,"line_start":302,"line_end":302,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7934,"byte_end":7962,"line_start":303,"line_end":303,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::OwningRef;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7967,"byte_end":7997,"line_start":304,"line_end":304,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":8002,"byte_end":8005,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":8010,"byte_end":8025,"line_start":306,"line_end":306,"column_start":5,"column_end":20}},{"value":"/     let owning_ref = OwningRef::new(Box::new(42));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":8030,"byte_end":8084,"line_start":307,"line_end":307,"column_start":5,"column_end":59}},{"value":"/     assert_eq!(*owning_ref, 42);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":8089,"byte_end":8125,"line_start":308,"line_end":308,"column_start":5,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":8130,"byte_end":8135,"line_start":309,"line_end":309,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":8140,"byte_end":8147,"line_start":310,"line_end":310,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":8709,"byte_end":8734,"line_start":326,"line_end":326,"column_start":19,"column_end":44},"name":"new_assert_stable_address","qualname":"<OwningRef<O, T>>::new_assert_stable_address","value":"fn (o: O) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Like `new`, but doesn’t require `O` to implement the `StableAddress` trait.\n Instead, the caller is responsible to make the same promises as implementing the trait.","sig":null,"attributes":[{"value":"/ Like `new`, but doesn’t require `O` to implement the `StableAddress` trait.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":8342,"byte_end":8423,"line_start":321,"line_end":321,"column_start":5,"column_end":84}},{"value":"/ Instead, the caller is responsible to make the same promises as implementing the trait.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":8428,"byte_end":8519,"line_start":322,"line_end":322,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":8524,"byte_end":8527,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ This is useful for cases where coherence rules prevents implementing the trait","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":8532,"byte_end":8614,"line_start":324,"line_end":324,"column_start":5,"column_end":87}},{"value":"/ without adding a dependency to this crate in a third-party library.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":8619,"byte_end":8690,"line_start":325,"line_end":325,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9610,"byte_end":9613,"line_start":355,"line_end":355,"column_start":12,"column_end":15},"name":"map","qualname":"<OwningRef<O, T>>::map","value":"fn <F, U> (self, f: F) -> OwningRef<O, U>","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a new owning reference that points at something reachable\n from the previous one.","sig":null,"attributes":[{"value":"/ Converts `self` into a new owning reference that points at something reachable","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":8882,"byte_end":8964,"line_start":335,"line_end":335,"column_start":5,"column_end":87}},{"value":"/ from the previous one.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":8969,"byte_end":8995,"line_start":336,"line_end":336,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9000,"byte_end":9003,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ This can be a reference to a field of `U`, something reachable from a field of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9008,"byte_end":9090,"line_start":338,"line_end":338,"column_start":5,"column_end":87}},{"value":"/ `U`, or even something unrelated with a `'static` lifetime.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9095,"byte_end":9158,"line_start":339,"line_end":339,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9163,"byte_end":9166,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9171,"byte_end":9184,"line_start":341,"line_end":341,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9189,"byte_end":9196,"line_start":342,"line_end":342,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9201,"byte_end":9229,"line_start":343,"line_end":343,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::OwningRef;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9234,"byte_end":9264,"line_start":344,"line_end":344,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9269,"byte_end":9272,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9277,"byte_end":9292,"line_start":346,"line_end":346,"column_start":5,"column_end":20}},{"value":"/     let owning_ref = OwningRef::new(Box::new([1, 2, 3, 4]));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9297,"byte_end":9361,"line_start":347,"line_end":347,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9366,"byte_end":9369,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/     // create a owning reference that points at the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9374,"byte_end":9429,"line_start":349,"line_end":349,"column_start":5,"column_end":60}},{"value":"/     // third element of the array.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9434,"byte_end":9472,"line_start":350,"line_end":350,"column_start":5,"column_end":43}},{"value":"/     let owning_ref = owning_ref.map(|array| &array[2]);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9477,"byte_end":9536,"line_start":351,"line_end":351,"column_start":5,"column_end":64}},{"value":"/     assert_eq!(*owning_ref, 3);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9541,"byte_end":9576,"line_start":352,"line_end":352,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9581,"byte_end":9586,"line_start":353,"line_end":353,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9591,"byte_end":9598,"line_start":354,"line_end":354,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":10659,"byte_end":10666,"line_start":387,"line_end":387,"column_start":12,"column_end":19},"name":"try_map","qualname":"<OwningRef<O, T>>::try_map","value":"fn <F, U, E> (self, f: F) -> Result<OwningRef<O, U>, E>","parent":null,"children":[],"decl_id":null,"docs":" Tries to convert `self` into a new owning reference that points\n at something reachable from the previous one.","sig":null,"attributes":[{"value":"/ Tries to convert `self` into a new owning reference that points","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9836,"byte_end":9903,"line_start":365,"line_end":365,"column_start":5,"column_end":72}},{"value":"/ at something reachable from the previous one.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9908,"byte_end":9957,"line_start":366,"line_end":366,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9962,"byte_end":9965,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ This can be a reference to a field of `U`, something reachable from a field of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":9970,"byte_end":10052,"line_start":368,"line_end":368,"column_start":5,"column_end":87}},{"value":"/ `U`, or even something unrelated with a `'static` lifetime.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":10057,"byte_end":10120,"line_start":369,"line_end":369,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":10125,"byte_end":10128,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":10133,"byte_end":10146,"line_start":371,"line_end":371,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":10151,"byte_end":10158,"line_start":372,"line_end":372,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":10163,"byte_end":10191,"line_start":373,"line_end":373,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::OwningRef;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":10196,"byte_end":10226,"line_start":374,"line_end":374,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":10231,"byte_end":10234,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":10239,"byte_end":10254,"line_start":376,"line_end":376,"column_start":5,"column_end":20}},{"value":"/     let owning_ref = OwningRef::new(Box::new([1, 2, 3, 4]));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":10259,"byte_end":10323,"line_start":377,"line_end":377,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":10328,"byte_end":10331,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/     // create a owning reference that points at the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":10336,"byte_end":10391,"line_start":379,"line_end":379,"column_start":5,"column_end":60}},{"value":"/     // third element of the array.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":10396,"byte_end":10434,"line_start":380,"line_end":380,"column_start":5,"column_end":43}},{"value":"/     let owning_ref = owning_ref.try_map(|array| {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":10439,"byte_end":10492,"line_start":381,"line_end":381,"column_start":5,"column_end":58}},{"value":"/         if array[2] == 3 { Ok(&array[2]) } else { Err(()) }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":10497,"byte_end":10560,"line_start":382,"line_end":382,"column_start":5,"column_end":68}},{"value":"/     });","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":10565,"byte_end":10576,"line_start":383,"line_end":383,"column_start":5,"column_end":16}},{"value":"/     assert_eq!(*owning_ref.unwrap(), 3);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":10581,"byte_end":10625,"line_start":384,"line_end":384,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":10630,"byte_end":10635,"line_start":385,"line_end":385,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":10640,"byte_end":10647,"line_start":386,"line_end":386,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":11253,"byte_end":11262,"line_start":402,"line_end":402,"column_start":19,"column_end":28},"name":"map_owner","qualname":"<OwningRef<O, T>>::map_owner","value":"fn <F, P> (self, f: F) -> OwningRef<P, T>","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a new owning reference with a different owner type.","sig":null,"attributes":[{"value":"/ Converts `self` into a new owning reference with a different owner type.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":10919,"byte_end":10995,"line_start":397,"line_end":397,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":11000,"byte_end":11003,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ The new owner type needs to still contain the original owner in some way","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":11008,"byte_end":11084,"line_start":399,"line_end":399,"column_start":5,"column_end":81}},{"value":"/ so that the reference into it remains valid. This function is marked unsafe","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":11089,"byte_end":11168,"line_start":400,"line_end":400,"column_start":5,"column_end":84}},{"value":"/ because the user needs to manually uphold this guarantee.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":11173,"byte_end":11234,"line_start":401,"line_end":401,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":11763,"byte_end":11776,"line_start":418,"line_end":418,"column_start":12,"column_end":25},"name":"map_owner_box","qualname":"<OwningRef<O, T>>::map_owner_box","value":"fn (self) -> OwningRef<Box<O>, T>","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a new owning reference where the owner is wrapped\n in an additional `Box<O>`.","sig":null,"attributes":[{"value":"/ Converts `self` into a new owning reference where the owner is wrapped","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":11516,"byte_end":11590,"line_start":413,"line_end":413,"column_start":5,"column_end":79}},{"value":"/ in an additional `Box<O>`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":11595,"byte_end":11625,"line_start":414,"line_end":414,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":11630,"byte_end":11633,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ This can be used to safely erase the owner of any `OwningRef<O, T>`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":11638,"byte_end":11709,"line_start":416,"line_end":416,"column_start":5,"column_end":76}},{"value":"/ to a `OwningRef<Box<Erased>, T>`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":11714,"byte_end":11751,"line_start":417,"line_end":417,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13182,"byte_end":13193,"line_start":457,"line_end":457,"column_start":12,"column_end":23},"name":"erase_owner","qualname":"<OwningRef<O, T>>::erase_owner","value":"fn <'a> (self) -> OwningRef<O::Erased, T>","parent":null,"children":[],"decl_id":null,"docs":" Erases the concrete base type of the owner with a trait object.","sig":null,"attributes":[{"value":"/ Erases the concrete base type of the owner with a trait object.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":11930,"byte_end":11997,"line_start":425,"line_end":425,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12002,"byte_end":12005,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ This allows mixing of owned references with different owner base types.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12010,"byte_end":12085,"line_start":427,"line_end":427,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12090,"byte_end":12093,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12098,"byte_end":12111,"line_start":429,"line_end":429,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12116,"byte_end":12123,"line_start":430,"line_end":430,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12128,"byte_end":12156,"line_start":431,"line_end":431,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::{OwningRef, Erased};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12161,"byte_end":12201,"line_start":432,"line_end":432,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12206,"byte_end":12209,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12214,"byte_end":12229,"line_start":434,"line_end":434,"column_start":5,"column_end":20}},{"value":"/     // NB: Using the concrete types here for explicitnes.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12234,"byte_end":12295,"line_start":435,"line_end":435,"column_start":5,"column_end":66}},{"value":"/     // For less verbose code type aliases like `BoxRef` are provided.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12300,"byte_end":12373,"line_start":436,"line_end":436,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12378,"byte_end":12381,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/     let owning_ref_a: OwningRef<Box<[i32; 4]>, [i32; 4]>","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12386,"byte_end":12446,"line_start":438,"line_end":438,"column_start":5,"column_end":65}},{"value":"/         = OwningRef::new(Box::new([1, 2, 3, 4]));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12451,"byte_end":12504,"line_start":439,"line_end":439,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12509,"byte_end":12512,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/     let owning_ref_b: OwningRef<Box<Vec<(i32, bool)>>, Vec<(i32, bool)>>","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12517,"byte_end":12593,"line_start":441,"line_end":441,"column_start":5,"column_end":81}},{"value":"/         = OwningRef::new(Box::new(vec![(0, false), (1, true)]));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12598,"byte_end":12666,"line_start":442,"line_end":442,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12671,"byte_end":12674,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/     let owning_ref_a: OwningRef<Box<[i32; 4]>, i32>","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12679,"byte_end":12734,"line_start":444,"line_end":444,"column_start":5,"column_end":60}},{"value":"/         = owning_ref_a.map(|a| &a[0]);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12739,"byte_end":12781,"line_start":445,"line_end":445,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12786,"byte_end":12789,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/     let owning_ref_b: OwningRef<Box<Vec<(i32, bool)>>, i32>","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12794,"byte_end":12857,"line_start":447,"line_end":447,"column_start":5,"column_end":68}},{"value":"/         = owning_ref_b.map(|a| &a[1].0);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12862,"byte_end":12906,"line_start":448,"line_end":448,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12911,"byte_end":12914,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/     let owning_refs: [OwningRef<Box<Erased>, i32>; 2]","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12919,"byte_end":12976,"line_start":450,"line_end":450,"column_start":5,"column_end":62}},{"value":"/         = [owning_ref_a.erase_owner(), owning_ref_b.erase_owner()];","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":12981,"byte_end":13052,"line_start":451,"line_end":451,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13057,"byte_end":13060,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(*owning_refs[0], 1);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13065,"byte_end":13104,"line_start":453,"line_end":453,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(*owning_refs[1], 1);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13109,"byte_end":13148,"line_start":454,"line_end":454,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13153,"byte_end":13158,"line_start":455,"line_end":455,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13163,"byte_end":13170,"line_start":456,"line_end":456,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13472,"byte_end":13480,"line_start":469,"line_end":469,"column_start":12,"column_end":20},"name":"as_owner","qualname":"<OwningRef<O, T>>::as_owner","value":"fn (&self) -> &O","parent":null,"children":[],"decl_id":null,"docs":" A reference to the underlying owner.\n","sig":null,"attributes":[{"value":"/ A reference to the underlying owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13420,"byte_end":13460,"line_start":468,"line_end":468,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13590,"byte_end":13600,"line_start":474,"line_end":474,"column_start":12,"column_end":22},"name":"into_owner","qualname":"<OwningRef<O, T>>::into_owner","value":"fn (self) -> O","parent":null,"children":[],"decl_id":null,"docs":" Discards the reference and retrieves the owner.\n","sig":null,"attributes":[{"value":"/ Discards the reference and retrieves the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13527,"byte_end":13578,"line_start":473,"line_end":473,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":14068,"byte_end":14071,"line_start":493,"line_end":493,"column_start":12,"column_end":15},"name":"new","qualname":"<OwningRefMut<O, T>>::new","value":"fn (mut o: O) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new owning reference from a owner\n initialized to the direct dereference of it.","sig":null,"attributes":[{"value":"/ Creates a new owning reference from a owner","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13686,"byte_end":13733,"line_start":480,"line_end":480,"column_start":5,"column_end":52}},{"value":"/ initialized to the direct dereference of it.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13738,"byte_end":13786,"line_start":481,"line_end":481,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13791,"byte_end":13794,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13799,"byte_end":13812,"line_start":483,"line_end":483,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13817,"byte_end":13824,"line_start":484,"line_end":484,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13829,"byte_end":13857,"line_start":485,"line_end":485,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::OwningRefMut;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13862,"byte_end":13895,"line_start":486,"line_end":486,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13900,"byte_end":13903,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13908,"byte_end":13923,"line_start":488,"line_end":488,"column_start":5,"column_end":20}},{"value":"/     let owning_ref_mut = OwningRefMut::new(Box::new(42));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13928,"byte_end":13989,"line_start":489,"line_end":489,"column_start":5,"column_end":66}},{"value":"/     assert_eq!(*owning_ref_mut, 42);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13994,"byte_end":14034,"line_start":490,"line_end":490,"column_start":5,"column_end":45}},{"value":"/ }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":14039,"byte_end":14044,"line_start":491,"line_end":491,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":14049,"byte_end":14056,"line_start":492,"line_end":492,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":14632,"byte_end":14657,"line_start":508,"line_end":508,"column_start":19,"column_end":44},"name":"new_assert_stable_address","qualname":"<OwningRefMut<O, T>>::new_assert_stable_address","value":"fn (mut o: O) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Like `new`, but doesn’t require `O` to implement the `StableAddress` trait.\n Instead, the caller is responsible to make the same promises as implementing the trait.","sig":null,"attributes":[{"value":"/ Like `new`, but doesn’t require `O` to implement the `StableAddress` trait.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":14265,"byte_end":14346,"line_start":503,"line_end":503,"column_start":5,"column_end":84}},{"value":"/ Instead, the caller is responsible to make the same promises as implementing the trait.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":14351,"byte_end":14442,"line_start":504,"line_end":504,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":14447,"byte_end":14450,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ This is useful for cases where coherence rules prevents implementing the trait","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":14455,"byte_end":14537,"line_start":506,"line_end":506,"column_start":5,"column_end":87}},{"value":"/ without adding a dependency to this crate in a third-party library.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":14542,"byte_end":14613,"line_start":507,"line_end":507,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":15570,"byte_end":15573,"line_start":537,"line_end":537,"column_start":12,"column_end":15},"name":"map","qualname":"<OwningRefMut<O, T>>::map","value":"fn <F, U> (mut self, f: F) -> OwningRef<O, U>","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a new _shared_ owning reference that points at\n something reachable from the previous one.","sig":null,"attributes":[{"value":"/ Converts `self` into a new _shared_ owning reference that points at","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":14819,"byte_end":14890,"line_start":517,"line_end":517,"column_start":5,"column_end":76}},{"value":"/ something reachable from the previous one.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":14895,"byte_end":14941,"line_start":518,"line_end":518,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":14946,"byte_end":14949,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ This can be a reference to a field of `U`, something reachable from a field of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":14954,"byte_end":15036,"line_start":520,"line_end":520,"column_start":5,"column_end":87}},{"value":"/ `U`, or even something unrelated with a `'static` lifetime.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":15041,"byte_end":15104,"line_start":521,"line_end":521,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":15109,"byte_end":15112,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":15117,"byte_end":15130,"line_start":523,"line_end":523,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":15135,"byte_end":15142,"line_start":524,"line_end":524,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":15147,"byte_end":15175,"line_start":525,"line_end":525,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::OwningRefMut;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":15180,"byte_end":15213,"line_start":526,"line_end":526,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":15218,"byte_end":15221,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":15226,"byte_end":15241,"line_start":528,"line_end":528,"column_start":5,"column_end":20}},{"value":"/     let owning_ref_mut = OwningRefMut::new(Box::new([1, 2, 3, 4]));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":15246,"byte_end":15317,"line_start":529,"line_end":529,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":15322,"byte_end":15325,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/     // create a owning reference that points at the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":15330,"byte_end":15385,"line_start":531,"line_end":531,"column_start":5,"column_end":60}},{"value":"/     // third element of the array.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":15390,"byte_end":15428,"line_start":532,"line_end":532,"column_start":5,"column_end":43}},{"value":"/     let owning_ref = owning_ref_mut.map(|array| &array[2]);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":15433,"byte_end":15496,"line_start":533,"line_end":533,"column_start":5,"column_end":68}},{"value":"/     assert_eq!(*owning_ref, 3);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":15501,"byte_end":15536,"line_start":534,"line_end":534,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":15541,"byte_end":15546,"line_start":535,"line_end":535,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":15551,"byte_end":15558,"line_start":536,"line_end":536,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":16576,"byte_end":16583,"line_start":567,"line_end":567,"column_start":12,"column_end":19},"name":"map_mut","qualname":"<OwningRefMut<O, T>>::map_mut","value":"fn <F, U> (mut self, f: F) -> OwningRefMut<O, U>","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a new _mutable_ owning reference that points at\n something reachable from the previous one.","sig":null,"attributes":[{"value":"/ Converts `self` into a new _mutable_ owning reference that points at","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":15808,"byte_end":15880,"line_start":547,"line_end":547,"column_start":5,"column_end":77}},{"value":"/ something reachable from the previous one.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":15885,"byte_end":15931,"line_start":548,"line_end":548,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":15936,"byte_end":15939,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ This can be a reference to a field of `U`, something reachable from a field of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":15944,"byte_end":16026,"line_start":550,"line_end":550,"column_start":5,"column_end":87}},{"value":"/ `U`, or even something unrelated with a `'static` lifetime.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":16031,"byte_end":16094,"line_start":551,"line_end":551,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":16099,"byte_end":16102,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":16107,"byte_end":16120,"line_start":553,"line_end":553,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":16125,"byte_end":16132,"line_start":554,"line_end":554,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":16137,"byte_end":16165,"line_start":555,"line_end":555,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::OwningRefMut;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":16170,"byte_end":16203,"line_start":556,"line_end":556,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":16208,"byte_end":16211,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":16216,"byte_end":16231,"line_start":558,"line_end":558,"column_start":5,"column_end":20}},{"value":"/     let owning_ref_mut = OwningRefMut::new(Box::new([1, 2, 3, 4]));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":16236,"byte_end":16307,"line_start":559,"line_end":559,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":16312,"byte_end":16315,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/     // create a owning reference that points at the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":16320,"byte_end":16375,"line_start":561,"line_end":561,"column_start":5,"column_end":60}},{"value":"/     // third element of the array.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":16380,"byte_end":16418,"line_start":562,"line_end":562,"column_start":5,"column_end":43}},{"value":"/     let owning_ref_mut = owning_ref_mut.map_mut(|array| &mut array[2]);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":16423,"byte_end":16498,"line_start":563,"line_end":563,"column_start":5,"column_end":80}},{"value":"/     assert_eq!(*owning_ref_mut, 3);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":16503,"byte_end":16542,"line_start":564,"line_end":564,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":16547,"byte_end":16552,"line_start":565,"line_end":565,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":16557,"byte_end":16564,"line_start":566,"line_end":566,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":17674,"byte_end":17681,"line_start":599,"line_end":599,"column_start":12,"column_end":19},"name":"try_map","qualname":"<OwningRefMut<O, T>>::try_map","value":"fn <F, U, E> (mut self, f: F) -> Result<OwningRef<O, U>, E>","parent":null,"children":[],"decl_id":null,"docs":" Tries to convert `self` into a new _shared_ owning reference that points\n at something reachable from the previous one.","sig":null,"attributes":[{"value":"/ Tries to convert `self` into a new _shared_ owning reference that points","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":16828,"byte_end":16904,"line_start":577,"line_end":577,"column_start":5,"column_end":81}},{"value":"/ at something reachable from the previous one.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":16909,"byte_end":16958,"line_start":578,"line_end":578,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":16963,"byte_end":16966,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ This can be a reference to a field of `U`, something reachable from a field of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":16971,"byte_end":17053,"line_start":580,"line_end":580,"column_start":5,"column_end":87}},{"value":"/ `U`, or even something unrelated with a `'static` lifetime.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":17058,"byte_end":17121,"line_start":581,"line_end":581,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":17126,"byte_end":17129,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":17134,"byte_end":17147,"line_start":583,"line_end":583,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":17152,"byte_end":17159,"line_start":584,"line_end":584,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":17164,"byte_end":17192,"line_start":585,"line_end":585,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::OwningRefMut;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":17197,"byte_end":17230,"line_start":586,"line_end":586,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":17235,"byte_end":17238,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":17243,"byte_end":17258,"line_start":588,"line_end":588,"column_start":5,"column_end":20}},{"value":"/     let owning_ref_mut = OwningRefMut::new(Box::new([1, 2, 3, 4]));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":17263,"byte_end":17334,"line_start":589,"line_end":589,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":17339,"byte_end":17342,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/     // create a owning reference that points at the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":17347,"byte_end":17402,"line_start":591,"line_end":591,"column_start":5,"column_end":60}},{"value":"/     // third element of the array.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":17407,"byte_end":17445,"line_start":592,"line_end":592,"column_start":5,"column_end":43}},{"value":"/     let owning_ref = owning_ref_mut.try_map(|array| {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":17450,"byte_end":17507,"line_start":593,"line_end":593,"column_start":5,"column_end":62}},{"value":"/         if array[2] == 3 { Ok(&array[2]) } else { Err(()) }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":17512,"byte_end":17575,"line_start":594,"line_end":594,"column_start":5,"column_end":68}},{"value":"/     });","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":17580,"byte_end":17591,"line_start":595,"line_end":595,"column_start":5,"column_end":16}},{"value":"/     assert_eq!(*owning_ref.unwrap(), 3);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":17596,"byte_end":17640,"line_start":596,"line_end":596,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":17645,"byte_end":17650,"line_start":597,"line_end":597,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":17655,"byte_end":17662,"line_start":598,"line_end":598,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18809,"byte_end":18820,"line_start":631,"line_end":631,"column_start":12,"column_end":23},"name":"try_map_mut","qualname":"<OwningRefMut<O, T>>::try_map_mut","value":"fn <F, U, E> (mut self, f: F) -> Result<OwningRefMut<O, U>, E>","parent":null,"children":[],"decl_id":null,"docs":" Tries to convert `self` into a new _mutable_ owning reference that points\n at something reachable from the previous one.","sig":null,"attributes":[{"value":"/ Tries to convert `self` into a new _mutable_ owning reference that points","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":17946,"byte_end":18023,"line_start":609,"line_end":609,"column_start":5,"column_end":82}},{"value":"/ at something reachable from the previous one.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18028,"byte_end":18077,"line_start":610,"line_end":610,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18082,"byte_end":18085,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ This can be a reference to a field of `U`, something reachable from a field of","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18090,"byte_end":18172,"line_start":612,"line_end":612,"column_start":5,"column_end":87}},{"value":"/ `U`, or even something unrelated with a `'static` lifetime.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18177,"byte_end":18240,"line_start":613,"line_end":613,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18245,"byte_end":18248,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18253,"byte_end":18266,"line_start":615,"line_end":615,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18271,"byte_end":18278,"line_start":616,"line_end":616,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18283,"byte_end":18311,"line_start":617,"line_end":617,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::OwningRefMut;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18316,"byte_end":18349,"line_start":618,"line_end":618,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18354,"byte_end":18357,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18362,"byte_end":18377,"line_start":620,"line_end":620,"column_start":5,"column_end":20}},{"value":"/     let owning_ref_mut = OwningRefMut::new(Box::new([1, 2, 3, 4]));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18382,"byte_end":18453,"line_start":621,"line_end":621,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18458,"byte_end":18461,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/     // create a owning reference that points at the","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18466,"byte_end":18521,"line_start":623,"line_end":623,"column_start":5,"column_end":60}},{"value":"/     // third element of the array.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18526,"byte_end":18564,"line_start":624,"line_end":624,"column_start":5,"column_end":43}},{"value":"/     let owning_ref_mut = owning_ref_mut.try_map_mut(|array| {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18569,"byte_end":18634,"line_start":625,"line_end":625,"column_start":5,"column_end":70}},{"value":"/         if array[2] == 3 { Ok(&mut array[2]) } else { Err(()) }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18639,"byte_end":18706,"line_start":626,"line_end":626,"column_start":5,"column_end":72}},{"value":"/     });","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18711,"byte_end":18722,"line_start":627,"line_end":627,"column_start":5,"column_end":16}},{"value":"/     assert_eq!(*owning_ref_mut.unwrap(), 3);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18727,"byte_end":18775,"line_start":628,"line_end":628,"column_start":5,"column_end":53}},{"value":"/ }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18780,"byte_end":18785,"line_start":629,"line_end":629,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":18790,"byte_end":18797,"line_start":630,"line_end":630,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":19429,"byte_end":19438,"line_start":646,"line_end":646,"column_start":19,"column_end":28},"name":"map_owner","qualname":"<OwningRefMut<O, T>>::map_owner","value":"fn <F, P> (self, f: F) -> OwningRefMut<P, T>","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a new owning reference with a different owner type.","sig":null,"attributes":[{"value":"/ Converts `self` into a new owning reference with a different owner type.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":19095,"byte_end":19171,"line_start":641,"line_end":641,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":19176,"byte_end":19179,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ The new owner type needs to still contain the original owner in some way","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":19184,"byte_end":19260,"line_start":643,"line_end":643,"column_start":5,"column_end":81}},{"value":"/ so that the reference into it remains valid. This function is marked unsafe","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":19265,"byte_end":19344,"line_start":644,"line_end":644,"column_start":5,"column_end":84}},{"value":"/ because the user needs to manually uphold this guarantee.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":19349,"byte_end":19410,"line_start":645,"line_end":645,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":19951,"byte_end":19964,"line_start":662,"line_end":662,"column_start":12,"column_end":25},"name":"map_owner_box","qualname":"<OwningRefMut<O, T>>::map_owner_box","value":"fn (self) -> OwningRefMut<Box<O>, T>","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a new owning reference where the owner is wrapped\n in an additional `Box<O>`.","sig":null,"attributes":[{"value":"/ Converts `self` into a new owning reference where the owner is wrapped","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":19698,"byte_end":19772,"line_start":657,"line_end":657,"column_start":5,"column_end":79}},{"value":"/ in an additional `Box<O>`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":19777,"byte_end":19807,"line_start":658,"line_end":658,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":19812,"byte_end":19815,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ This can be used to safely erase the owner of any `OwningRefMut<O, T>`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":19820,"byte_end":19894,"line_start":660,"line_end":660,"column_start":5,"column_end":79}},{"value":"/ to a `OwningRefMut<Box<Erased>, T>`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":19899,"byte_end":19939,"line_start":661,"line_end":661,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":21460,"byte_end":21471,"line_start":701,"line_end":701,"column_start":12,"column_end":23},"name":"erase_owner","qualname":"<OwningRefMut<O, T>>::erase_owner","value":"fn <'a> (self) -> OwningRefMut<O::Erased, T>","parent":null,"children":[],"decl_id":null,"docs":" Erases the concrete base type of the owner with a trait object.","sig":null,"attributes":[{"value":"/ Erases the concrete base type of the owner with a trait object.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":20124,"byte_end":20191,"line_start":669,"line_end":669,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":20196,"byte_end":20199,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ This allows mixing of owned references with different owner base types.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":20204,"byte_end":20279,"line_start":671,"line_end":671,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":20284,"byte_end":20287,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":20292,"byte_end":20305,"line_start":673,"line_end":673,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":20310,"byte_end":20317,"line_start":674,"line_end":674,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":20322,"byte_end":20350,"line_start":675,"line_end":675,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::{OwningRefMut, Erased};","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":20355,"byte_end":20398,"line_start":676,"line_end":676,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":20403,"byte_end":20406,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":20411,"byte_end":20426,"line_start":678,"line_end":678,"column_start":5,"column_end":20}},{"value":"/     // NB: Using the concrete types here for explicitnes.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":20431,"byte_end":20492,"line_start":679,"line_end":679,"column_start":5,"column_end":66}},{"value":"/     // For less verbose code type aliases like `BoxRef` are provided.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":20497,"byte_end":20570,"line_start":680,"line_end":680,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":20575,"byte_end":20578,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/     let owning_ref_mut_a: OwningRefMut<Box<[i32; 4]>, [i32; 4]>","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":20583,"byte_end":20650,"line_start":682,"line_end":682,"column_start":5,"column_end":72}},{"value":"/         = OwningRefMut::new(Box::new([1, 2, 3, 4]));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":20655,"byte_end":20711,"line_start":683,"line_end":683,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":20716,"byte_end":20719,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/     let owning_ref_mut_b: OwningRefMut<Box<Vec<(i32, bool)>>, Vec<(i32, bool)>>","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":20724,"byte_end":20807,"line_start":685,"line_end":685,"column_start":5,"column_end":88}},{"value":"/         = OwningRefMut::new(Box::new(vec![(0, false), (1, true)]));","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":20812,"byte_end":20883,"line_start":686,"line_end":686,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":20888,"byte_end":20891,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/     let owning_ref_mut_a: OwningRefMut<Box<[i32; 4]>, i32>","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":20896,"byte_end":20958,"line_start":688,"line_end":688,"column_start":5,"column_end":67}},{"value":"/         = owning_ref_mut_a.map_mut(|a| &mut a[0]);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":20963,"byte_end":21017,"line_start":689,"line_end":689,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":21022,"byte_end":21025,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/     let owning_ref_mut_b: OwningRefMut<Box<Vec<(i32, bool)>>, i32>","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":21030,"byte_end":21100,"line_start":691,"line_end":691,"column_start":5,"column_end":75}},{"value":"/         = owning_ref_mut_b.map_mut(|a| &mut a[1].0);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":21105,"byte_end":21161,"line_start":692,"line_end":692,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":21166,"byte_end":21169,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/     let owning_refs_mut: [OwningRefMut<Box<Erased>, i32>; 2]","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":21174,"byte_end":21238,"line_start":694,"line_end":694,"column_start":5,"column_end":69}},{"value":"/         = [owning_ref_mut_a.erase_owner(), owning_ref_mut_b.erase_owner()];","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":21243,"byte_end":21322,"line_start":695,"line_end":695,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":21327,"byte_end":21330,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(*owning_refs_mut[0], 1);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":21335,"byte_end":21378,"line_start":697,"line_end":697,"column_start":5,"column_end":48}},{"value":"/     assert_eq!(*owning_refs_mut[1], 1);","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":21383,"byte_end":21426,"line_start":698,"line_end":698,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":21431,"byte_end":21436,"line_start":699,"line_end":699,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":21441,"byte_end":21448,"line_start":700,"line_end":700,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":21756,"byte_end":21764,"line_start":713,"line_end":713,"column_start":12,"column_end":20},"name":"as_owner","qualname":"<OwningRefMut<O, T>>::as_owner","value":"fn (&self) -> &O","parent":null,"children":[],"decl_id":null,"docs":" A reference to the underlying owner.\n","sig":null,"attributes":[{"value":"/ A reference to the underlying owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":21704,"byte_end":21744,"line_start":712,"line_end":712,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":21871,"byte_end":21883,"line_start":718,"line_end":718,"column_start":12,"column_end":24},"name":"as_owner_mut","qualname":"<OwningRefMut<O, T>>::as_owner_mut","value":"fn (&mut self) -> &mut O","parent":null,"children":[],"decl_id":null,"docs":" A mutable reference to the underlying owner.\n","sig":null,"attributes":[{"value":"/ A mutable reference to the underlying owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":21811,"byte_end":21859,"line_start":717,"line_end":717,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":22005,"byte_end":22015,"line_start":723,"line_end":723,"column_start":12,"column_end":22},"name":"into_owner","qualname":"<OwningRefMut<O, T>>::into_owner","value":"fn (self) -> O","parent":null,"children":[],"decl_id":null,"docs":" Discards the reference and retrieves the owner.\n","sig":null,"attributes":[{"value":"/ Discards the reference and retrieves the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":21942,"byte_end":21993,"line_start":722,"line_end":722,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":75},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":23447,"byte_end":23459,"line_start":753,"line_end":753,"column_start":12,"column_end":24},"name":"OwningHandle","qualname":"::OwningHandle","value":"OwningHandle {  }","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79}],"decl_id":null,"docs":" `OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows\n consumers to pass around an owned object and a dependent reference,\n `OwningHandle` contains an owned object and a dependent _object_.","sig":null,"attributes":[{"value":"/ `OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":22264,"byte_end":22339,"line_start":734,"line_end":734,"column_start":1,"column_end":76}},{"value":"/ consumers to pass around an owned object and a dependent reference,","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":22340,"byte_end":22411,"line_start":735,"line_end":735,"column_start":1,"column_end":72}},{"value":"/ `OwningHandle` contains an owned object and a dependent _object_.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":22412,"byte_end":22481,"line_start":736,"line_end":736,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":22482,"byte_end":22485,"line_start":737,"line_end":737,"column_start":1,"column_end":4}},{"value":"/ `OwningHandle` can encapsulate a `RefMut` along with its associated","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":22486,"byte_end":22557,"line_start":738,"line_end":738,"column_start":1,"column_end":72}},{"value":"/ `RefCell`, or an `RwLockReadGuard` along with its associated `RwLock`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":22558,"byte_end":22632,"line_start":739,"line_end":739,"column_start":1,"column_end":75}},{"value":"/ However, the API is completely generic and there are no restrictions on","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":22633,"byte_end":22708,"line_start":740,"line_end":740,"column_start":1,"column_end":76}},{"value":"/ what types of owning and dependent objects may be used.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":22709,"byte_end":22768,"line_start":741,"line_end":741,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":22769,"byte_end":22772,"line_start":742,"line_end":742,"column_start":1,"column_end":4}},{"value":"/ `OwningHandle` is created by passing an owner object (which dereferences","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":22773,"byte_end":22849,"line_start":743,"line_end":743,"column_start":1,"column_end":77}},{"value":"/ to a stable address) along with a callback which receives a pointer to","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":22850,"byte_end":22924,"line_start":744,"line_end":744,"column_start":1,"column_end":75}},{"value":"/ that stable location. The callback may then dereference the pointer and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":22925,"byte_end":23000,"line_start":745,"line_end":745,"column_start":1,"column_end":76}},{"value":"/ mint a dependent object, with the guarantee that the returned object will","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":23001,"byte_end":23078,"line_start":746,"line_end":746,"column_start":1,"column_end":78}},{"value":"/ not outlive the referent of the pointer.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":23079,"byte_end":23123,"line_start":747,"line_end":747,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":23124,"byte_end":23127,"line_start":748,"line_end":748,"column_start":1,"column_end":4}},{"value":"/ Since the callback needs to dereference a raw pointer, it requires `unsafe`","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":23128,"byte_end":23207,"line_start":749,"line_end":749,"column_start":1,"column_end":80}},{"value":"/ code. To avoid forcing this unsafety on most callers, the `ToHandle` trait is","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":23208,"byte_end":23289,"line_start":750,"line_end":750,"column_start":1,"column_end":82}},{"value":"/ implemented for common data structures. Types that implement `ToHandle` can","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":23290,"byte_end":23369,"line_start":751,"line_end":751,"column_start":1,"column_end":80}},{"value":"/ be wrapped into an `OwningHandle` without passing a callback.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":23370,"byte_end":23435,"line_start":752,"line_end":752,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":92},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":24086,"byte_end":24094,"line_start":782,"line_end":782,"column_start":11,"column_end":19},"name":"ToHandle","qualname":"::ToHandle","value":"ToHandle","parent":null,"children":[{"krate":0,"index":93},{"krate":0,"index":94}],"decl_id":null,"docs":" Trait to implement the conversion of owner to handle for common types.\n","sig":null,"attributes":[{"value":"/ Trait to implement the conversion of owner to handle for common types.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":24001,"byte_end":24075,"line_start":781,"line_end":781,"column_start":1,"column_end":75}}]},{"kind":"Type","id":{"krate":0,"index":93},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":24173,"byte_end":24179,"line_start":784,"line_end":784,"column_start":10,"column_end":16},"name":"Handle","qualname":"::ToHandle::Handle","value":"type Handle: Deref;","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" The type of handle to be encapsulated by the OwningHandle.\n","sig":null,"attributes":[{"value":"/ The type of handle to be encapsulated by the OwningHandle.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":24101,"byte_end":24163,"line_start":783,"line_end":783,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":24333,"byte_end":24342,"line_start":788,"line_end":788,"column_start":15,"column_end":24},"name":"to_handle","qualname":"::ToHandle::to_handle","value":"fn (x: *const Self) -> Self::Handle","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Given an appropriately-long-lived pointer to ourselves, create a\n handle to be encapsulated by the `OwningHandle`.\n","sig":null,"attributes":[{"value":"/ Given an appropriately-long-lived pointer to ourselves, create a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":24193,"byte_end":24261,"line_start":786,"line_end":786,"column_start":5,"column_end":73}},{"value":"/ handle to be encapsulated by the `OwningHandle`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":24266,"byte_end":24318,"line_start":787,"line_end":787,"column_start":5,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":95},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":24472,"byte_end":24483,"line_start":792,"line_end":792,"column_start":11,"column_end":22},"name":"ToHandleMut","qualname":"::ToHandleMut","value":"ToHandleMut","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97}],"decl_id":null,"docs":" Trait to implement the conversion of owner to mutable handle for common types.\n","sig":null,"attributes":[{"value":"/ Trait to implement the conversion of owner to mutable handle for common types.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":24379,"byte_end":24461,"line_start":791,"line_end":791,"column_start":1,"column_end":83}}]},{"kind":"Type","id":{"krate":0,"index":96},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":24562,"byte_end":24571,"line_start":794,"line_end":794,"column_start":10,"column_end":19},"name":"HandleMut","qualname":"::ToHandleMut::HandleMut","value":"type HandleMut: DerefMut;","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" The type of handle to be encapsulated by the OwningHandle.\n","sig":null,"attributes":[{"value":"/ The type of handle to be encapsulated by the OwningHandle.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":24490,"byte_end":24552,"line_start":793,"line_end":793,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":24736,"byte_end":24749,"line_start":798,"line_end":798,"column_start":15,"column_end":28},"name":"to_handle_mut","qualname":"::ToHandleMut::to_handle_mut","value":"fn (x: *const Self) -> Self::HandleMut","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Given an appropriately-long-lived pointer to ourselves, create a\n mutable handle to be encapsulated by the `OwningHandle`.\n","sig":null,"attributes":[{"value":"/ Given an appropriately-long-lived pointer to ourselves, create a","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":24588,"byte_end":24656,"line_start":796,"line_end":796,"column_start":5,"column_end":73}},{"value":"/ mutable handle to be encapsulated by the `OwningHandle`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":24661,"byte_end":24721,"line_start":797,"line_end":797,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":25123,"byte_end":25126,"line_start":807,"line_end":807,"column_start":12,"column_end":15},"name":"new","qualname":"<OwningHandle<O, H>>::new","value":"fn (o: O) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `OwningHandle` for a type that implements `ToHandle`. For types\n that don't implement `ToHandle`, callers may invoke `new_with_fn`, which accepts\n a callback to perform the conversion.\n","sig":null,"attributes":[{"value":"/ Create a new `OwningHandle` for a type that implements `ToHandle`. For types","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":24896,"byte_end":24976,"line_start":804,"line_end":804,"column_start":5,"column_end":85}},{"value":"/ that don't implement `ToHandle`, callers may invoke `new_with_fn`, which accepts","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":24981,"byte_end":25065,"line_start":805,"line_end":805,"column_start":5,"column_end":89}},{"value":"/ a callback to perform the conversion.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":25070,"byte_end":25111,"line_start":806,"line_end":806,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":25438,"byte_end":25445,"line_start":816,"line_end":816,"column_start":12,"column_end":19},"name":"new_mut","qualname":"<OwningHandle<O, H>>::new_mut","value":"fn (o: O) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new mutable `OwningHandle` for a type that implements `ToHandleMut`.\n","sig":null,"attributes":[{"value":"/ Create a new mutable `OwningHandle` for a type that implements `ToHandleMut`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":25345,"byte_end":25426,"line_start":815,"line_end":815,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":25886,"byte_end":25897,"line_start":828,"line_end":828,"column_start":12,"column_end":23},"name":"new_with_fn","qualname":"<OwningHandle<O, H>>::new_with_fn","value":"fn <F> (o: O, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new OwningHandle. The provided callback will be invoked with\n a pointer to the object owned by `o`, and the returned value is stored\n as the object to which this `OwningHandle` will forward `Deref` and\n `DerefMut`.\n","sig":null,"attributes":[{"value":"/ Create a new OwningHandle. The provided callback will be invoked with","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":25626,"byte_end":25699,"line_start":824,"line_end":824,"column_start":5,"column_end":78}},{"value":"/ a pointer to the object owned by `o`, and the returned value is stored","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":25704,"byte_end":25778,"line_start":825,"line_end":825,"column_start":5,"column_end":79}},{"value":"/ as the object to which this `OwningHandle` will forward `Deref` and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":25783,"byte_end":25854,"line_start":826,"line_end":826,"column_start":5,"column_end":76}},{"value":"/ `DerefMut`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":25859,"byte_end":25874,"line_start":827,"line_end":827,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":26409,"byte_end":26416,"line_start":846,"line_end":846,"column_start":12,"column_end":19},"name":"try_new","qualname":"<OwningHandle<O, H>>::try_new","value":"fn <F, E> (o: O, f: F) -> Result<Self, E>","parent":null,"children":[],"decl_id":null,"docs":" Create a new OwningHandle. The provided callback will be invoked with\n a pointer to the object owned by `o`, and the returned value is stored\n as the object to which this `OwningHandle` will forward `Deref` and\n `DerefMut`.\n","sig":null,"attributes":[{"value":"/ Create a new OwningHandle. The provided callback will be invoked with","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":26149,"byte_end":26222,"line_start":842,"line_end":842,"column_start":5,"column_end":78}},{"value":"/ a pointer to the object owned by `o`, and the returned value is stored","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":26227,"byte_end":26301,"line_start":843,"line_end":843,"column_start":5,"column_end":79}},{"value":"/ as the object to which this `OwningHandle` will forward `Deref` and","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":26306,"byte_end":26377,"line_start":844,"line_end":844,"column_start":5,"column_end":76}},{"value":"/ `DerefMut`.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":26382,"byte_end":26397,"line_start":845,"line_end":845,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":26748,"byte_end":26756,"line_start":861,"line_end":861,"column_start":12,"column_end":20},"name":"as_owner","qualname":"<OwningHandle<O, H>>::as_owner","value":"fn (&self) -> &O","parent":null,"children":[],"decl_id":null,"docs":" A getter for the underlying owner.\n","sig":null,"attributes":[{"value":"/ A getter for the underlying owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":26698,"byte_end":26736,"line_start":860,"line_end":860,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":26872,"byte_end":26882,"line_start":866,"line_end":866,"column_start":12,"column_end":22},"name":"into_owner","qualname":"<OwningHandle<O, H>>::into_owner","value":"fn (self) -> O","parent":null,"children":[],"decl_id":null,"docs":" Discards the dependent object and returns the owner.\n","sig":null,"attributes":[{"value":"/ Discards the dependent object and returns the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":26804,"byte_end":26860,"line_start":865,"line_end":865,"column_start":5,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":275},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":32961,"byte_end":32967,"line_start":1101,"line_end":1101,"column_start":10,"column_end":16},"name":"BoxRef","qualname":"::BoxRef","value":"OwningRef<Box<T>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses a `Box` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses a `Box` as the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":32886,"byte_end":32951,"line_start":1100,"line_end":1100,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":278},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":33077,"byte_end":33083,"line_start":1103,"line_end":1103,"column_start":10,"column_end":16},"name":"VecRef","qualname":"::VecRef","value":"OwningRef<Vec<T>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses a `Vec` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses a `Vec` as the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":33002,"byte_end":33067,"line_start":1102,"line_end":1102,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":281},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":33196,"byte_end":33205,"line_start":1105,"line_end":1105,"column_start":10,"column_end":19},"name":"StringRef","qualname":"::StringRef","value":"OwningRef<String, str>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses a `String` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses a `String` as the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":33118,"byte_end":33186,"line_start":1104,"line_end":1104,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":282},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":33307,"byte_end":33312,"line_start":1108,"line_end":1108,"column_start":10,"column_end":15},"name":"RcRef","qualname":"::RcRef","value":"OwningRef<Rc<T>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses a `Rc` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses a `Rc` as the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":33233,"byte_end":33297,"line_start":1107,"line_end":1107,"column_start":1,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":285},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":33421,"byte_end":33427,"line_start":1110,"line_end":1110,"column_start":10,"column_end":16},"name":"ArcRef","qualname":"::ArcRef","value":"OwningRef<Arc<T>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses a `Arc` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses a `Arc` as the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":33346,"byte_end":33411,"line_start":1109,"line_end":1109,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":288},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":33538,"byte_end":33544,"line_start":1113,"line_end":1113,"column_start":10,"column_end":16},"name":"RefRef","qualname":"::RefRef","value":"OwningRef<Ref<'a, T>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses a `Ref` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses a `Ref` as the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":33463,"byte_end":33528,"line_start":1112,"line_end":1112,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":292},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":33665,"byte_end":33674,"line_start":1115,"line_end":1115,"column_start":10,"column_end":19},"name":"RefMutRef","qualname":"::RefMutRef","value":"OwningRef<RefMut<'a, T>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses a `RefMut` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses a `RefMut` as the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":33587,"byte_end":33655,"line_start":1114,"line_end":1114,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":296},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":33802,"byte_end":33815,"line_start":1117,"line_end":1117,"column_start":10,"column_end":23},"name":"MutexGuardRef","qualname":"::MutexGuardRef","value":"OwningRef<MutexGuard<'a, T>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses a `MutexGuard` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses a `MutexGuard` as the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":33720,"byte_end":33792,"line_start":1116,"line_end":1116,"column_start":1,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":300},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":33952,"byte_end":33970,"line_start":1119,"line_end":1119,"column_start":10,"column_end":28},"name":"RwLockReadGuardRef","qualname":"::RwLockReadGuardRef","value":"OwningRef<RwLockReadGuard<'a, T>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":33865,"byte_end":33942,"line_start":1118,"line_end":1118,"column_start":1,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":304},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":34113,"byte_end":34132,"line_start":1121,"line_end":1121,"column_start":10,"column_end":29},"name":"RwLockWriteGuardRef","qualname":"::RwLockWriteGuardRef","value":"OwningRef<RwLockWriteGuard<'a, T>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":34025,"byte_end":34103,"line_start":1120,"line_end":1120,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":308},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":34272,"byte_end":34281,"line_start":1124,"line_end":1124,"column_start":10,"column_end":19},"name":"BoxRefMut","qualname":"::BoxRefMut","value":"OwningRefMut<Box<T>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a mutable owning reference that uses a `Box` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a mutable owning reference that uses a `Box` as the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":34189,"byte_end":34262,"line_start":1123,"line_end":1123,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":311},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":34402,"byte_end":34411,"line_start":1126,"line_end":1126,"column_start":10,"column_end":19},"name":"VecRefMut","qualname":"::VecRefMut","value":"OwningRefMut<Vec<T>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a mutable owning reference that uses a `Vec` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a mutable owning reference that uses a `Vec` as the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":34319,"byte_end":34392,"line_start":1125,"line_end":1125,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":314},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":34535,"byte_end":34547,"line_start":1128,"line_end":1128,"column_start":10,"column_end":22},"name":"StringRefMut","qualname":"::StringRefMut","value":"OwningRefMut<String, str>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a mutable owning reference that uses a `String` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a mutable owning reference that uses a `String` as the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":34449,"byte_end":34525,"line_start":1127,"line_end":1127,"column_start":1,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":315},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":34664,"byte_end":34676,"line_start":1131,"line_end":1131,"column_start":10,"column_end":22},"name":"RefMutRefMut","qualname":"::RefMutRefMut","value":"OwningRefMut<RefMut<'a, T>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a mutable owning reference that uses a `RefMut` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a mutable owning reference that uses a `RefMut` as the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":34578,"byte_end":34654,"line_start":1130,"line_end":1130,"column_start":1,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":319},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":34815,"byte_end":34831,"line_start":1133,"line_end":1133,"column_start":10,"column_end":26},"name":"MutexGuardRefMut","qualname":"::MutexGuardRefMut","value":"OwningRefMut<MutexGuard<'a, T>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":34725,"byte_end":34805,"line_start":1132,"line_end":1132,"column_start":1,"column_end":81}}]},{"kind":"Type","id":{"krate":0,"index":323},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":34980,"byte_end":35002,"line_start":1135,"line_end":1135,"column_start":10,"column_end":32},"name":"RwLockWriteGuardRefMut","qualname":"::RwLockWriteGuardRefMut","value":"OwningRefMut<RwLockWriteGuard<'a, T>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":34884,"byte_end":34970,"line_start":1134,"line_end":1134,"column_start":1,"column_end":87}}]},{"kind":"Type","id":{"krate":0,"index":342},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":35597,"byte_end":35609,"line_start":1157,"line_end":1157,"column_start":10,"column_end":22},"name":"ErasedBoxRef","qualname":"::ErasedBoxRef","value":"OwningRef<Box<Erased>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses an erased `Box` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses an erased `Box` as the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":35514,"byte_end":35587,"line_start":1156,"line_end":1156,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":344},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":35724,"byte_end":35735,"line_start":1159,"line_end":1159,"column_start":10,"column_end":21},"name":"ErasedRcRef","qualname":"::ErasedRcRef","value":"OwningRef<Rc<Erased>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses an erased `Rc` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses an erased `Rc` as the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":35642,"byte_end":35714,"line_start":1158,"line_end":1158,"column_start":1,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":346},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":35850,"byte_end":35862,"line_start":1161,"line_end":1161,"column_start":10,"column_end":22},"name":"ErasedArcRef","qualname":"::ErasedArcRef","value":"OwningRef<Arc<Erased>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses an erased `Arc` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses an erased `Arc` as the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":35767,"byte_end":35840,"line_start":1160,"line_end":1160,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":348},"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":35987,"byte_end":36002,"line_start":1164,"line_end":1164,"column_start":10,"column_end":25},"name":"ErasedBoxRefMut","qualname":"::ErasedBoxRefMut","value":"OwningRefMut<Box<Erased>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a mutable owning reference that uses an erased `Box` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a mutable owning reference that uses an erased `Box` as the owner.","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":35896,"byte_end":35977,"line_start":1163,"line_end":1163,"column_start":1,"column_end":82}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7181,"byte_end":7182,"line_start":281,"line_end":281,"column_start":20,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7769,"byte_end":7778,"line_start":297,"line_end":297,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13661,"byte_end":13673,"line_start":479,"line_end":479,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":59},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":23560,"byte_end":23572,"line_start":760,"line_end":760,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":23757,"byte_end":23769,"line_start":769,"line_end":769,"column_start":37,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":23850,"byte_end":23862,"line_start":773,"line_end":773,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":24800,"byte_end":24812,"line_start":801,"line_end":801,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":25240,"byte_end":25252,"line_start":812,"line_end":812,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":25563,"byte_end":25575,"line_start":821,"line_end":821,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":27324,"byte_end":27333,"line_start":882,"line_end":882,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":27486,"byte_end":27498,"line_start":892,"line_end":892,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":143},{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":27654,"byte_end":27666,"line_start":902,"line_end":902,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":27828,"byte_end":27837,"line_start":910,"line_end":910,"column_start":45,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":27892,"byte_end":27904,"line_start":912,"line_end":912,"column_start":45,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":27947,"byte_end":27956,"line_start":914,"line_end":914,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":28050,"byte_end":28062,"line_start":920,"line_end":920,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":28156,"byte_end":28168,"line_start":926,"line_end":926,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":28275,"byte_end":28284,"line_start":932,"line_end":932,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":28377,"byte_end":28386,"line_start":938,"line_end":938,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":28557,"byte_end":28569,"line_start":947,"line_end":947,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":28762,"byte_end":28771,"line_start":956,"line_end":956,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":29102,"byte_end":29111,"line_start":970,"line_end":970,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":29405,"byte_end":29417,"line_start":982,"line_end":982,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":29714,"byte_end":29723,"line_start":994,"line_end":994,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":29961,"byte_end":29970,"line_start":1005,"line_end":1005,"column_start":50,"column_end":59},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":30048,"byte_end":30057,"line_start":1008,"line_end":1008,"column_start":36,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":30143,"byte_end":30152,"line_start":1010,"line_end":1010,"column_start":36,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":30239,"byte_end":30251,"line_start":1013,"line_end":1013,"column_start":36,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":30341,"byte_end":30353,"line_start":1015,"line_end":1015,"column_start":36,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":30424,"byte_end":30430,"line_start":1018,"line_end":1018,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":30576,"byte_end":30585,"line_start":1024,"line_end":1024,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":30731,"byte_end":30740,"line_start":1030,"line_end":1030,"column_start":27,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":30797,"byte_end":30806,"line_start":1032,"line_end":1032,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":30983,"byte_end":30992,"line_start":1038,"line_end":1038,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":31139,"byte_end":31148,"line_start":1044,"line_end":1044,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":31296,"byte_end":31308,"line_start":1050,"line_end":1050,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":31454,"byte_end":31466,"line_start":1056,"line_end":1056,"column_start":27,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":31523,"byte_end":31535,"line_start":1058,"line_end":1058,"column_start":35,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":31712,"byte_end":31724,"line_start":1064,"line_end":1064,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":31871,"byte_end":31883,"line_start":1070,"line_end":1070,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":32398,"byte_end":32405,"line_start":1086,"line_end":1086,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":32556,"byte_end":32563,"line_start":1091,"line_end":1091,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":35104,"byte_end":35107,"line_start":1137,"line_end":1137,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":35255,"byte_end":35257,"line_start":1143,"line_end":1143,"column_start":43,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":335},{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":35404,"byte_end":35407,"line_start":1149,"line_end":1149,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":341}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7181,"byte_end":7182,"line_start":281,"line_end":281,"column_start":20,"column_end":21},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":19},"to":{"krate":0,"index":17}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":7769,"byte_end":7778,"line_start":297,"line_end":297,"column_start":20,"column_end":29},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":7},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":13661,"byte_end":13673,"line_start":479,"line_end":479,"column_start":20,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":12},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":23560,"byte_end":23572,"line_start":760,"line_end":760,"column_start":22,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":75},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":23757,"byte_end":23769,"line_start":769,"line_end":769,"column_start":37,"column_end":49},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":75},"to":{"krate":15,"index":5}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":23850,"byte_end":23862,"line_start":773,"line_end":773,"column_start":25,"column_end":37},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":75},"to":{"krate":2,"index":2087}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":24800,"byte_end":24812,"line_start":801,"line_end":801,"column_start":12,"column_end":24},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":75},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":25240,"byte_end":25252,"line_start":812,"line_end":812,"column_start":12,"column_end":24},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":75},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":25563,"byte_end":25575,"line_start":821,"line_end":821,"column_start":12,"column_end":24},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":75},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":27324,"byte_end":27333,"line_start":882,"line_end":882,"column_start":30,"column_end":39},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":7},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":27486,"byte_end":27498,"line_start":892,"line_end":892,"column_start":30,"column_end":42},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":27654,"byte_end":27666,"line_start":902,"line_end":902,"column_start":33,"column_end":45},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":2087}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":27828,"byte_end":27837,"line_start":910,"line_end":910,"column_start":45,"column_end":54},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":7},"to":{"krate":15,"index":5}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":27892,"byte_end":27904,"line_start":912,"line_end":912,"column_start":45,"column_end":57},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":12},"to":{"krate":15,"index":5}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":27947,"byte_end":27956,"line_start":914,"line_end":914,"column_start":33,"column_end":42},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":7},"to":{"krate":2,"index":1814}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":28050,"byte_end":28062,"line_start":920,"line_end":920,"column_start":33,"column_end":45},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":1814}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":28156,"byte_end":28168,"line_start":926,"line_end":926,"column_start":33,"column_end":45},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":1817}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":28275,"byte_end":28284,"line_start":932,"line_end":932,"column_start":34,"column_end":43},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":7},"to":{"krate":2,"index":1582}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":28377,"byte_end":28386,"line_start":938,"line_end":938,"column_start":32,"column_end":41},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":7},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":28557,"byte_end":28569,"line_start":947,"line_end":947,"column_start":32,"column_end":44},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":28762,"byte_end":28771,"line_start":956,"line_end":956,"column_start":49,"column_end":58},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":7},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":29102,"byte_end":29111,"line_start":970,"line_end":970,"column_start":30,"column_end":39},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":7},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":29405,"byte_end":29417,"line_start":982,"line_end":982,"column_start":30,"column_end":42},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":29714,"byte_end":29723,"line_start":994,"line_end":994,"column_start":30,"column_end":39},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":7},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":29961,"byte_end":29970,"line_start":1005,"line_end":1005,"column_start":50,"column_end":59},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":7},"to":{"krate":15,"index":6}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":30048,"byte_end":30057,"line_start":1008,"line_end":1008,"column_start":36,"column_end":45},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":7},"to":{"krate":2,"index":1903}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":30143,"byte_end":30152,"line_start":1010,"line_end":1010,"column_start":36,"column_end":45},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":7},"to":{"krate":2,"index":1915}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":30239,"byte_end":30251,"line_start":1013,"line_end":1013,"column_start":36,"column_end":48},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":1903}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":30341,"byte_end":30353,"line_start":1015,"line_end":1015,"column_start":36,"column_end":48},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":1915}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":30424,"byte_end":30430,"line_start":1018,"line_end":1018,"column_start":16,"column_end":22},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":17},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":30576,"byte_end":30585,"line_start":1024,"line_end":1024,"column_start":34,"column_end":43},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":7},"to":{"krate":2,"index":1632}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":30731,"byte_end":30740,"line_start":1030,"line_end":1030,"column_start":27,"column_end":36},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":7},"to":{"krate":2,"index":1637}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":30797,"byte_end":30806,"line_start":1032,"line_end":1032,"column_start":35,"column_end":44},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":7},"to":{"krate":2,"index":1669}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":30983,"byte_end":30992,"line_start":1038,"line_end":1038,"column_start":28,"column_end":37},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":7},"to":{"krate":2,"index":1658}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":31139,"byte_end":31148,"line_start":1044,"line_end":1044,"column_start":29,"column_end":38},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":7},"to":{"krate":2,"index":6364}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":31296,"byte_end":31308,"line_start":1050,"line_end":1050,"column_start":34,"column_end":46},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":1632}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":31454,"byte_end":31466,"line_start":1056,"line_end":1056,"column_start":27,"column_end":39},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":1637}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":31523,"byte_end":31535,"line_start":1058,"line_end":1058,"column_start":35,"column_end":47},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":1669}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":31712,"byte_end":31724,"line_start":1064,"line_end":1064,"column_start":28,"column_end":40},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":1658}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":31871,"byte_end":31883,"line_start":1070,"line_end":1070,"column_start":29,"column_end":41},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":6364}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":32398,"byte_end":32405,"line_start":1086,"line_end":1086,"column_start":31,"column_end":38},"kind":{"Impl":{"id":40}},"from":{"krate":2,"index":2816},"to":{"krate":0,"index":92}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":32556,"byte_end":32563,"line_start":1091,"line_end":1091,"column_start":34,"column_end":41},"kind":{"Impl":{"id":41}},"from":{"krate":2,"index":2816},"to":{"krate":0,"index":95}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":35104,"byte_end":35107,"line_start":1137,"line_end":1137,"column_start":43,"column_end":46},"kind":{"Impl":{"id":42}},"from":{"krate":5,"index":82},"to":{"krate":0,"index":20}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":35255,"byte_end":35257,"line_start":1143,"line_end":1143,"column_start":43,"column_end":45},"kind":{"Impl":{"id":43}},"from":{"krate":5,"index":3023},"to":{"krate":0,"index":20}},{"span":{"file_name":"/home/raz/.cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.0/src/lib.rs","byte_start":35404,"byte_end":35407,"line_start":1149,"line_end":1149,"column_start":43,"column_end":46},"kind":{"Impl":{"id":44}},"from":{"krate":5,"index":3880},"to":{"krate":0,"index":20}}]}